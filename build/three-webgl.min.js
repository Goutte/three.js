// three.js - http://github.com/mrdoob/three.js
'use strict';var THREE=THREE||{REVISION:"56"};self.console=self.console||{info:function(){},log:function(){},debug:function(){},warn:function(){},error:function(){}};self.Int32Array=self.Int32Array||Array;self.Float32Array=self.Float32Array||Array;String.prototype.trim=String.prototype.trim||function(){return this.replace(/^\s+|\s+$/g,"")};
THREE.extend=function(a,b){if(Object.keys)for(var c=Object.keys(b),d=0,e=c.length;d<e;d++){var g=c[d];Object.defineProperty(a,g,Object.getOwnPropertyDescriptor(b,g))}else for(g in c={}.hasOwnProperty,b)c.call(b,g)&&(a[g]=b[g]);return a};
(function(){for(var a=0,b=["ms","moz","webkit","o"],c=0;c<b.length&&!window.requestAnimationFrame;++c)window.requestAnimationFrame=window[b[c]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[b[c]+"CancelAnimationFrame"]||window[b[c]+"CancelRequestAnimationFrame"];void 0===window.requestAnimationFrame&&(window.requestAnimationFrame=function(b){var c=Date.now(),g=Math.max(0,16-(c-a)),h=window.setTimeout(function(){b(c+g)},g);a=c+g;return h});window.cancelAnimationFrame=window.cancelAnimationFrame||
function(a){window.clearTimeout(a)}})();THREE.CullFaceNone=0;THREE.CullFaceBack=1;THREE.CullFaceFront=2;THREE.CullFaceFrontBack=3;THREE.FrontFaceDirectionCW=0;THREE.FrontFaceDirectionCCW=1;THREE.BasicShadowMap=0;THREE.PCFShadowMap=1;THREE.PCFSoftShadowMap=2;THREE.FrontSide=0;THREE.BackSide=1;THREE.DoubleSide=2;THREE.NoShading=0;THREE.FlatShading=1;THREE.SmoothShading=2;THREE.NoColors=0;THREE.FaceColors=1;THREE.VertexColors=2;THREE.NoBlending=0;THREE.NormalBlending=1;THREE.AdditiveBlending=2;
THREE.SubtractiveBlending=3;THREE.MultiplyBlending=4;THREE.CustomBlending=5;THREE.AddEquation=100;THREE.SubtractEquation=101;THREE.ReverseSubtractEquation=102;THREE.ZeroFactor=200;THREE.OneFactor=201;THREE.SrcColorFactor=202;THREE.OneMinusSrcColorFactor=203;THREE.SrcAlphaFactor=204;THREE.OneMinusSrcAlphaFactor=205;THREE.DstAlphaFactor=206;THREE.OneMinusDstAlphaFactor=207;THREE.DstColorFactor=208;THREE.OneMinusDstColorFactor=209;THREE.SrcAlphaSaturateFactor=210;THREE.MultiplyOperation=0;
THREE.MixOperation=1;THREE.AddOperation=2;THREE.UVMapping=function(){};THREE.CubeReflectionMapping=function(){};THREE.CubeRefractionMapping=function(){};THREE.SphericalReflectionMapping=function(){};THREE.SphericalRefractionMapping=function(){};THREE.RepeatWrapping=1E3;THREE.ClampToEdgeWrapping=1001;THREE.MirroredRepeatWrapping=1002;THREE.NearestFilter=1003;THREE.NearestMipMapNearestFilter=1004;THREE.NearestMipMapLinearFilter=1005;THREE.LinearFilter=1006;THREE.LinearMipMapNearestFilter=1007;
THREE.LinearMipMapLinearFilter=1008;THREE.UnsignedByteType=1009;THREE.ByteType=1010;THREE.ShortType=1011;THREE.UnsignedShortType=1012;THREE.IntType=1013;THREE.UnsignedIntType=1014;THREE.FloatType=1015;THREE.UnsignedShort4444Type=1016;THREE.UnsignedShort5551Type=1017;THREE.UnsignedShort565Type=1018;THREE.AlphaFormat=1019;THREE.RGBFormat=1020;THREE.RGBAFormat=1021;THREE.LuminanceFormat=1022;THREE.LuminanceAlphaFormat=1023;THREE.RGB_S3TC_DXT1_Format=2001;THREE.RGBA_S3TC_DXT1_Format=2002;
THREE.RGBA_S3TC_DXT3_Format=2003;THREE.RGBA_S3TC_DXT5_Format=2004;THREE.Color=function(a){void 0!==a&&this.set(a);return this};
THREE.extend(THREE.Color.prototype,{r:1,g:1,b:1,set:function(a){switch(typeof a){case "number":this.setHex(a);break;case "string":this.setStyle(a)}},setHex:function(a){a=Math.floor(a);this.r=(a>>16&255)/255;this.g=(a>>8&255)/255;this.b=(a&255)/255;return this},setRGB:function(a,b,c){this.r=a;this.g=b;this.b=c;return this},setHSV:function(a,b,c){console.log("DEPRECATED: Color's .setHSV() will be removed. Use .setHSL( h, s, l ) instead.");return this.setHSL(a,b*c/(1>(a=(2-b)*c)?a:2-a),a/2)},setHSL:function(a,
b,c){if(0===b)this.r=this.g=this.b=c;else{var d=function(a,b,c){0>c&&(c+=1);1<c&&(c-=1);return c<1/6?a+6*(b-a)*c:0.5>c?b:c<2/3?a+6*(b-a)*(2/3-c):a},b=0.5>=c?c*(1+b):c+b-c*b,c=2*c-b;this.r=d(c,b,a+1/3);this.g=d(c,b,a);this.b=d(c,b,a-1/3)}return this},setStyle:function(a){if(/^rgb\((\d+),(\d+),(\d+)\)$/i.test(a))return a=/^rgb\((\d+),(\d+),(\d+)\)$/i.exec(a),this.r=Math.min(255,parseInt(a[1],10))/255,this.g=Math.min(255,parseInt(a[2],10))/255,this.b=Math.min(255,parseInt(a[3],10))/255,this;if(/^rgb\((\d+)\%,(\d+)\%,(\d+)\%\)$/i.test(a))return a=
/^rgb\((\d+)\%,(\d+)\%,(\d+)\%\)$/i.exec(a),this.r=Math.min(100,parseInt(a[1],10))/100,this.g=Math.min(100,parseInt(a[2],10))/100,this.b=Math.min(100,parseInt(a[3],10))/100,this;if(/^\#([0-9a-f]{6})$/i.test(a))return a=/^\#([0-9a-f]{6})$/i.exec(a),this.setHex(parseInt(a[1],16)),this;if(/^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.test(a))return a=/^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(a),this.setHex(parseInt(a[1]+a[1]+a[2]+a[2]+a[3]+a[3],16)),this;if(/^(\w+)$/i.test(a))return this.setHex(THREE.ColorKeywords[a]),
this},copy:function(a){this.r=a.r;this.g=a.g;this.b=a.b;return this},copyGammaToLinear:function(a){this.r=a.r*a.r;this.g=a.g*a.g;this.b=a.b*a.b;return this},copyLinearToGamma:function(a){this.r=Math.sqrt(a.r);this.g=Math.sqrt(a.g);this.b=Math.sqrt(a.b);return this},convertGammaToLinear:function(){var a=this.r,b=this.g,c=this.b;this.r=a*a;this.g=b*b;this.b=c*c;return this},convertLinearToGamma:function(){this.r=Math.sqrt(this.r);this.g=Math.sqrt(this.g);this.b=Math.sqrt(this.b);return this},getHex:function(){return 255*
this.r<<16^255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getHSL:function(){var a={h:0,s:0,l:0};return function(){var b=this.r,c=this.g,d=this.b,e=Math.max(b,c,d),g=Math.min(b,c,d),h,j=(g+e)/2;if(g===e)g=h=0;else{var i=e-g,g=0.5>=j?i/(e+g):i/(2-e-g);switch(e){case b:h=(c-d)/i+(c<d?6:0);break;case c:h=(d-b)/i+2;break;case d:h=(b-c)/i+4}h/=6}a.h=h;a.s=g;a.l=j;return a}}(),getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+
","+(255*this.b|0)+")"},offsetHSL:function(a,b,c){var d=this.getHSL();d.h+=a;d.s+=b;d.l+=c;this.setHSL(d.h,d.s,d.l);return this},add:function(a){this.r+=a.r;this.g+=a.g;this.b+=a.b;return this},addColors:function(a,b){this.r=a.r+b.r;this.g=a.g+b.g;this.b=a.b+b.b;return this},addScalar:function(a){this.r+=a;this.g+=a;this.b+=a;return this},multiply:function(a){this.r*=a.r;this.g*=a.g;this.b*=a.b;return this},multiplyScalar:function(a){this.r*=a;this.g*=a;this.b*=a;return this},lerp:function(a,b){this.r+=
(a.r-this.r)*b;this.g+=(a.g-this.g)*b;this.b+=(a.b-this.b)*b;return this},clone:function(){return(new THREE.Color).setRGB(this.r,this.g,this.b)}});
THREE.ColorKeywords={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,
darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,
grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,
lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,
palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,
tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};THREE.Quaternion=function(a,b,c,d){this.x=a||0;this.y=b||0;this.z=c||0;this.w=void 0!==d?d:1};
THREE.extend(THREE.Quaternion.prototype,{set:function(a,b,c,d){this.x=a;this.y=b;this.z=c;this.w=d;return this},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;this.w=a.w;return this},setFromEuler:function(a,b){var c=Math.cos(a.x/2),d=Math.cos(a.y/2),e=Math.cos(a.z/2),g=Math.sin(a.x/2),h=Math.sin(a.y/2),j=Math.sin(a.z/2);void 0===b||"XYZ"===b?(this.x=g*d*e+c*h*j,this.y=c*h*e-g*d*j,this.z=c*d*j+g*h*e,this.w=c*d*e-g*h*j):"YXZ"===b?(this.x=g*d*e+c*h*j,this.y=c*h*e-g*d*j,this.z=c*d*j-g*h*e,this.w=c*
d*e+g*h*j):"ZXY"===b?(this.x=g*d*e-c*h*j,this.y=c*h*e+g*d*j,this.z=c*d*j+g*h*e,this.w=c*d*e-g*h*j):"ZYX"===b?(this.x=g*d*e-c*h*j,this.y=c*h*e+g*d*j,this.z=c*d*j-g*h*e,this.w=c*d*e+g*h*j):"YZX"===b?(this.x=g*d*e+c*h*j,this.y=c*h*e+g*d*j,this.z=c*d*j-g*h*e,this.w=c*d*e-g*h*j):"XZY"===b&&(this.x=g*d*e-c*h*j,this.y=c*h*e-g*d*j,this.z=c*d*j+g*h*e,this.w=c*d*e+g*h*j);return this},setFromAxisAngle:function(a,b){var c=b/2,d=Math.sin(c);this.x=a.x*d;this.y=a.y*d;this.z=a.z*d;this.w=Math.cos(c);return this},
setFromRotationMatrix:function(a){var b=a.elements,c=b[0],a=b[4],d=b[8],e=b[1],g=b[5],h=b[9],j=b[2],i=b[6],b=b[10],k=c+g+b;0<k?(c=0.5/Math.sqrt(k+1),this.w=0.25/c,this.x=(i-h)*c,this.y=(d-j)*c,this.z=(e-a)*c):c>g&&c>b?(c=2*Math.sqrt(1+c-g-b),this.w=(i-h)/c,this.x=0.25*c,this.y=(a+e)/c,this.z=(d+j)/c):g>b?(c=2*Math.sqrt(1+g-c-b),this.w=(d-j)/c,this.x=(a+e)/c,this.y=0.25*c,this.z=(h+i)/c):(c=2*Math.sqrt(1+b-c-g),this.w=(e-a)/c,this.x=(d+j)/c,this.y=(h+i)/c,this.z=0.25*c);return this},inverse:function(){this.conjugate().normalize();
return this},conjugate:function(){this.x*=-1;this.y*=-1;this.z*=-1;return this},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},normalize:function(){var a=this.length();0===a?(this.z=this.y=this.x=0,this.w=1):(a=1/a,this.x*=a,this.y*=a,this.z*=a,this.w*=a);return this},multiply:function(a,b){return void 0!==b?(console.warn("DEPRECATED: Quaternion's .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),
this.multiplyQuaternions(a,b)):this.multiplyQuaternions(this,a)},multiplyQuaternions:function(a,b){var c=a.x,d=a.y,e=a.z,g=a.w,h=b.x,j=b.y,i=b.z,k=b.w;this.x=c*k+g*h+d*i-e*j;this.y=d*k+g*j+e*h-c*i;this.z=e*k+g*i+c*j-d*h;this.w=g*k-c*h-d*j-e*i;return this},multiplyVector3:function(a){console.warn("DEPRECATED: Quaternion's .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");return a.applyQuaternion(this)},slerp:function(a,b){var c=this.x,d=this.y,e=this.z,
g=this.w,h=g*a.w+c*a.x+d*a.y+e*a.z;0>h?(this.w=-a.w,this.x=-a.x,this.y=-a.y,this.z=-a.z,h=-h):this.copy(a);if(1<=h)return this.w=g,this.x=c,this.y=d,this.z=e,this;var j=Math.acos(h),i=Math.sqrt(1-h*h);if(0.001>Math.abs(i))return this.w=0.5*(g+this.w),this.x=0.5*(c+this.x),this.y=0.5*(d+this.y),this.z=0.5*(e+this.z),this;h=Math.sin((1-b)*j)/i;j=Math.sin(b*j)/i;this.w=g*h+this.w*j;this.x=c*h+this.x*j;this.y=d*h+this.y*j;this.z=e*h+this.z*j;return this},equals:function(a){return a.x===this.x&&a.y===
this.y&&a.z===this.z&&a.w===this.w},clone:function(){return new THREE.Quaternion(this.x,this.y,this.z,this.w)}});THREE.Quaternion.slerp=function(a,b,c,d){return c.copy(a).slerp(b,d)};THREE.Vector2=function(a,b){this.x=a||0;this.y=b||0};
THREE.extend(THREE.Vector2.prototype,{set:function(a,b){this.x=a;this.y=b;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;default:throw Error("index is out of range: "+a);}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;default:throw Error("index is out of range: "+a);}},copy:function(a){this.x=a.x;this.y=a.y;return this},add:function(a,b){if(void 0!==
b)return console.warn("DEPRECATED: Vector2's .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;return this},addScalar:function(a){this.x+=a;this.y+=a;return this},sub:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector2's .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,b);this.x-=a.x;this.y-=a.y;return this},
subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;return this},divideScalar:function(a){0!==a?(this.x/=a,this.y/=a):this.set(0,0);return this},min:function(a){this.x>a.x&&(this.x=a.x);this.y>a.y&&(this.y=a.y);return this},max:function(a){this.x<a.x&&(this.x=a.x);this.y<a.y&&(this.y=a.y);return this},clamp:function(a,b){this.x<a.x?this.x=a.x:this.x>b.x&&(this.x=b.x);this.y<a.y?this.y=a.y:this.y>b.y&&(this.y=b.y);return this},negate:function(){return this.multiplyScalar(-1)},
dot:function(a){return this.x*a.x+this.y*a.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},normalize:function(){return this.divideScalar(this.length())},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-a.x,a=this.y-a.y;return b*b+a*a},setLength:function(a){var b=this.length();0!==b&&a!==b&&this.multiplyScalar(a/b);return this},lerp:function(a,b){this.x+=(a.x-this.x)*
b;this.y+=(a.y-this.y)*b;return this},equals:function(a){return a.x===this.x&&a.y===this.y},toArray:function(){return[this.x,this.y]},clone:function(){return new THREE.Vector2(this.x,this.y)}});THREE.Vector3=function(a,b,c){this.x=a||0;this.y=b||0;this.z=c||0};
THREE.extend(THREE.Vector3.prototype,{set:function(a,b,c){this.x=a;this.y=b;this.z=c;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;default:throw Error("index is out of range: "+a);}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw Error("index is out of range: "+
a);}},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;return this},add:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector3's .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;this.z+=a.z;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;return this},sub:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector3's .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
this.subVectors(a,b);this.x-=a.x;this.y-=a.y;this.z-=a.z;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;return this},multiply:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector3's .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(a,b);this.x*=a.x;this.y*=a.y;this.z*=a.z;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=a;return this},multiplyVectors:function(a,b){this.x=a.x*
b.x;this.y=a.y*b.y;this.z=a.z*b.z;return this},applyMatrix3:function(a){var b=this.x,c=this.y,d=this.z,a=a.elements;this.x=a[0]*b+a[3]*c+a[6]*d;this.y=a[1]*b+a[4]*c+a[7]*d;this.z=a[2]*b+a[5]*c+a[8]*d;return this},applyMatrix4:function(a){var b=this.x,c=this.y,d=this.z,a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d+a[12];this.y=a[1]*b+a[5]*c+a[9]*d+a[13];this.z=a[2]*b+a[6]*c+a[10]*d+a[14];return this},applyProjection:function(a){var b=this.x,c=this.y,d=this.z,a=a.elements,e=1/(a[3]*b+a[7]*c+a[11]*d+a[15]);
this.x=(a[0]*b+a[4]*c+a[8]*d+a[12])*e;this.y=(a[1]*b+a[5]*c+a[9]*d+a[13])*e;this.z=(a[2]*b+a[6]*c+a[10]*d+a[14])*e;return this},applyQuaternion:function(a){var b=this.x,c=this.y,d=this.z,e=a.x,g=a.y,h=a.z,a=a.w,j=a*b+g*d-h*c,i=a*c+h*b-e*d,k=a*d+e*c-g*b,b=-e*b-g*c-h*d;this.x=j*a+b*-e+i*-h-k*-g;this.y=i*a+b*-g+k*-e-j*-h;this.z=k*a+b*-h+j*-g-i*-e;return this},applyEuler:function(){var a=new THREE.Quaternion;return function(b,c){var d=a.setFromEuler(b,c);this.applyQuaternion(d);return this}}(),applyAxisAngle:function(){var a=
new THREE.Quaternion;return function(b,c){var d=a.setFromAxisAngle(b,c);this.applyQuaternion(d);return this}}(),transformDirection:function(a){var b=this.x,c=this.y,d=this.z,a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d;this.y=a[1]*b+a[5]*c+a[9]*d;this.z=a[2]*b+a[6]*c+a[10]*d;this.normalize();return this},divide:function(a){this.x/=a.x;this.y/=a.y;this.z/=a.z;return this},divideScalar:function(a){0!==a?(this.x/=a,this.y/=a,this.z/=a):this.z=this.y=this.x=0;return this},min:function(a){this.x>a.x&&(this.x=
a.x);this.y>a.y&&(this.y=a.y);this.z>a.z&&(this.z=a.z);return this},max:function(a){this.x<a.x&&(this.x=a.x);this.y<a.y&&(this.y=a.y);this.z<a.z&&(this.z=a.z);return this},clamp:function(a,b){this.x<a.x?this.x=a.x:this.x>b.x&&(this.x=b.x);this.y<a.y?this.y=a.y:this.y>b.y&&(this.y=b.y);this.z<a.z?this.z=a.z:this.z>b.z&&(this.z=b.z);return this},negate:function(){return this.multiplyScalar(-1)},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z},lengthSq:function(){return this.x*this.x+this.y*
this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length())},setLength:function(a){var b=this.length();0!==b&&a!==b&&this.multiplyScalar(a/b);return this},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;return this},cross:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector3's .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),
this.crossVectors(a,b);var c=this.x,d=this.y,e=this.z;this.x=d*a.z-e*a.y;this.y=e*a.x-c*a.z;this.z=c*a.y-d*a.x;return this},crossVectors:function(a,b){this.x=a.y*b.z-a.z*b.y;this.y=a.z*b.x-a.x*b.z;this.z=a.x*b.y-a.y*b.x;return this},projectOnVector:function(){var a=new THREE.Vector3;return function(b){a.copy(b).normalize();b=this.dot(a);return this.copy(a).multiplyScalar(b)}}(),projectOnPlane:function(){var a=new THREE.Vector3;return function(b){a.copy(this).projectOnVector(b);return this.sub(a)}}(),
reflect:function(){var a=new THREE.Vector3;return function(b){a.copy(this).projectOnVector(b).multiplyScalar(2);return this.subVectors(a,this)}}(),angleTo:function(a){a=this.dot(a)/(this.length()*a.length());return Math.acos(THREE.Math.clamp(a,-1,1))},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-a.x,c=this.y-a.y,a=this.z-a.z;return b*b+c*c+a*a},getPositionFromMatrix:function(a){this.x=a.elements[12];this.y=a.elements[13];this.z=a.elements[14];
return this},setEulerFromRotationMatrix:function(a,b){function c(a){return Math.min(Math.max(a,-1),1)}var d=a.elements,e=d[0],g=d[4],h=d[8],j=d[1],i=d[5],k=d[9],n=d[2],p=d[6],d=d[10];void 0===b||"XYZ"===b?(this.y=Math.asin(c(h)),0.99999>Math.abs(h)?(this.x=Math.atan2(-k,d),this.z=Math.atan2(-g,e)):(this.x=Math.atan2(p,i),this.z=0)):"YXZ"===b?(this.x=Math.asin(-c(k)),0.99999>Math.abs(k)?(this.y=Math.atan2(h,d),this.z=Math.atan2(j,i)):(this.y=Math.atan2(-n,e),this.z=0)):"ZXY"===b?(this.x=Math.asin(c(p)),
0.99999>Math.abs(p)?(this.y=Math.atan2(-n,d),this.z=Math.atan2(-g,i)):(this.y=0,this.z=Math.atan2(j,e))):"ZYX"===b?(this.y=Math.asin(-c(n)),0.99999>Math.abs(n)?(this.x=Math.atan2(p,d),this.z=Math.atan2(j,e)):(this.x=0,this.z=Math.atan2(-g,i))):"YZX"===b?(this.z=Math.asin(c(j)),0.99999>Math.abs(j)?(this.x=Math.atan2(-k,i),this.y=Math.atan2(-n,e)):(this.x=0,this.y=Math.atan2(h,d))):"XZY"===b&&(this.z=Math.asin(-c(g)),0.99999>Math.abs(g)?(this.x=Math.atan2(p,i),this.y=Math.atan2(h,e)):(this.x=Math.atan2(-k,
d),this.y=0));return this},setEulerFromQuaternion:function(a,b){function c(a){return Math.min(Math.max(a,-1),1)}var d=a.x*a.x,e=a.y*a.y,g=a.z*a.z,h=a.w*a.w;void 0===b||"XYZ"===b?(this.x=Math.atan2(2*(a.x*a.w-a.y*a.z),h-d-e+g),this.y=Math.asin(c(2*(a.x*a.z+a.y*a.w))),this.z=Math.atan2(2*(a.z*a.w-a.x*a.y),h+d-e-g)):"YXZ"===b?(this.x=Math.asin(c(2*(a.x*a.w-a.y*a.z))),this.y=Math.atan2(2*(a.x*a.z+a.y*a.w),h-d-e+g),this.z=Math.atan2(2*(a.x*a.y+a.z*a.w),h-d+e-g)):"ZXY"===b?(this.x=Math.asin(c(2*(a.x*a.w+
a.y*a.z))),this.y=Math.atan2(2*(a.y*a.w-a.z*a.x),h-d-e+g),this.z=Math.atan2(2*(a.z*a.w-a.x*a.y),h-d+e-g)):"ZYX"===b?(this.x=Math.atan2(2*(a.x*a.w+a.z*a.y),h-d-e+g),this.y=Math.asin(c(2*(a.y*a.w-a.x*a.z))),this.z=Math.atan2(2*(a.x*a.y+a.z*a.w),h+d-e-g)):"YZX"===b?(this.x=Math.atan2(2*(a.x*a.w-a.z*a.y),h-d+e-g),this.y=Math.atan2(2*(a.y*a.w-a.x*a.z),h+d-e-g),this.z=Math.asin(c(2*(a.x*a.y+a.z*a.w)))):"XZY"===b&&(this.x=Math.atan2(2*(a.x*a.w+a.y*a.z),h-d+e-g),this.y=Math.atan2(2*(a.x*a.z+a.y*a.w),h+d-
e-g),this.z=Math.asin(c(2*(a.z*a.w-a.x*a.y))));return this},getScaleFromMatrix:function(a){var b=this.set(a.elements[0],a.elements[1],a.elements[2]).length(),c=this.set(a.elements[4],a.elements[5],a.elements[6]).length(),a=this.set(a.elements[8],a.elements[9],a.elements[10]).length();this.x=b;this.y=c;this.z=a;return this},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z},toArray:function(){return[this.x,this.y,this.z]},clone:function(){return new THREE.Vector3(this.x,this.y,this.z)}});THREE.Vector4=function(a,b,c,d){this.x=a||0;this.y=b||0;this.z=c||0;this.w=void 0!==d?d:1};
THREE.extend(THREE.Vector4.prototype,{set:function(a,b,c,d){this.x=a;this.y=b;this.z=c;this.w=d;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},setW:function(a){this.w=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;case 3:this.w=b;break;default:throw Error("index is out of range: "+a);}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;
case 2:return this.z;case 3:return this.w;default:throw Error("index is out of range: "+a);}},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;this.w=void 0!==a.w?a.w:1;return this},add:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector4's .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;this.z+=a.z;this.w+=a.w;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;this.w+=a;return this},addVectors:function(a,
b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;this.w=a.w+b.w;return this},sub:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector4's .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,b);this.x-=a.x;this.y-=a.y;this.z-=a.z;this.w-=a.w;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;this.w=a.w-b.w;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=a;this.w*=a;return this},applyMatrix4:function(a){var b=
this.x,c=this.y,d=this.z,e=this.w,a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d+a[12]*e;this.y=a[1]*b+a[5]*c+a[9]*d+a[13]*e;this.z=a[2]*b+a[6]*c+a[10]*d+a[14]*e;this.w=a[3]*b+a[7]*c+a[11]*d+a[15]*e;return this},divideScalar:function(a){0!==a?(this.x/=a,this.y/=a,this.z/=a,this.w/=a):(this.z=this.y=this.x=0,this.w=1);return this},setAxisAngleFromQuaternion:function(a){this.w=2*Math.acos(a.w);var b=Math.sqrt(1-a.w*a.w);1E-4>b?(this.x=1,this.z=this.y=0):(this.x=a.x/b,this.y=a.y/b,this.z=a.z/b);return this},
setAxisAngleFromRotationMatrix:function(a){var b,c,d,a=a.elements,e=a[0];d=a[4];var g=a[8],h=a[1],j=a[5],i=a[9];c=a[2];b=a[6];var k=a[10];if(0.01>Math.abs(d-h)&&0.01>Math.abs(g-c)&&0.01>Math.abs(i-b)){if(0.1>Math.abs(d+h)&&0.1>Math.abs(g+c)&&0.1>Math.abs(i+b)&&0.1>Math.abs(e+j+k-3))return this.set(1,0,0,0),this;a=Math.PI;e=(e+1)/2;j=(j+1)/2;k=(k+1)/2;d=(d+h)/4;g=(g+c)/4;i=(i+b)/4;e>j&&e>k?0.01>e?(b=0,d=c=0.707106781):(b=Math.sqrt(e),c=d/b,d=g/b):j>k?0.01>j?(b=0.707106781,c=0,d=0.707106781):(c=Math.sqrt(j),
b=d/c,d=i/c):0.01>k?(c=b=0.707106781,d=0):(d=Math.sqrt(k),b=g/d,c=i/d);this.set(b,c,d,a);return this}a=Math.sqrt((b-i)*(b-i)+(g-c)*(g-c)+(h-d)*(h-d));0.001>Math.abs(a)&&(a=1);this.x=(b-i)/a;this.y=(g-c)/a;this.z=(h-d)/a;this.w=Math.acos((e+j+k-1)/2);return this},min:function(a){this.x>a.x&&(this.x=a.x);this.y>a.y&&(this.y=a.y);this.z>a.z&&(this.z=a.z);this.w>a.w&&(this.w=a.w);return this},max:function(a){this.x<a.x&&(this.x=a.x);this.y<a.y&&(this.y=a.y);this.z<a.z&&(this.z=a.z);this.w<a.w&&(this.w=
a.w);return this},clamp:function(a,b){this.x<a.x?this.x=a.x:this.x>b.x&&(this.x=b.x);this.y<a.y?this.y=a.y:this.y>b.y&&(this.y=b.y);this.z<a.z?this.z=a.z:this.z>b.z&&(this.z=b.z);this.w<a.w?this.w=a.w:this.w>b.w&&(this.w=b.w);return this},negate:function(){return this.multiplyScalar(-1)},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z+this.w*a.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+
this.z*this.z+this.w*this.w)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length())},setLength:function(a){var b=this.length();0!==b&&a!==b&&this.multiplyScalar(a/b);return this},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;this.w+=(a.w-this.w)*b;return this},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z&&a.w===this.w},toArray:function(){return[this.x,
this.y,this.z,this.w]},clone:function(){return new THREE.Vector4(this.x,this.y,this.z,this.w)}});THREE.Matrix3=function(a,b,c,d,e,g,h,j,i){this.elements=new Float32Array(9);this.set(void 0!==a?a:1,b||0,c||0,d||0,void 0!==e?e:1,g||0,h||0,j||0,void 0!==i?i:1)};
THREE.extend(THREE.Matrix3.prototype,{set:function(a,b,c,d,e,g,h,j,i){var k=this.elements;k[0]=a;k[3]=b;k[6]=c;k[1]=d;k[4]=e;k[7]=g;k[2]=h;k[5]=j;k[8]=i;return this},identity:function(){this.set(1,0,0,0,1,0,0,0,1);return this},copy:function(a){a=a.elements;this.set(a[0],a[3],a[6],a[1],a[4],a[7],a[2],a[5],a[8]);return this},multiplyVector3:function(a){console.warn("DEPRECATED: Matrix3's .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");return a.applyMatrix3(this)},multiplyVector3Array:function(){var a=
new THREE.Vector3;return function(b){for(var c=0,d=b.length;c<d;c+=3)a.x=b[c],a.y=b[c+1],a.z=b[c+2],a.applyMatrix3(this),b[c]=a.x,b[c+1]=a.y,b[c+2]=a.z;return b}}(),multiplyScalar:function(a){var b=this.elements;b[0]*=a;b[3]*=a;b[6]*=a;b[1]*=a;b[4]*=a;b[7]*=a;b[2]*=a;b[5]*=a;b[8]*=a;return this},determinant:function(){var a=this.elements,b=a[0],c=a[1],d=a[2],e=a[3],g=a[4],h=a[5],j=a[6],i=a[7],a=a[8];return b*g*a-b*h*i-c*e*a+c*h*j+d*e*i-d*g*j},getInverse:function(a,b){var c=a.elements,d=this.elements;
d[0]=c[10]*c[5]-c[6]*c[9];d[1]=-c[10]*c[1]+c[2]*c[9];d[2]=c[6]*c[1]-c[2]*c[5];d[3]=-c[10]*c[4]+c[6]*c[8];d[4]=c[10]*c[0]-c[2]*c[8];d[5]=-c[6]*c[0]+c[2]*c[4];d[6]=c[9]*c[4]-c[5]*c[8];d[7]=-c[9]*c[0]+c[1]*c[8];d[8]=c[5]*c[0]-c[1]*c[4];c=c[0]*d[0]+c[1]*d[3]+c[2]*d[6];if(0===c){if(b)throw Error("Matrix3.getInverse(): can't invert matrix, determinant is 0");console.warn("Matrix3.getInverse(): can't invert matrix, determinant is 0");this.identity();return this}this.multiplyScalar(1/c);return this},transpose:function(){var a,
b=this.elements;a=b[1];b[1]=b[3];b[3]=a;a=b[2];b[2]=b[6];b[6]=a;a=b[5];b[5]=b[7];b[7]=a;return this},getNormalMatrix:function(a){this.getInverse(a).transpose();return this},transposeIntoArray:function(a){var b=this.elements;a[0]=b[0];a[1]=b[3];a[2]=b[6];a[3]=b[1];a[4]=b[4];a[5]=b[7];a[6]=b[2];a[7]=b[5];a[8]=b[8];return this},clone:function(){var a=this.elements;return new THREE.Matrix3(a[0],a[3],a[6],a[1],a[4],a[7],a[2],a[5],a[8])}});THREE.Matrix4=function(a,b,c,d,e,g,h,j,i,k,n,p,t,u,v,m){var l=this.elements=new Float32Array(16);l[0]=void 0!==a?a:1;l[4]=b||0;l[8]=c||0;l[12]=d||0;l[1]=e||0;l[5]=void 0!==g?g:1;l[9]=h||0;l[13]=j||0;l[2]=i||0;l[6]=k||0;l[10]=void 0!==n?n:1;l[14]=p||0;l[3]=t||0;l[7]=u||0;l[11]=v||0;l[15]=void 0!==m?m:1};
THREE.extend(THREE.Matrix4.prototype,{set:function(a,b,c,d,e,g,h,j,i,k,n,p,t,u,v,m){var l=this.elements;l[0]=a;l[4]=b;l[8]=c;l[12]=d;l[1]=e;l[5]=g;l[9]=h;l[13]=j;l[2]=i;l[6]=k;l[10]=n;l[14]=p;l[3]=t;l[7]=u;l[11]=v;l[15]=m;return this},identity:function(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this},copy:function(a){a=a.elements;this.set(a[0],a[4],a[8],a[12],a[1],a[5],a[9],a[13],a[2],a[6],a[10],a[14],a[3],a[7],a[11],a[15]);return this},setRotationFromEuler:function(a,b){var c=this.elements,
d=a.x,e=a.y,g=a.z,h=Math.cos(d),d=Math.sin(d),j=Math.cos(e),e=Math.sin(e),i=Math.cos(g),g=Math.sin(g);if(void 0===b||"XYZ"===b){var k=h*i,n=h*g,p=d*i,t=d*g;c[0]=j*i;c[4]=-j*g;c[8]=e;c[1]=n+p*e;c[5]=k-t*e;c[9]=-d*j;c[2]=t-k*e;c[6]=p+n*e;c[10]=h*j}else"YXZ"===b?(k=j*i,n=j*g,p=e*i,t=e*g,c[0]=k+t*d,c[4]=p*d-n,c[8]=h*e,c[1]=h*g,c[5]=h*i,c[9]=-d,c[2]=n*d-p,c[6]=t+k*d,c[10]=h*j):"ZXY"===b?(k=j*i,n=j*g,p=e*i,t=e*g,c[0]=k-t*d,c[4]=-h*g,c[8]=p+n*d,c[1]=n+p*d,c[5]=h*i,c[9]=t-k*d,c[2]=-h*e,c[6]=d,c[10]=h*j):
"ZYX"===b?(k=h*i,n=h*g,p=d*i,t=d*g,c[0]=j*i,c[4]=p*e-n,c[8]=k*e+t,c[1]=j*g,c[5]=t*e+k,c[9]=n*e-p,c[2]=-e,c[6]=d*j,c[10]=h*j):"YZX"===b?(k=h*j,n=h*e,p=d*j,t=d*e,c[0]=j*i,c[4]=t-k*g,c[8]=p*g+n,c[1]=g,c[5]=h*i,c[9]=-d*i,c[2]=-e*i,c[6]=n*g+p,c[10]=k-t*g):"XZY"===b&&(k=h*j,n=h*e,p=d*j,t=d*e,c[0]=j*i,c[4]=-g,c[8]=e*i,c[1]=k*g+t,c[5]=h*i,c[9]=n*g-p,c[2]=p*g-n,c[6]=d*i,c[10]=t*g+k);return this},setRotationFromQuaternion:function(a){var b=this.elements,c=a.x,d=a.y,e=a.z,g=a.w,h=c+c,j=d+d,i=e+e,a=c*h,k=c*j,
c=c*i,n=d*j,d=d*i,e=e*i,h=g*h,j=g*j,g=g*i;b[0]=1-(n+e);b[4]=k-g;b[8]=c+j;b[1]=k+g;b[5]=1-(a+e);b[9]=d-h;b[2]=c-j;b[6]=d+h;b[10]=1-(a+n);return this},lookAt:function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(d,e,g){var h=this.elements;c.subVectors(d,e).normalize();0===c.length()&&(c.z=1);a.crossVectors(g,c).normalize();0===a.length()&&(c.x+=1E-4,a.crossVectors(g,c).normalize());b.crossVectors(c,a);h[0]=a.x;h[4]=b.x;h[8]=c.x;h[1]=a.y;h[5]=b.y;h[9]=c.y;h[2]=a.z;
h[6]=b.z;h[10]=c.z;return this}}(),multiply:function(a,b){return void 0!==b?(console.warn("DEPRECATED: Matrix4's .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(a,b)):this.multiplyMatrices(this,a)},multiplyMatrices:function(a,b){var c=a.elements,d=b.elements,e=this.elements,g=c[0],h=c[4],j=c[8],i=c[12],k=c[1],n=c[5],p=c[9],t=c[13],u=c[2],v=c[6],m=c[10],l=c[14],y=c[3],x=c[7],A=c[11],c=c[15],s=d[0],C=d[4],I=d[8],D=d[12],w=d[1],P=d[5],N=d[9],
F=d[13],X=d[2],B=d[6],W=d[10],E=d[14],Q=d[3],R=d[7],ya=d[11],d=d[15];e[0]=g*s+h*w+j*X+i*Q;e[4]=g*C+h*P+j*B+i*R;e[8]=g*I+h*N+j*W+i*ya;e[12]=g*D+h*F+j*E+i*d;e[1]=k*s+n*w+p*X+t*Q;e[5]=k*C+n*P+p*B+t*R;e[9]=k*I+n*N+p*W+t*ya;e[13]=k*D+n*F+p*E+t*d;e[2]=u*s+v*w+m*X+l*Q;e[6]=u*C+v*P+m*B+l*R;e[10]=u*I+v*N+m*W+l*ya;e[14]=u*D+v*F+m*E+l*d;e[3]=y*s+x*w+A*X+c*Q;e[7]=y*C+x*P+A*B+c*R;e[11]=y*I+x*N+A*W+c*ya;e[15]=y*D+x*F+A*E+c*d;return this},multiplyToArray:function(a,b,c){var d=this.elements;this.multiplyMatrices(a,
b);c[0]=d[0];c[1]=d[1];c[2]=d[2];c[3]=d[3];c[4]=d[4];c[5]=d[5];c[6]=d[6];c[7]=d[7];c[8]=d[8];c[9]=d[9];c[10]=d[10];c[11]=d[11];c[12]=d[12];c[13]=d[13];c[14]=d[14];c[15]=d[15];return this},multiplyScalar:function(a){var b=this.elements;b[0]*=a;b[4]*=a;b[8]*=a;b[12]*=a;b[1]*=a;b[5]*=a;b[9]*=a;b[13]*=a;b[2]*=a;b[6]*=a;b[10]*=a;b[14]*=a;b[3]*=a;b[7]*=a;b[11]*=a;b[15]*=a;return this},multiplyVector3:function(a){console.warn("DEPRECATED: Matrix4's .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.");
return a.applyProjection(this)},multiplyVector4:function(a){console.warn("DEPRECATED: Matrix4's .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this)},multiplyVector3Array:function(){var a=new THREE.Vector3;return function(b){for(var c=0,d=b.length;c<d;c+=3)a.x=b[c],a.y=b[c+1],a.z=b[c+2],a.applyProjection(this),b[c]=a.x,b[c+1]=a.y,b[c+2]=a.z;return b}}(),rotateAxis:function(a){var b=this.elements,c=a.x,d=a.y,e=a.z;a.x=c*b[0]+d*b[4]+e*b[8];a.y=
c*b[1]+d*b[5]+e*b[9];a.z=c*b[2]+d*b[6]+e*b[10];a.normalize();return a},crossVector:function(a){var b=this.elements,c=new THREE.Vector4;c.x=b[0]*a.x+b[4]*a.y+b[8]*a.z+b[12]*a.w;c.y=b[1]*a.x+b[5]*a.y+b[9]*a.z+b[13]*a.w;c.z=b[2]*a.x+b[6]*a.y+b[10]*a.z+b[14]*a.w;c.w=a.w?b[3]*a.x+b[7]*a.y+b[11]*a.z+b[15]*a.w:1;return c},determinant:function(){var a=this.elements,b=a[0],c=a[4],d=a[8],e=a[12],g=a[1],h=a[5],j=a[9],i=a[13],k=a[2],n=a[6],p=a[10],t=a[14];return a[3]*(+e*j*n-d*i*n-e*h*p+c*i*p+d*h*t-c*j*t)+a[7]*
(+b*j*t-b*i*p+e*g*p-d*g*t+d*i*k-e*j*k)+a[11]*(+b*i*n-b*h*t-e*g*n+c*g*t+e*h*k-c*i*k)+a[15]*(-d*h*k-b*j*n+b*h*p+d*g*n-c*g*p+c*j*k)},transpose:function(){var a=this.elements,b;b=a[1];a[1]=a[4];a[4]=b;b=a[2];a[2]=a[8];a[8]=b;b=a[6];a[6]=a[9];a[9]=b;b=a[3];a[3]=a[12];a[12]=b;b=a[7];a[7]=a[13];a[13]=b;b=a[11];a[11]=a[14];a[14]=b;return this},flattenToArray:function(a){var b=this.elements;a[0]=b[0];a[1]=b[1];a[2]=b[2];a[3]=b[3];a[4]=b[4];a[5]=b[5];a[6]=b[6];a[7]=b[7];a[8]=b[8];a[9]=b[9];a[10]=b[10];a[11]=
b[11];a[12]=b[12];a[13]=b[13];a[14]=b[14];a[15]=b[15];return a},flattenToArrayOffset:function(a,b){var c=this.elements;a[b]=c[0];a[b+1]=c[1];a[b+2]=c[2];a[b+3]=c[3];a[b+4]=c[4];a[b+5]=c[5];a[b+6]=c[6];a[b+7]=c[7];a[b+8]=c[8];a[b+9]=c[9];a[b+10]=c[10];a[b+11]=c[11];a[b+12]=c[12];a[b+13]=c[13];a[b+14]=c[14];a[b+15]=c[15];return a},getPosition:function(){var a=new THREE.Vector3;return function(){console.warn("DEPRECATED: Matrix4's .getPosition() has been removed. Use Vector3.getPositionFromMatrix( matrix ) instead.");
var b=this.elements;return a.set(b[12],b[13],b[14])}}(),setPosition:function(a){var b=this.elements;b[12]=a.x;b[13]=a.y;b[14]=a.z;return this},getInverse:function(a,b){var c=this.elements,d=a.elements,e=d[0],g=d[4],h=d[8],j=d[12],i=d[1],k=d[5],n=d[9],p=d[13],t=d[2],u=d[6],v=d[10],m=d[14],l=d[3],y=d[7],x=d[11],A=d[15];c[0]=n*m*y-p*v*y+p*u*x-k*m*x-n*u*A+k*v*A;c[4]=j*v*y-h*m*y-j*u*x+g*m*x+h*u*A-g*v*A;c[8]=h*p*y-j*n*y+j*k*x-g*p*x-h*k*A+g*n*A;c[12]=j*n*u-h*p*u-j*k*v+g*p*v+h*k*m-g*n*m;c[1]=p*v*l-n*m*l-
p*t*x+i*m*x+n*t*A-i*v*A;c[5]=h*m*l-j*v*l+j*t*x-e*m*x-h*t*A+e*v*A;c[9]=j*n*l-h*p*l-j*i*x+e*p*x+h*i*A-e*n*A;c[13]=h*p*t-j*n*t+j*i*v-e*p*v-h*i*m+e*n*m;c[2]=k*m*l-p*u*l+p*t*y-i*m*y-k*t*A+i*u*A;c[6]=j*u*l-g*m*l-j*t*y+e*m*y+g*t*A-e*u*A;c[10]=g*p*l-j*k*l+j*i*y-e*p*y-g*i*A+e*k*A;c[14]=j*k*t-g*p*t-j*i*u+e*p*u+g*i*m-e*k*m;c[3]=n*u*l-k*v*l-n*t*y+i*v*y+k*t*x-i*u*x;c[7]=g*v*l-h*u*l+h*t*y-e*v*y-g*t*x+e*u*x;c[11]=h*k*l-g*n*l-h*i*y+e*n*y+g*i*x-e*k*x;c[15]=g*n*t-h*k*t+h*i*u-e*n*u-g*i*v+e*k*v;c=d[0]*c[0]+d[1]*c[4]+
d[2]*c[8]+d[3]*c[12];if(0==c){if(b)throw Error("Matrix4.getInverse(): can't invert matrix, determinant is 0");console.warn("Matrix4.getInverse(): can't invert matrix, determinant is 0");this.identity();return this}this.multiplyScalar(1/c);return this},compose:function(){var a=new THREE.Matrix4,b=new THREE.Matrix4;return function(c,d,e){var g=this.elements;a.identity();a.setRotationFromQuaternion(d);b.makeScale(e.x,e.y,e.z);this.multiplyMatrices(a,b);g[12]=c.x;g[13]=c.y;g[14]=c.z;return this}}(),decompose:function(){var a=
new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3,d=new THREE.Matrix4;return function(e,g,h){var j=this.elements;a.set(j[0],j[1],j[2]);b.set(j[4],j[5],j[6]);c.set(j[8],j[9],j[10]);e=e instanceof THREE.Vector3?e:new THREE.Vector3;g=g instanceof THREE.Quaternion?g:new THREE.Quaternion;h=h instanceof THREE.Vector3?h:new THREE.Vector3;h.x=a.length();h.y=b.length();h.z=c.length();e.x=j[12];e.y=j[13];e.z=j[14];d.copy(this);d.elements[0]/=h.x;d.elements[1]/=h.x;d.elements[2]/=h.x;d.elements[4]/=
h.y;d.elements[5]/=h.y;d.elements[6]/=h.y;d.elements[8]/=h.z;d.elements[9]/=h.z;d.elements[10]/=h.z;g.setFromRotationMatrix(d);return[e,g,h]}}(),extractPosition:function(a){var b=this.elements,a=a.elements;b[12]=a[12];b[13]=a[13];b[14]=a[14];return this},extractRotation:function(){var a=new THREE.Vector3;return function(b){var c=this.elements,b=b.elements,d=1/a.set(b[0],b[1],b[2]).length(),e=1/a.set(b[4],b[5],b[6]).length(),g=1/a.set(b[8],b[9],b[10]).length();c[0]=b[0]*d;c[1]=b[1]*d;c[2]=b[2]*d;c[4]=
b[4]*e;c[5]=b[5]*e;c[6]=b[6]*e;c[8]=b[8]*g;c[9]=b[9]*g;c[10]=b[10]*g;return this}}(),translate:function(a){var b=this.elements,c=a.x,d=a.y,a=a.z;b[12]=b[0]*c+b[4]*d+b[8]*a+b[12];b[13]=b[1]*c+b[5]*d+b[9]*a+b[13];b[14]=b[2]*c+b[6]*d+b[10]*a+b[14];b[15]=b[3]*c+b[7]*d+b[11]*a+b[15];return this},rotateX:function(a){var b=this.elements,c=b[4],d=b[5],e=b[6],g=b[7],h=b[8],j=b[9],i=b[10],k=b[11],n=Math.cos(a),a=Math.sin(a);b[4]=n*c+a*h;b[5]=n*d+a*j;b[6]=n*e+a*i;b[7]=n*g+a*k;b[8]=n*h-a*c;b[9]=n*j-a*d;b[10]=
n*i-a*e;b[11]=n*k-a*g;return this},rotateY:function(a){var b=this.elements,c=b[0],d=b[1],e=b[2],g=b[3],h=b[8],j=b[9],i=b[10],k=b[11],n=Math.cos(a),a=Math.sin(a);b[0]=n*c-a*h;b[1]=n*d-a*j;b[2]=n*e-a*i;b[3]=n*g-a*k;b[8]=n*h+a*c;b[9]=n*j+a*d;b[10]=n*i+a*e;b[11]=n*k+a*g;return this},rotateZ:function(a){var b=this.elements,c=b[0],d=b[1],e=b[2],g=b[3],h=b[4],j=b[5],i=b[6],k=b[7],n=Math.cos(a),a=Math.sin(a);b[0]=n*c+a*h;b[1]=n*d+a*j;b[2]=n*e+a*i;b[3]=n*g+a*k;b[4]=n*h-a*c;b[5]=n*j-a*d;b[6]=n*i-a*e;b[7]=n*
k-a*g;return this},rotateByAxis:function(a,b){var c=this.elements;if(1===a.x&&0===a.y&&0===a.z)return this.rotateX(b);if(0===a.x&&1===a.y&&0===a.z)return this.rotateY(b);if(0===a.x&&0===a.y&&1===a.z)return this.rotateZ(b);var d=a.x,e=a.y,g=a.z,h=Math.sqrt(d*d+e*e+g*g),d=d/h,e=e/h,g=g/h,h=d*d,j=e*e,i=g*g,k=Math.cos(b),n=Math.sin(b),p=1-k,t=d*e*p,u=d*g*p,p=e*g*p,d=d*n,v=e*n,n=g*n,g=h+(1-h)*k,h=t+n,e=u-v,t=t-n,j=j+(1-j)*k,n=p+d,u=u+v,p=p-d,i=i+(1-i)*k,k=c[0],d=c[1],v=c[2],m=c[3],l=c[4],y=c[5],x=c[6],
A=c[7],s=c[8],C=c[9],I=c[10],D=c[11];c[0]=g*k+h*l+e*s;c[1]=g*d+h*y+e*C;c[2]=g*v+h*x+e*I;c[3]=g*m+h*A+e*D;c[4]=t*k+j*l+n*s;c[5]=t*d+j*y+n*C;c[6]=t*v+j*x+n*I;c[7]=t*m+j*A+n*D;c[8]=u*k+p*l+i*s;c[9]=u*d+p*y+i*C;c[10]=u*v+p*x+i*I;c[11]=u*m+p*A+i*D;return this},scale:function(a){var b=this.elements,c=a.x,d=a.y,a=a.z;b[0]*=c;b[4]*=d;b[8]*=a;b[1]*=c;b[5]*=d;b[9]*=a;b[2]*=c;b[6]*=d;b[10]*=a;b[3]*=c;b[7]*=d;b[11]*=a;return this},getMaxScaleOnAxis:function(){var a=this.elements;return Math.sqrt(Math.max(a[0]*
a[0]+a[1]*a[1]+a[2]*a[2],Math.max(a[4]*a[4]+a[5]*a[5]+a[6]*a[6],a[8]*a[8]+a[9]*a[9]+a[10]*a[10])))},makeTranslation:function(a,b,c){a instanceof THREE.Vector3?(c=a.z,b=a.y,a=a.x):console.warn("DEPRECATED: Use makeTranslation( Vector3 ) instead");this.set(1,0,0,a,0,1,0,b,0,0,1,c,0,0,0,1);return this},makeRotationX:function(a){var b=Math.cos(a),a=Math.sin(a);this.set(1,0,0,0,0,b,-a,0,0,a,b,0,0,0,0,1);return this},makeRotationY:function(a){var b=Math.cos(a),a=Math.sin(a);this.set(b,0,a,0,0,1,0,0,-a,
0,b,0,0,0,0,1);return this},makeRotationZ:function(a){var b=Math.cos(a),a=Math.sin(a);this.set(b,-a,0,0,a,b,0,0,0,0,1,0,0,0,0,1);return this},makeRotationAxis:function(a,b){var c=Math.cos(b),d=Math.sin(b),e=1-c,g=a.x,h=a.y,j=a.z,i=e*g,k=e*h;this.set(i*g+c,i*h-d*j,i*j+d*h,0,i*h+d*j,k*h+c,k*j-d*g,0,i*j-d*h,k*j+d*g,e*j*j+c,0,0,0,0,1);return this},makeScale:function(a,b,c){this.set(a,0,0,0,0,b,0,0,0,0,c,0,0,0,0,1);return this},makeFrustum:function(a,b,c,d,e,g){var h=this.elements;h[0]=2*e/(b-a);h[4]=
0;h[8]=(b+a)/(b-a);h[12]=0;h[1]=0;h[5]=2*e/(d-c);h[9]=(d+c)/(d-c);h[13]=0;h[2]=0;h[6]=0;h[10]=-(g+e)/(g-e);h[14]=-2*g*e/(g-e);h[3]=0;h[7]=0;h[11]=-1;h[15]=0;return this},makePerspective:function(a,b,c,d){var a=c*Math.tan(THREE.Math.degToRad(0.5*a)),e=-a;return this.makeFrustum(e*b,a*b,e,a,c,d)},makeOrthographic:function(a,b,c,d,e,g){var h=this.elements,j=b-a,i=c-d,k=g-e;h[0]=2/j;h[4]=0;h[8]=0;h[12]=-((b+a)/j);h[1]=0;h[5]=2/i;h[9]=0;h[13]=-((c+d)/i);h[2]=0;h[6]=0;h[10]=-2/k;h[14]=-((g+e)/k);h[3]=0;
h[7]=0;h[11]=0;h[15]=1;return this},clone:function(){var a=this.elements;return new THREE.Matrix4(a[0],a[4],a[8],a[12],a[1],a[5],a[9],a[13],a[2],a[6],a[10],a[14],a[3],a[7],a[11],a[15])}});THREE.Frustum=function(a,b,c,d,e,g){this.planes=[void 0!==a?a:new THREE.Plane,void 0!==b?b:new THREE.Plane,void 0!==c?c:new THREE.Plane,void 0!==d?d:new THREE.Plane,void 0!==e?e:new THREE.Plane,void 0!==g?g:new THREE.Plane]};
THREE.extend(THREE.Frustum.prototype,{set:function(a,b,c,d,e,g){var h=this.planes;h[0].copy(a);h[1].copy(b);h[2].copy(c);h[3].copy(d);h[4].copy(e);h[5].copy(g);return this},copy:function(a){for(var b=this.planes,c=0;6>c;c++)b[c].copy(a.planes[c]);return this},setFromMatrix:function(a){var b=this.planes,c=a.elements,a=c[0],d=c[1],e=c[2],g=c[3],h=c[4],j=c[5],i=c[6],k=c[7],n=c[8],p=c[9],t=c[10],u=c[11],v=c[12],m=c[13],l=c[14],c=c[15];b[0].setComponents(g-a,k-h,u-n,c-v).normalize();b[1].setComponents(g+
a,k+h,u+n,c+v).normalize();b[2].setComponents(g+d,k+j,u+p,c+m).normalize();b[3].setComponents(g-d,k-j,u-p,c-m).normalize();b[4].setComponents(g-e,k-i,u-t,c-l).normalize();b[5].setComponents(g+e,k+i,u+t,c+l).normalize();return this},intersectsObject:function(){var a=new THREE.Vector3;return function(b){var c=b.matrixWorld,d=this.planes,b=-b.geometry.boundingSphere.radius*c.getMaxScaleOnAxis();a.getPositionFromMatrix(c);for(c=0;6>c;c++)if(d[c].distanceToPoint(a)<b)return!1;return!0}}(),intersectsSphere:function(a){for(var b=
this.planes,c=a.center,a=-a.radius,d=0;6>d;d++)if(b[d].distanceToPoint(c)<a)return!1;return!0},containsPoint:function(a){for(var b=this.planes,c=0;6>c;c++)if(0>b[c].distanceToPoint(a))return!1;return!0},clone:function(){return(new THREE.Frustum).copy(this)}});THREE.Math={clamp:function(a,b,c){return a<b?b:a>c?c:a},clampBottom:function(a,b){return a<b?b:a},mapLinear:function(a,b,c,d,e){return d+(a-b)*(e-d)/(c-b)},smoothstep:function(a,b,c){if(a<=b)return 0;if(a>=c)return 1;a=(a-b)/(c-b);return a*a*(3-2*a)},smootherstep:function(a,b,c){if(a<=b)return 0;if(a>=c)return 1;a=(a-b)/(c-b);return a*a*a*(a*(6*a-15)+10)},random16:function(){return(65280*Math.random()+255*Math.random())/65535},randInt:function(a,b){return a+Math.floor(Math.random()*(b-a+1))},randFloat:function(a,
b){return a+Math.random()*(b-a)},randFloatSpread:function(a){return a*(0.5-Math.random())},sign:function(a){return 0>a?-1:0<a?1:0},degToRad:function(){var a=Math.PI/180;return function(b){return b*a}}(),radToDeg:function(){var a=180/Math.PI;return function(b){return b*a}}()};THREE.Vertex=function(a){console.warn("THREE.Vertex has been DEPRECATED. Use THREE.Vector3 instead.");return a};THREE.UV=function(a,b){console.warn("THREE.UV has been DEPRECATED. Use THREE.Vector2 instead.");return new THREE.Vector2(a,b)};THREE.Spline=function(a){function b(a,b,c,d,e,g,h){a=0.5*(c-a);d=0.5*(d-b);return(2*(b-c)+a+d)*h+(-3*(b-c)-2*a-d)*g+a*e+b}this.points=a;var c=[],d={x:0,y:0,z:0},e,g,h,j,i,k,n,p,t;this.initFromArray=function(a){this.points=[];for(var b=0;b<a.length;b++)this.points[b]={x:a[b][0],y:a[b][1],z:a[b][2]}};this.getPoint=function(a){e=(this.points.length-1)*a;g=Math.floor(e);h=e-g;c[0]=0===g?g:g-1;c[1]=g;c[2]=g>this.points.length-2?this.points.length-1:g+1;c[3]=g>this.points.length-3?this.points.length-1:
g+2;k=this.points[c[0]];n=this.points[c[1]];p=this.points[c[2]];t=this.points[c[3]];j=h*h;i=h*j;d.x=b(k.x,n.x,p.x,t.x,h,j,i);d.y=b(k.y,n.y,p.y,t.y,h,j,i);d.z=b(k.z,n.z,p.z,t.z,h,j,i);return d};this.getControlPointsArray=function(){var a,b,c=this.points.length,d=[];for(a=0;a<c;a++)b=this.points[a],d[a]=[b.x,b.y,b.z];return d};this.getLength=function(a){var b,c,d,e=b=b=0,g=new THREE.Vector3,h=new THREE.Vector3,i=[],j=0;i[0]=0;a||(a=100);c=this.points.length*a;g.copy(this.points[0]);for(a=1;a<c;a++)b=
a/c,d=this.getPoint(b),h.copy(d),j+=h.distanceTo(g),g.copy(d),b*=this.points.length-1,b=Math.floor(b),b!=e&&(i[b]=j,e=b);i[i.length]=j;return{chunks:i,total:j}};this.reparametrizeByArcLength=function(a){var b,c,d,e,g,h,i=[],j=new THREE.Vector3,n=this.getLength();i.push(j.copy(this.points[0]).clone());for(b=1;b<this.points.length;b++){c=n.chunks[b]-n.chunks[b-1];h=Math.ceil(a*c/n.total);e=(b-1)/(this.points.length-1);g=b/(this.points.length-1);for(c=1;c<h-1;c++)d=e+c*(1/h)*(g-e),d=this.getPoint(d),
i.push(j.copy(d).clone());i.push(j.copy(this.points[b]).clone())}this.points=i}};THREE.Box2=function(a,b){this.min=void 0!==a?a:new THREE.Vector2(Infinity,Infinity);this.max=void 0!==b?b:new THREE.Vector2(-Infinity,-Infinity)};
THREE.extend(THREE.Box2.prototype,{set:function(a,b){this.min.copy(a);this.max.copy(b);return this},setFromPoints:function(a){if(0<a.length){var b=a[0];this.min.copy(b);this.max.copy(b);for(var c=1,d=a.length;c<d;c++)b=a[c],b.x<this.min.x?this.min.x=b.x:b.x>this.max.x&&(this.max.x=b.x),b.y<this.min.y?this.min.y=b.y:b.y>this.max.y&&(this.max.y=b.y)}else this.makeEmpty();return this},setFromCenterAndSize:function(){var a=new THREE.Vector2;return function(b,c){var d=a.copy(c).multiplyScalar(0.5);this.min.copy(b).sub(d);
this.max.copy(b).add(d);return this}}(),copy:function(a){this.min.copy(a.min);this.max.copy(a.max);return this},makeEmpty:function(){this.min.x=this.min.y=Infinity;this.max.x=this.max.y=-Infinity;return this},empty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},center:function(a){return(a||new THREE.Vector2).addVectors(this.min,this.max).multiplyScalar(0.5)},size:function(a){return(a||new THREE.Vector2).subVectors(this.max,this.min)},expandByPoint:function(a){this.min.min(a);this.max.max(a);
return this},expandByVector:function(a){this.min.sub(a);this.max.add(a);return this},expandByScalar:function(a){this.min.addScalar(-a);this.max.addScalar(a);return this},containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y?!1:!0},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y?!0:!1},getParameter:function(a){return new THREE.Vector2((a.x-this.min.x)/(this.max.x-this.min.x),(a.y-this.min.y)/
(this.max.y-this.min.y))},isIntersectionBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>this.max.y?!1:!0},clampPoint:function(a,b){return(b||new THREE.Vector2).copy(a).clamp(this.min,this.max)},distanceToPoint:function(){var a=new THREE.Vector2;return function(b){return a.copy(b).clamp(this.min,this.max).sub(b).length()}}(),intersect:function(a){this.min.max(a.min);this.max.min(a.max);return this},union:function(a){this.min.min(a.min);this.max.max(a.max);
return this},translate:function(a){this.min.add(a);this.max.add(a);return this},equals:function(a){return a.min.equals(this.min)&&a.max.equals(this.max)},clone:function(){return(new THREE.Box2).copy(this)}});THREE.Box3=function(a,b){this.min=void 0!==a?a:new THREE.Vector3(Infinity,Infinity,Infinity);this.max=void 0!==b?b:new THREE.Vector3(-Infinity,-Infinity,-Infinity)};
THREE.extend(THREE.Box3.prototype,{set:function(a,b){this.min.copy(a);this.max.copy(b);return this},setFromPoints:function(a){if(0<a.length){var b=a[0];this.min.copy(b);this.max.copy(b);for(var c=1,d=a.length;c<d;c++)b=a[c],b.x<this.min.x?this.min.x=b.x:b.x>this.max.x&&(this.max.x=b.x),b.y<this.min.y?this.min.y=b.y:b.y>this.max.y&&(this.max.y=b.y),b.z<this.min.z?this.min.z=b.z:b.z>this.max.z&&(this.max.z=b.z)}else this.makeEmpty();return this},setFromCenterAndSize:function(){var a=new THREE.Vector3;
return function(b,c){var d=a.copy(c).multiplyScalar(0.5);this.min.copy(b).sub(d);this.max.copy(b).add(d);return this}}(),copy:function(a){this.min.copy(a.min);this.max.copy(a.max);return this},makeEmpty:function(){this.min.x=this.min.y=this.min.z=Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this},empty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},center:function(a){return(a||new THREE.Vector3).addVectors(this.min,this.max).multiplyScalar(0.5)},
size:function(a){return(a||new THREE.Vector3).subVectors(this.max,this.min)},expandByPoint:function(a){this.min.min(a);this.max.max(a);return this},expandByVector:function(a){this.min.sub(a);this.max.add(a);return this},expandByScalar:function(a){this.min.addScalar(-a);this.max.addScalar(a);return this},containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y||a.z<this.min.z||a.z>this.max.z?!1:!0},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=
this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y&&this.min.z<=a.min.z&&a.max.z<=this.max.z?!0:!1},getParameter:function(a){return new THREE.Vector3((a.x-this.min.x)/(this.max.x-this.min.x),(a.y-this.min.y)/(this.max.y-this.min.y),(a.z-this.min.z)/(this.max.z-this.min.z))},isIntersectionBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>this.max.y||a.max.z<this.min.z||a.min.z>this.max.z?!1:!0},clampPoint:function(a,b){return(b||new THREE.Vector3).copy(a).clamp(this.min,
this.max)},distanceToPoint:function(){var a=new THREE.Vector3;return function(b){return a.copy(b).clamp(this.min,this.max).sub(b).length()}}(),getBoundingSphere:function(){var a=new THREE.Vector3;return function(b){b=b||new THREE.Sphere;b.center=this.center();b.radius=0.5*this.size(a).length();return b}}(),intersect:function(a){this.min.max(a.min);this.max.min(a.max);return this},union:function(a){this.min.min(a.min);this.max.max(a.max);return this},applyMatrix4:function(){var a=[new THREE.Vector3,
new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];return function(b){a[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(b);a[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(b);a[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(b);a[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(b);a[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(b);a[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(b);a[6].set(this.max.x,
this.max.y,this.min.z).applyMatrix4(b);a[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(b);this.makeEmpty();this.setFromPoints(a);return this}}(),translate:function(a){this.min.add(a);this.max.add(a);return this},equals:function(a){return a.min.equals(this.min)&&a.max.equals(this.max)},clone:function(){return(new THREE.Box3).copy(this)}});THREE.Triangle=function(a,b,c){this.a=void 0!==a?a:new THREE.Vector3;this.b=void 0!==b?b:new THREE.Vector3;this.c=void 0!==c?c:new THREE.Vector3};THREE.Triangle.normal=function(){var a=new THREE.Vector3;return function(b,c,d,e){e=e||new THREE.Vector3;e.subVectors(d,c);a.subVectors(b,c);e.cross(a);b=e.lengthSq();return 0<b?e.multiplyScalar(1/Math.sqrt(b)):e.set(0,0,0)}}();
THREE.Triangle.barycoordFromPoint=function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(d,e,g,h,j){a.subVectors(h,e);b.subVectors(g,e);c.subVectors(d,e);var d=a.dot(a),e=a.dot(b),g=a.dot(c),i=b.dot(b),h=b.dot(c),k=d*i-e*e,j=j||new THREE.Vector3;if(0==k)return j.set(-2,-1,-1);k=1/k;i=(i*g-e*h)*k;d=(d*h-e*g)*k;return j.set(1-i-d,d,i)}}();
THREE.Triangle.containsPoint=function(){var a=new THREE.Vector3;return function(b,c,d,e){b=THREE.Triangle.barycoordFromPoint(b,c,d,e,a);return 0<=b.x&&0<=b.y&&1>=b.x+b.y}}();
THREE.extend(THREE.Triangle.prototype,{constructor:THREE.Triangle,set:function(a,b,c){this.a.copy(a);this.b.copy(b);this.c.copy(c);return this},setFromPointsAndIndices:function(a,b,c,d){this.a.copy(a[b]);this.b.copy(a[c]);this.c.copy(a[d]);return this},copy:function(a){this.a.copy(a.a);this.b.copy(a.b);this.c.copy(a.c);return this},area:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(){a.subVectors(this.c,this.b);b.subVectors(this.a,this.b);return 0.5*a.cross(b).length()}}(),
midpoint:function(a){return(a||new THREE.Vector3).addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},normal:function(a){return THREE.Triangle.normal(this.a,this.b,this.c,a)},plane:function(a){return(a||new THREE.Plane).setFromCoplanarPoints(this.a,this.b,this.c)},barycoordFromPoint:function(a,b){return THREE.Triangle.barycoordFromPoint(a,this.a,this.b,this.c,b)},containsPoint:function(a){return THREE.Triangle.containsPoint(a,this.a,this.b,this.c)},equals:function(a){return a.a.equals(this.a)&&
a.b.equals(this.b)&&a.c.equals(this.c)},clone:function(){return(new THREE.Triangle).copy(this)}});THREE.Sphere=function(a,b){this.center=void 0!==a?a:new THREE.Vector3;this.radius=void 0!==b?b:0};
THREE.extend(THREE.Sphere.prototype,{set:function(a,b){this.center.copy(a);this.radius=b;return this},setFromCenterAndPoints:function(a,b){for(var c=0,d=0,e=b.length;d<e;d++)var g=a.distanceToSquared(b[d]),c=Math.max(c,g);this.center=a;this.radius=Math.sqrt(c);return this},copy:function(a){this.center.copy(a.center);this.radius=a.radius;return this},empty:function(){return 0>=this.radius},containsPoint:function(a){return a.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(a){return a.distanceTo(this.center)-
this.radius},intersectsSphere:function(a){var b=this.radius+a.radius;return a.center.distanceToSquared(this.center)<=b*b},clampPoint:function(a,b){var c=this.center.distanceToSquared(a),d=b||new THREE.Vector3;d.copy(a);c>this.radius*this.radius&&(d.sub(this.center).normalize(),d.multiplyScalar(this.radius).add(this.center));return d},getBoundingBox:function(a){a=a||new THREE.Box3;a.set(this.center,this.center);a.expandByScalar(this.radius);return a},applyMatrix4:function(a){this.center.applyMatrix4(a);
this.radius*=a.getMaxScaleOnAxis();return this},translate:function(a){this.center.add(a);return this},equals:function(a){return a.center.equals(this.center)&&a.radius===this.radius},clone:function(){return(new THREE.Sphere).copy(this)}});THREE.Plane=function(a,b){this.normal=void 0!==a?a:new THREE.Vector3(1,0,0);this.constant=void 0!==b?b:0};
THREE.extend(THREE.Plane.prototype,{set:function(a,b){this.normal.copy(a);this.constant=b;return this},setComponents:function(a,b,c,d){this.normal.set(a,b,c);this.constant=d;return this},setFromNormalAndCoplanarPoint:function(a,b){this.normal.copy(a);this.constant=-b.dot(this.normal);return this},setFromCoplanarPoints:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c,d,e){d=a.subVectors(e,d).cross(b.subVectors(c,d)).normalize();this.setFromNormalAndCoplanarPoint(d,c);return this}}(),
copy:function(a){this.normal.copy(a.normal);this.constant=a.constant;return this},normalize:function(){var a=1/this.normal.length();this.normal.multiplyScalar(a);this.constant*=a;return this},negate:function(){this.constant*=-1;this.normal.negate();return this},distanceToPoint:function(a){return this.normal.dot(a)+this.constant},distanceToSphere:function(a){return this.distanceToPoint(a.center)-a.radius},projectPoint:function(a,b){return this.orthoPoint(a,b).sub(a).negate()},orthoPoint:function(a,
b){var c=this.distanceToPoint(a);return(b||new THREE.Vector3).copy(this.normal).multiplyScalar(c)},isIntersectionLine:function(a){var b=this.distanceToPoint(a.start),a=this.distanceToPoint(a.end);return 0>b&&0<a||0>a&&0<b},intersectLine:function(){var a=new THREE.Vector3;return function(b,c){var d=c||new THREE.Vector3,e=b.delta(a),g=this.normal.dot(e);if(0==g){if(0==this.distanceToPoint(b.start))return d.copy(b.start)}else return g=-(b.start.dot(this.normal)+this.constant)/g,0>g||1<g?void 0:d.copy(e).multiplyScalar(g).add(b.start)}}(),
coplanarPoint:function(a){return(a||new THREE.Vector3).copy(this.normal).multiplyScalar(-this.constant)},applyMatrix4:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c,d){var d=d||(new THREE.Matrix3).getInverse(c).transpose(),e=a.copy(this.normal).applyMatrix3(d),g=this.coplanarPoint(b);g.applyMatrix4(c);this.setFromNormalAndCoplanarPoint(e,g);return this}}(),translate:function(a){this.constant-=a.dot(this.normal);return this},equals:function(a){return a.normal.equals(this.normal)&&
a.constant==this.constant},clone:function(){return(new THREE.Plane).copy(this)}});THREE.Clock=function(a){this.autoStart=void 0!==a?a:!0;this.elapsedTime=this.oldTime=this.startTime=0;this.running=!1};
THREE.extend(THREE.Clock.prototype,{start:function(){this.oldTime=this.startTime=void 0!==window.performance&&void 0!==window.performance.now?window.performance.now():Date.now();this.running=!0},stop:function(){this.getElapsedTime();this.running=!1},getElapsedTime:function(){this.getDelta();return this.elapsedTime},getDelta:function(){var a=0;this.autoStart&&!this.running&&this.start();if(this.running){var b=void 0!==window.performance&&void 0!==window.performance.now?window.performance.now():Date.now(),
a=0.001*(b-this.oldTime);this.oldTime=b;this.elapsedTime+=a}return a}});THREE.EventDispatcher=function(){var a={};this.addEventListener=function(b,c){void 0===a[b]&&(a[b]=[]);-1===a[b].indexOf(c)&&a[b].push(c)};this.removeEventListener=function(b,c){var d=a[b].indexOf(c);-1!==d&&a[b].splice(d,1)};this.dispatchEvent=function(b){var c=a[b.type];if(void 0!==c){b.target=this;for(var d=0,e=c.length;d<e;d++)c[d].call(this,b)}}};(function(a){a.Raycaster=function(b,c,d,e){this.ray=new a.Ray(b,c);0<this.ray.direction.lengthSq()&&this.ray.direction.normalize();this.near=d||0;this.far=e||Infinity};var b=new a.Sphere,c=new a.Ray,d=new a.Plane,e=new a.Vector3,g=new a.Vector3,h=new a.Matrix4,j=function(a,b){return a.distance-b.distance},i=function(i,j,k){if(i instanceof a.Particle){g.getPositionFromMatrix(i.matrixWorld);j=j.ray.distanceToPoint(g);if(j>i.scale.x)return k;k.push({distance:j,point:i.position,face:null,object:i})}else if(i instanceof
a.Mesh){g.getPositionFromMatrix(i.matrixWorld);b.set(g,i.geometry.boundingSphere.radius*i.matrixWorld.getMaxScaleOnAxis());if(!j.ray.isIntersectionSphere(b))return k;var u=i.geometry,v=u.vertices,m=i.material instanceof a.MeshFaceMaterial,l=!0===m?i.material.materials:null,y=i.material.side,x,A,s,C=j.precision;i.matrixRotationWorld.extractRotation(i.matrixWorld);h.getInverse(i.matrixWorld);c.copy(j.ray).applyMatrix4(h);for(var I=0,D=u.faces.length;I<D;I++){var w=u.faces[I],y=!0===m?l[w.materialIndex]:
i.material;if(void 0!==y){d.setFromNormalAndCoplanarPoint(w.normal,v[w.a]);var P=c.distanceToPlane(d);if(!(Math.abs(P)<C)&&!(0>P)){y=y.side;if(y!==a.DoubleSide&&(x=c.direction.dot(d.normal),!(y===a.FrontSide?0>x:0<x)))continue;if(!(P<j.near||P>j.far)){e=c.at(P,e);if(w instanceof a.Face3){if(y=v[w.a],x=v[w.b],A=v[w.c],!a.Triangle.containsPoint(e,y,x,A))continue}else if(w instanceof a.Face4){if(y=v[w.a],x=v[w.b],A=v[w.c],s=v[w.d],!a.Triangle.containsPoint(e,y,x,s)&&!a.Triangle.containsPoint(e,x,A,s))continue}else throw Error("face type not supported");
k.push({distance:P,point:j.ray.at(P),face:w,faceIndex:I,object:i})}}}}}},k=function(a,b,c){for(var a=a.getDescendants(),d=0,e=a.length;d<e;d++)i(a[d],b,c)};a.Raycaster.prototype.precision=1E-4;a.Raycaster.prototype.set=function(a,b){this.ray.set(a,b);0<this.ray.direction.length()&&this.ray.direction.normalize()};a.Raycaster.prototype.intersectObject=function(a,b){var c=[];!0===b&&k(a,this,c);i(a,this,c);c.sort(j);return c};a.Raycaster.prototype.intersectObjects=function(a,b){for(var c=[],d=0,e=a.length;d<
e;d++)i(a[d],this,c),!0===b&&k(a[d],this,c);c.sort(j);return c}})(THREE);THREE.Object3D=function(){this.id=THREE.Object3DIdCount++;this.name="";this.properties={};this.parent=void 0;this.children=[];this.up=new THREE.Vector3(0,1,0);this.position=new THREE.Vector3;this.rotation=new THREE.Vector3;this.eulerOrder=THREE.Object3D.defaultEulerOrder;this.scale=new THREE.Vector3(1,1,1);this.renderDepth=null;this.rotationAutoUpdate=!0;this.matrix=new THREE.Matrix4;this.matrixWorld=new THREE.Matrix4;this.matrixRotationWorld=new THREE.Matrix4;this.matrixWorldNeedsUpdate=this.matrixAutoUpdate=
!0;this.quaternion=new THREE.Quaternion;this.useQuaternion=!1;this.visible=!0;this.receiveShadow=this.castShadow=!1;this.frustumCulled=!0;this._vector=new THREE.Vector3};
THREE.Object3D.prototype={constructor:THREE.Object3D,applyMatrix:function(a){this.matrix.multiplyMatrices(a,this.matrix);this.scale.getScaleFromMatrix(this.matrix);a=(new THREE.Matrix4).extractRotation(this.matrix);this.rotation.setEulerFromRotationMatrix(a,this.eulerOrder);this.position.getPositionFromMatrix(this.matrix)},translate:function(a,b){this.matrix.rotateAxis(b);this.position.add(b.multiplyScalar(a))},translateX:function(a){this.translate(a,this._vector.set(1,0,0))},translateY:function(a){this.translate(a,
this._vector.set(0,1,0))},translateZ:function(a){this.translate(a,this._vector.set(0,0,1))},localToWorld:function(a){return a.applyMatrix4(this.matrixWorld)},worldToLocal:function(a){return a.applyMatrix4(THREE.Object3D.__m1.getInverse(this.matrixWorld))},lookAt:function(a){this.matrix.lookAt(a,this.position,this.up);this.rotationAutoUpdate&&(!1===this.useQuaternion?this.rotation.setEulerFromRotationMatrix(this.matrix,this.eulerOrder):this.quaternion.copy(this.matrix.decompose()[1]))},add:function(a){if(a===
this)console.warn("THREE.Object3D.add: An object can't be added as a child of itself.");else if(a instanceof THREE.Object3D){void 0!==a.parent&&a.parent.remove(a);a.parent=this;this.children.push(a);for(var b=this;void 0!==b.parent;)b=b.parent;void 0!==b&&b instanceof THREE.Scene&&b.__addObject(a)}},remove:function(a){var b=this.children.indexOf(a);if(-1!==b){a.parent=void 0;this.children.splice(b,1);for(b=this;void 0!==b.parent;)b=b.parent;void 0!==b&&b instanceof THREE.Scene&&b.__removeObject(a)}},
traverse:function(a){a(this);for(var b=0,c=this.children.length;b<c;b++)this.children[b].traverse(a)},getChildByName:function(a,b){for(var c=0,d=this.children.length;c<d;c++){var e=this.children[c];if(e.name===a||!0===b&&(e=e.getChildByName(a,b),void 0!==e))return e}},getDescendants:function(a){void 0===a&&(a=[]);Array.prototype.push.apply(a,this.children);for(var b=0,c=this.children.length;b<c;b++)this.children[b].getDescendants(a);return a},updateMatrix:function(){this.matrix.setPosition(this.position);
!1===this.useQuaternion?this.matrix.setRotationFromEuler(this.rotation,this.eulerOrder):this.matrix.setRotationFromQuaternion(this.quaternion);(1!==this.scale.x||1!==this.scale.y||1!==this.scale.z)&&this.matrix.scale(this.scale);this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(a){!0===this.matrixAutoUpdate&&this.updateMatrix();if(!0===this.matrixWorldNeedsUpdate||!0===a)void 0===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),
this.matrixWorldNeedsUpdate=!1,a=!0;for(var b=0,c=this.children.length;b<c;b++)this.children[b].updateMatrixWorld(a)},clone:function(a){void 0===a&&(a=new THREE.Object3D);a.name=this.name;a.up.copy(this.up);a.position.copy(this.position);a.rotation instanceof THREE.Vector3&&a.rotation.copy(this.rotation);a.eulerOrder=this.eulerOrder;a.scale.copy(this.scale);a.renderDepth=this.renderDepth;a.rotationAutoUpdate=this.rotationAutoUpdate;a.matrix.copy(this.matrix);a.matrixWorld.copy(this.matrixWorld);a.matrixRotationWorld.copy(this.matrixRotationWorld);
a.matrixAutoUpdate=this.matrixAutoUpdate;a.matrixWorldNeedsUpdate=this.matrixWorldNeedsUpdate;a.quaternion.copy(this.quaternion);a.useQuaternion=this.useQuaternion;a.visible=this.visible;a.castShadow=this.castShadow;a.receiveShadow=this.receiveShadow;a.frustumCulled=this.frustumCulled;for(var b=0;b<this.children.length;b++)a.add(this.children[b].clone());return a}};THREE.Object3D.__m1=new THREE.Matrix4;THREE.Object3D.defaultEulerOrder="XYZ";THREE.Object3DIdCount=0;THREE.Projector=function(){function a(){if(g===j){var a=new THREE.RenderableObject;h.push(a);j++;g++;return a}return h[g++]}function b(){if(k===p){var a=new THREE.RenderableVertex;n.push(a);p++;k++;return a}return n[k++]}function c(a,b){return b.z-a.z}function d(a,b){var c=0,d=1,e=a.z+a.w,g=b.z+b.w,h=-a.z+a.w,i=-b.z+b.w;if(0<=e&&0<=g&&0<=h&&0<=i)return!0;if(0>e&&0>g||0>h&&0>i)return!1;0>e?c=Math.max(c,e/(e-g)):0>g&&(d=Math.min(d,e/(e-g)));0>h?c=Math.max(c,h/(h-i)):0>i&&(d=Math.min(d,h/(h-i)));if(d<
c)return!1;a.lerp(b,c);b.lerp(a,1-d);return!0}var e,g,h=[],j=0,i,k,n=[],p=0,t,u,v=[],m=0,l,y=[],x=0,A,s,C=[],I=0,D,w,P=[],N=0,F={objects:[],sprites:[],lights:[],elements:[]},X=new THREE.Vector3,B=new THREE.Vector4,W=new THREE.Box3(new THREE.Vector3(-1,-1,-1),new THREE.Vector3(1,1,1)),E=new THREE.Box3,Q=Array(3),R=Array(4),ya=new THREE.Matrix4,fa=new THREE.Matrix4,Da,Wa=new THREE.Matrix4,cb=new THREE.Matrix3,db=new THREE.Matrix3,vb=new THREE.Vector3,Fa=new THREE.Frustum,Va=new THREE.Vector4,M=new THREE.Vector4;
this.projectVector=function(a,b){b.matrixWorldInverse.getInverse(b.matrixWorld);fa.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse);return a.applyProjection(fa)};this.unprojectVector=function(a,b){b.projectionMatrixInverse.getInverse(b.projectionMatrix);fa.multiplyMatrices(b.matrixWorld,b.projectionMatrixInverse);return a.applyProjection(fa)};this.pickingRay=function(a,b){a.z=-1;var c=new THREE.Vector3(a.x,a.y,1);this.unprojectVector(a,b);this.unprojectVector(c,b);c.sub(a).normalize();return new THREE.Raycaster(a,
c)};this.projectScene=function(h,j,p,ec){var pa=!1,ha,qa,bb,Z,ga,za,ia,ba,Ra,lb,ja,mb,nb;w=s=l=u=0;F.elements.length=0;h.updateMatrixWorld();void 0===j.parent&&j.updateMatrixWorld();ya.copy(j.matrixWorldInverse.getInverse(j.matrixWorld));fa.multiplyMatrices(j.projectionMatrix,ya);db.getInverse(ya);db.transpose();Fa.setFromMatrix(fa);g=0;F.objects.length=0;F.sprites.length=0;F.lights.length=0;var ob=function(b){for(var c=0,d=b.children.length;c<d;c++){var g=b.children[c];if(!1!==g.visible){if(g instanceof
THREE.Light)F.lights.push(g);else if(g instanceof THREE.Mesh||g instanceof THREE.Line){if(!1===g.frustumCulled||!0===Fa.intersectsObject(g))e=a(),e.object=g,null!==g.renderDepth?e.z=g.renderDepth:(X.getPositionFromMatrix(g.matrixWorld),X.applyProjection(fa),e.z=X.z),F.objects.push(e)}else g instanceof THREE.Sprite||g instanceof THREE.Particle?(e=a(),e.object=g,null!==g.renderDepth?e.z=g.renderDepth:(X.getPositionFromMatrix(g.matrixWorld),X.applyProjection(fa),e.z=X.z),F.sprites.push(e)):(e=a(),e.object=
g,null!==g.renderDepth?e.z=g.renderDepth:(X.getPositionFromMatrix(g.matrixWorld),X.applyProjection(fa),e.z=X.z),F.objects.push(e));ob(g)}}};ob(h);!0===p&&F.objects.sort(c);h=0;for(p=F.objects.length;h<p;h++)if(ba=F.objects[h].object,Da=ba.matrixWorld,k=0,ba instanceof THREE.Mesh){Ra=ba.geometry;bb=Ra.vertices;lb=Ra.faces;Ra=Ra.faceVertexUvs;cb.getInverse(Da);cb.transpose();mb=ba.material instanceof THREE.MeshFaceMaterial;nb=!0===mb?ba.material:null;ha=0;for(qa=bb.length;ha<qa;ha++)i=b(),i.positionWorld.copy(bb[ha]).applyMatrix4(Da),
i.positionScreen.copy(i.positionWorld).applyMatrix4(fa),i.positionScreen.x/=i.positionScreen.w,i.positionScreen.y/=i.positionScreen.w,i.positionScreen.z/=i.positionScreen.w,i.visible=!(-1>i.positionScreen.x||1<i.positionScreen.x||-1>i.positionScreen.y||1<i.positionScreen.y||-1>i.positionScreen.z||1<i.positionScreen.z);bb=0;for(ha=lb.length;bb<ha;bb++){qa=lb[bb];var wb=!0===mb?nb.materials[qa.materialIndex]:ba.material;if(void 0!==wb){za=wb.side;if(qa instanceof THREE.Face3)if(Z=n[qa.a],ga=n[qa.b],
ia=n[qa.c],Q[0]=Z.positionScreen,Q[1]=ga.positionScreen,Q[2]=ia.positionScreen,!0===Z.visible||!0===ga.visible||!0===ia.visible||W.isIntersectionBox(E.setFromPoints(Q)))if(pa=0>(ia.positionScreen.x-Z.positionScreen.x)*(ga.positionScreen.y-Z.positionScreen.y)-(ia.positionScreen.y-Z.positionScreen.y)*(ga.positionScreen.x-Z.positionScreen.x),za===THREE.DoubleSide||pa===(za===THREE.FrontSide))u===m?(ja=new THREE.RenderableFace3,v.push(ja),m++,u++,t=ja):t=v[u++],t.v1.copy(Z),t.v2.copy(ga),t.v3.copy(ia);
else continue;else continue;else if(qa instanceof THREE.Face4)if(Z=n[qa.a],ga=n[qa.b],ia=n[qa.c],ja=n[qa.d],R[0]=Z.positionScreen,R[1]=ga.positionScreen,R[2]=ia.positionScreen,R[3]=ja.positionScreen,!0===Z.visible||!0===ga.visible||!0===ia.visible||!0===ja.visible||W.isIntersectionBox(E.setFromPoints(R)))if(pa=0>(ja.positionScreen.x-Z.positionScreen.x)*(ga.positionScreen.y-Z.positionScreen.y)-(ja.positionScreen.y-Z.positionScreen.y)*(ga.positionScreen.x-Z.positionScreen.x)||0>(ga.positionScreen.x-
ia.positionScreen.x)*(ja.positionScreen.y-ia.positionScreen.y)-(ga.positionScreen.y-ia.positionScreen.y)*(ja.positionScreen.x-ia.positionScreen.x),za===THREE.DoubleSide||pa===(za===THREE.FrontSide)){if(l===x){var pb=new THREE.RenderableFace4;y.push(pb);x++;l++;t=pb}else t=y[l++];t.v1.copy(Z);t.v2.copy(ga);t.v3.copy(ia);t.v4.copy(ja)}else continue;else continue;t.normalModel.copy(qa.normal);!1===pa&&(za===THREE.BackSide||za===THREE.DoubleSide)&&t.normalModel.negate();t.normalModel.applyMatrix3(cb).normalize();
t.normalModelView.copy(t.normalModel).applyMatrix3(db);t.centroidModel.copy(qa.centroid).applyMatrix4(Da);ia=qa.vertexNormals;Z=0;for(ga=ia.length;Z<ga;Z++)ja=t.vertexNormalsModel[Z],ja.copy(ia[Z]),!1===pa&&(za===THREE.BackSide||za===THREE.DoubleSide)&&ja.negate(),ja.applyMatrix3(cb).normalize(),t.vertexNormalsModelView[Z].copy(ja).applyMatrix3(db);t.vertexNormalsLength=ia.length;Z=0;for(ga=Ra.length;Z<ga;Z++)if(ja=Ra[Z][bb],void 0!==ja){za=0;for(ia=ja.length;za<ia;za++)t.uvs[Z][za]=ja[za]}t.color=
qa.color;t.material=wb;vb.copy(t.centroidModel).applyProjection(fa);t.z=vb.z;F.elements.push(t)}}}else if(ba instanceof THREE.Line){Wa.multiplyMatrices(fa,Da);bb=ba.geometry.vertices;Z=b();Z.positionScreen.copy(bb[0]).applyMatrix4(Wa);lb=ba.type===THREE.LinePieces?2:1;ha=1;for(qa=bb.length;ha<qa;ha++)Z=b(),Z.positionScreen.copy(bb[ha]).applyMatrix4(Wa),0<(ha+1)%lb||(ga=n[k-2],Va.copy(Z.positionScreen),M.copy(ga.positionScreen),!0===d(Va,M)&&(Va.multiplyScalar(1/Va.w),M.multiplyScalar(1/M.w),s===I?
(Ra=new THREE.RenderableLine,C.push(Ra),I++,s++,A=Ra):A=C[s++],A.v1.positionScreen.copy(Va),A.v2.positionScreen.copy(M),A.z=Math.max(Va.z,M.z),A.material=ba.material,F.elements.push(A)))}h=0;for(p=F.sprites.length;h<p;h++)ba=F.sprites[h].object,Da=ba.matrixWorld,ba instanceof THREE.Particle&&(B.set(Da.elements[12],Da.elements[13],Da.elements[14],1),B.applyMatrix4(fa),B.z/=B.w,0<B.z&&1>B.z&&(w===N?(pa=new THREE.RenderableParticle,P.push(pa),N++,w++,D=pa):D=P[w++],D.object=ba,D.x=B.x/B.w,D.y=B.y/B.w,
D.z=B.z,D.rotation=ba.rotation.z,D.scale.x=ba.scale.x*Math.abs(D.x-(B.x+j.projectionMatrix.elements[0])/(B.w+j.projectionMatrix.elements[12])),D.scale.y=ba.scale.y*Math.abs(D.y-(B.y+j.projectionMatrix.elements[5])/(B.w+j.projectionMatrix.elements[13])),D.material=ba.material,F.elements.push(D)));!0===ec&&F.elements.sort(c);return F}};THREE.Face3=function(a,b,c,d,e,g){this.a=a;this.b=b;this.c=c;this.normal=d instanceof THREE.Vector3?d:new THREE.Vector3;this.vertexNormals=d instanceof Array?d:[];this.color=e instanceof THREE.Color?e:new THREE.Color;this.vertexColors=e instanceof Array?e:[];this.vertexTangents=[];this.materialIndex=void 0!==g?g:0;this.centroid=new THREE.Vector3};
THREE.Face3.prototype={constructor:THREE.Face3,clone:function(){var a=new THREE.Face3(this.a,this.b,this.c);a.normal.copy(this.normal);a.color.copy(this.color);a.centroid.copy(this.centroid);a.materialIndex=this.materialIndex;var b,c;b=0;for(c=this.vertexNormals.length;b<c;b++)a.vertexNormals[b]=this.vertexNormals[b].clone();b=0;for(c=this.vertexColors.length;b<c;b++)a.vertexColors[b]=this.vertexColors[b].clone();b=0;for(c=this.vertexTangents.length;b<c;b++)a.vertexTangents[b]=this.vertexTangents[b].clone();
return a}};THREE.Face4=function(a,b,c,d,e,g,h){this.a=a;this.b=b;this.c=c;this.d=d;this.normal=e instanceof THREE.Vector3?e:new THREE.Vector3;this.vertexNormals=e instanceof Array?e:[];this.color=g instanceof THREE.Color?g:new THREE.Color;this.vertexColors=g instanceof Array?g:[];this.vertexTangents=[];this.materialIndex=void 0!==h?h:0;this.centroid=new THREE.Vector3};
THREE.Face4.prototype={constructor:THREE.Face4,clone:function(){var a=new THREE.Face4(this.a,this.b,this.c,this.d);a.normal.copy(this.normal);a.color.copy(this.color);a.centroid.copy(this.centroid);a.materialIndex=this.materialIndex;var b,c;b=0;for(c=this.vertexNormals.length;b<c;b++)a.vertexNormals[b]=this.vertexNormals[b].clone();b=0;for(c=this.vertexColors.length;b<c;b++)a.vertexColors[b]=this.vertexColors[b].clone();b=0;for(c=this.vertexTangents.length;b<c;b++)a.vertexTangents[b]=this.vertexTangents[b].clone();
return a}};THREE.Geometry=function(){THREE.EventDispatcher.call(this);this.id=THREE.GeometryIdCount++;this.name="";this.vertices=[];this.colors=[];this.normals=[];this.faces=[];this.faceUvs=[[]];this.faceVertexUvs=[[]];this.morphTargets=[];this.morphColors=[];this.morphNormals=[];this.skinWeights=[];this.skinIndices=[];this.lineDistances=[];this.boundingSphere=this.boundingBox=null;this.hasTangents=!1;this.dynamic=!0;this.buffersNeedUpdate=this.lineDistancesNeedUpdate=this.colorsNeedUpdate=this.tangentsNeedUpdate=
this.normalsNeedUpdate=this.uvsNeedUpdate=this.elementsNeedUpdate=this.verticesNeedUpdate=!1};
THREE.Geometry.prototype={constructor:THREE.Geometry,applyMatrix:function(a){for(var b=(new THREE.Matrix3).getInverse(a).transpose(),c=0,d=this.vertices.length;c<d;c++)this.vertices[c].applyMatrix4(a);c=0;for(d=this.faces.length;c<d;c++){var e=this.faces[c];e.normal.applyMatrix3(b).normalize();for(var g=0,h=e.vertexNormals.length;g<h;g++)e.vertexNormals[g].applyMatrix3(b).normalize();e.centroid.applyMatrix4(a)}},computeCentroids:function(){var a,b,c;a=0;for(b=this.faces.length;a<b;a++)c=this.faces[a],
c.centroid.set(0,0,0),c instanceof THREE.Face3?(c.centroid.add(this.vertices[c.a]),c.centroid.add(this.vertices[c.b]),c.centroid.add(this.vertices[c.c]),c.centroid.divideScalar(3)):c instanceof THREE.Face4&&(c.centroid.add(this.vertices[c.a]),c.centroid.add(this.vertices[c.b]),c.centroid.add(this.vertices[c.c]),c.centroid.add(this.vertices[c.d]),c.centroid.divideScalar(4))},computeFaceNormals:function(){for(var a=new THREE.Vector3,b=new THREE.Vector3,c=0,d=this.faces.length;c<d;c++){var e=this.faces[c],
g=this.vertices[e.a],h=this.vertices[e.b];a.subVectors(this.vertices[e.c],h);b.subVectors(g,h);a.cross(b);a.normalize();e.normal.copy(a)}},computeVertexNormals:function(a){var b,c,d,e;if(void 0===this.__tmpVertices){e=this.__tmpVertices=Array(this.vertices.length);b=0;for(c=this.vertices.length;b<c;b++)e[b]=new THREE.Vector3;b=0;for(c=this.faces.length;b<c;b++)d=this.faces[b],d instanceof THREE.Face3?d.vertexNormals=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3]:d instanceof THREE.Face4&&
(d.vertexNormals=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3])}else{e=this.__tmpVertices;b=0;for(c=this.vertices.length;b<c;b++)e[b].set(0,0,0)}if(a){var g,h,j,i=new THREE.Vector3,k=new THREE.Vector3,n=new THREE.Vector3,p=new THREE.Vector3,t=new THREE.Vector3;b=0;for(c=this.faces.length;b<c;b++)d=this.faces[b],d instanceof THREE.Face3?(a=this.vertices[d.a],g=this.vertices[d.b],h=this.vertices[d.c],i.subVectors(h,g),k.subVectors(a,g),i.cross(k),e[d.a].add(i),e[d.b].add(i),
e[d.c].add(i)):d instanceof THREE.Face4&&(a=this.vertices[d.a],g=this.vertices[d.b],h=this.vertices[d.c],j=this.vertices[d.d],n.subVectors(j,g),k.subVectors(a,g),n.cross(k),e[d.a].add(n),e[d.b].add(n),e[d.d].add(n),p.subVectors(j,h),t.subVectors(g,h),p.cross(t),e[d.b].add(p),e[d.c].add(p),e[d.d].add(p))}else{b=0;for(c=this.faces.length;b<c;b++)d=this.faces[b],d instanceof THREE.Face3?(e[d.a].add(d.normal),e[d.b].add(d.normal),e[d.c].add(d.normal)):d instanceof THREE.Face4&&(e[d.a].add(d.normal),e[d.b].add(d.normal),
e[d.c].add(d.normal),e[d.d].add(d.normal))}b=0;for(c=this.vertices.length;b<c;b++)e[b].normalize();b=0;for(c=this.faces.length;b<c;b++)d=this.faces[b],d instanceof THREE.Face3?(d.vertexNormals[0].copy(e[d.a]),d.vertexNormals[1].copy(e[d.b]),d.vertexNormals[2].copy(e[d.c])):d instanceof THREE.Face4&&(d.vertexNormals[0].copy(e[d.a]),d.vertexNormals[1].copy(e[d.b]),d.vertexNormals[2].copy(e[d.c]),d.vertexNormals[3].copy(e[d.d]))},computeMorphNormals:function(){var a,b,c,d,e;c=0;for(d=this.faces.length;c<
d;c++){e=this.faces[c];e.__originalFaceNormal?e.__originalFaceNormal.copy(e.normal):e.__originalFaceNormal=e.normal.clone();e.__originalVertexNormals||(e.__originalVertexNormals=[]);a=0;for(b=e.vertexNormals.length;a<b;a++)e.__originalVertexNormals[a]?e.__originalVertexNormals[a].copy(e.vertexNormals[a]):e.__originalVertexNormals[a]=e.vertexNormals[a].clone()}var g=new THREE.Geometry;g.faces=this.faces;a=0;for(b=this.morphTargets.length;a<b;a++){if(!this.morphNormals[a]){this.morphNormals[a]={};this.morphNormals[a].faceNormals=
[];this.morphNormals[a].vertexNormals=[];var h=this.morphNormals[a].faceNormals,j=this.morphNormals[a].vertexNormals,i,k;c=0;for(d=this.faces.length;c<d;c++)e=this.faces[c],i=new THREE.Vector3,k=e instanceof THREE.Face3?{a:new THREE.Vector3,b:new THREE.Vector3,c:new THREE.Vector3}:{a:new THREE.Vector3,b:new THREE.Vector3,c:new THREE.Vector3,d:new THREE.Vector3},h.push(i),j.push(k)}h=this.morphNormals[a];g.vertices=this.morphTargets[a].vertices;g.computeFaceNormals();g.computeVertexNormals();c=0;for(d=
this.faces.length;c<d;c++)e=this.faces[c],i=h.faceNormals[c],k=h.vertexNormals[c],i.copy(e.normal),e instanceof THREE.Face3?(k.a.copy(e.vertexNormals[0]),k.b.copy(e.vertexNormals[1]),k.c.copy(e.vertexNormals[2])):(k.a.copy(e.vertexNormals[0]),k.b.copy(e.vertexNormals[1]),k.c.copy(e.vertexNormals[2]),k.d.copy(e.vertexNormals[3]))}c=0;for(d=this.faces.length;c<d;c++)e=this.faces[c],e.normal=e.__originalFaceNormal,e.vertexNormals=e.__originalVertexNormals},computeTangents:function(){function a(a,b,c,
d,e,g,w){j=a.vertices[b];i=a.vertices[c];k=a.vertices[d];n=h[e];p=h[g];t=h[w];u=i.x-j.x;v=k.x-j.x;m=i.y-j.y;l=k.y-j.y;y=i.z-j.z;x=k.z-j.z;A=p.x-n.x;s=t.x-n.x;C=p.y-n.y;I=t.y-n.y;D=1/(A*I-s*C);F.set((I*u-C*v)*D,(I*m-C*l)*D,(I*y-C*x)*D);X.set((A*v-s*u)*D,(A*l-s*m)*D,(A*x-s*y)*D);P[b].add(F);P[c].add(F);P[d].add(F);N[b].add(X);N[c].add(X);N[d].add(X)}var b,c,d,e,g,h,j,i,k,n,p,t,u,v,m,l,y,x,A,s,C,I,D,w,P=[],N=[],F=new THREE.Vector3,X=new THREE.Vector3,B=new THREE.Vector3,W=new THREE.Vector3,E=new THREE.Vector3;
b=0;for(c=this.vertices.length;b<c;b++)P[b]=new THREE.Vector3,N[b]=new THREE.Vector3;b=0;for(c=this.faces.length;b<c;b++)g=this.faces[b],h=this.faceVertexUvs[0][b],g instanceof THREE.Face3?a(this,g.a,g.b,g.c,0,1,2):g instanceof THREE.Face4&&(a(this,g.a,g.b,g.d,0,1,3),a(this,g.b,g.c,g.d,1,2,3));var Q=["a","b","c","d"];b=0;for(c=this.faces.length;b<c;b++){g=this.faces[b];for(d=0;d<g.vertexNormals.length;d++)E.copy(g.vertexNormals[d]),e=g[Q[d]],w=P[e],B.copy(w),B.sub(E.multiplyScalar(E.dot(w))).normalize(),
W.crossVectors(g.vertexNormals[d],w),e=W.dot(N[e]),e=0>e?-1:1,g.vertexTangents[d]=new THREE.Vector4(B.x,B.y,B.z,e)}this.hasTangents=!0},computeLineDistances:function(){for(var a=0,b=this.vertices,c=0,d=b.length;c<d;c++)0<c&&(a+=b[c].distanceTo(b[c-1])),this.lineDistances[c]=a},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new THREE.Sphere);
this.boundingSphere.setFromCenterAndPoints(this.boundingSphere.center,this.vertices)},mergeVertices:function(){var a={},b=[],c=[],d,e=Math.pow(10,4),g,h,j,i,k;this.__tmpVertices=void 0;g=0;for(h=this.vertices.length;g<h;g++)d=this.vertices[g],d=[Math.round(d.x*e),Math.round(d.y*e),Math.round(d.z*e)].join("_"),void 0===a[d]?(a[d]=g,b.push(this.vertices[g]),c[g]=b.length-1):c[g]=c[a[d]];e=[];g=0;for(h=this.faces.length;g<h;g++)if(a=this.faces[g],a instanceof THREE.Face3){a.a=c[a.a];a.b=c[a.b];a.c=c[a.c];
j=[a.a,a.b,a.c];d=-1;for(i=0;3>i;i++)if(j[i]==j[(i+1)%3]){e.push(g);break}}else if(a instanceof THREE.Face4){a.a=c[a.a];a.b=c[a.b];a.c=c[a.c];a.d=c[a.d];j=[a.a,a.b,a.c,a.d];d=-1;for(i=0;4>i;i++)j[i]==j[(i+1)%4]&&(0<=d&&e.push(g),d=i);if(0<=d){j.splice(d,1);var n=new THREE.Face3(j[0],j[1],j[2],a.normal,a.color,a.materialIndex);j=0;for(i=this.faceVertexUvs.length;j<i;j++)(k=this.faceVertexUvs[j][g])&&k.splice(d,1);a.vertexNormals&&0<a.vertexNormals.length&&(n.vertexNormals=a.vertexNormals,n.vertexNormals.splice(d,
1));a.vertexColors&&0<a.vertexColors.length&&(n.vertexColors=a.vertexColors,n.vertexColors.splice(d,1));this.faces[g]=n}}for(g=e.length-1;0<=g;g--){this.faces.splice(g,1);j=0;for(i=this.faceVertexUvs.length;j<i;j++)this.faceVertexUvs[j].splice(g,1)}c=this.vertices.length-b.length;this.vertices=b;return c},clone:function(){for(var a=new THREE.Geometry,b=this.vertices,c=0,d=b.length;c<d;c++)a.vertices.push(b[c].clone());b=this.faces;c=0;for(d=b.length;c<d;c++)a.faces.push(b[c].clone());b=this.faceVertexUvs[0];
c=0;for(d=b.length;c<d;c++){for(var e=b[c],g=[],h=0,j=e.length;h<j;h++)g.push(new THREE.Vector2(e[h].x,e[h].y));a.faceVertexUvs[0].push(g)}return a},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.GeometryIdCount=0;THREE.BufferGeometry=function(){THREE.EventDispatcher.call(this);this.id=THREE.GeometryIdCount++;this.attributes={};this.dynamic=!1;this.offsets=[];this.boundingSphere=this.boundingBox=null;this.hasTangents=!1;this.morphTargets=[]};
THREE.BufferGeometry.prototype={constructor:THREE.BufferGeometry,applyMatrix:function(a){var b,c;this.attributes.position&&(b=this.attributes.position.array);this.attributes.normal&&(c=this.attributes.normal.array);void 0!==b&&(a.multiplyVector3Array(b),this.verticesNeedUpdate=!0);void 0!==c&&(b=new THREE.Matrix3,b.getInverse(a).transpose(),b.multiplyVector3Array(c),this.normalizeNormals(),this.normalsNeedUpdate=!0)},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);
var a=this.attributes.position.array;if(a){var b=this.boundingBox,c,d,e;3<=a.length&&(b.min.x=b.max.x=a[0],b.min.y=b.max.y=a[1],b.min.z=b.max.z=a[2]);for(var g=3,h=a.length;g<h;g+=3)c=a[g],d=a[g+1],e=a[g+2],c<b.min.x?b.min.x=c:c>b.max.x&&(b.max.x=c),d<b.min.y?b.min.y=d:d>b.max.y&&(b.max.y=d),e<b.min.z?b.min.z=e:e>b.max.z&&(b.max.z=e)}if(void 0===a||0===a.length)this.boundingBox.min.set(0,0,0),this.boundingBox.max.set(0,0,0)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=
new THREE.Sphere);var a=this.attributes.position.array;if(a){for(var b,c=0,d,e,g=0,h=a.length;g<h;g+=3)b=a[g],d=a[g+1],e=a[g+2],b=b*b+d*d+e*e,b>c&&(c=b);this.boundingSphere.radius=Math.sqrt(c)}},computeVertexNormals:function(){if(this.attributes.position){var a,b,c,d;a=this.attributes.position.array.length;if(void 0===this.attributes.normal)this.attributes.normal={itemSize:3,array:new Float32Array(a),numItems:a};else{a=0;for(b=this.attributes.normal.array.length;a<b;a++)this.attributes.normal.array[a]=
0}var e=this.attributes.position.array,g=this.attributes.normal.array,h,j,i,k,n,p,t=new THREE.Vector3,u=new THREE.Vector3,v=new THREE.Vector3,m=new THREE.Vector3,l=new THREE.Vector3;if(this.attributes.index){var y=this.attributes.index.array,x=this.offsets;c=0;for(d=x.length;c<d;++c){b=x[c].start;h=x[c].count;var A=x[c].index;a=b;for(b+=h;a<b;a+=3)h=A+y[a],j=A+y[a+1],i=A+y[a+2],k=e[3*h],n=e[3*h+1],p=e[3*h+2],t.set(k,n,p),k=e[3*j],n=e[3*j+1],p=e[3*j+2],u.set(k,n,p),k=e[3*i],n=e[3*i+1],p=e[3*i+2],v.set(k,
n,p),m.subVectors(v,u),l.subVectors(t,u),m.cross(l),g[3*h]+=m.x,g[3*h+1]+=m.y,g[3*h+2]+=m.z,g[3*j]+=m.x,g[3*j+1]+=m.y,g[3*j+2]+=m.z,g[3*i]+=m.x,g[3*i+1]+=m.y,g[3*i+2]+=m.z}}else{a=0;for(b=e.length;a<b;a+=9)k=e[a],n=e[a+1],p=e[a+2],t.set(k,n,p),k=e[a+3],n=e[a+4],p=e[a+5],u.set(k,n,p),k=e[a+6],n=e[a+7],p=e[a+8],v.set(k,n,p),m.subVectors(v,u),l.subVectors(t,u),m.cross(l),g[a]=m.x,g[a+1]=m.y,g[a+2]=m.z,g[a+3]=m.x,g[a+4]=m.y,g[a+5]=m.z,g[a+6]=m.x,g[a+7]=m.y,g[a+8]=m.z}this.normalizeNormals();this.normalsNeedUpdate=
!0}},normalizeNormals:function(){for(var a=this.attributes.normal.array,b,c,d,e=0,g=a.length;e<g;e+=3)b=a[e],c=a[e+1],d=a[e+2],b=1/Math.sqrt(b*b+c*c+d*d),a[e]*=b,a[e+1]*=b,a[e+2]*=b},computeTangents:function(){function a(a){Da.x=d[3*a];Da.y=d[3*a+1];Da.z=d[3*a+2];Wa.copy(Da);db=i[a];ya.copy(db);ya.sub(Da.multiplyScalar(Da.dot(db))).normalize();fa.crossVectors(Wa,db);vb=fa.dot(k[a]);cb=0>vb?-1:1;j[4*a]=ya.x;j[4*a+1]=ya.y;j[4*a+2]=ya.z;j[4*a+3]=cb}if(void 0===this.attributes.index||void 0===this.attributes.position||
void 0===this.attributes.normal||void 0===this.attributes.uv)console.warn("Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()");else{var b=this.attributes.index.array,c=this.attributes.position.array,d=this.attributes.normal.array,e=this.attributes.uv.array,g=c.length/3;if(void 0===this.attributes.tangent){var h=4*g;this.attributes.tangent={itemSize:4,array:new Float32Array(h),numItems:h}}for(var j=this.attributes.tangent.array,i=[],k=[],h=0;h<g;h++)i[h]=
new THREE.Vector3,k[h]=new THREE.Vector3;var n,p,t,u,v,m,l,y,x,A,s,C,I,D,w,g=new THREE.Vector3,h=new THREE.Vector3,P,N,F,X,B,W,E,Q=this.offsets;F=0;for(X=Q.length;F<X;++F){N=Q[F].start;B=Q[F].count;var R=Q[F].index;P=N;for(N+=B;P<N;P+=3)B=R+b[P],W=R+b[P+1],E=R+b[P+2],n=c[3*B],p=c[3*B+1],t=c[3*B+2],u=c[3*W],v=c[3*W+1],m=c[3*W+2],l=c[3*E],y=c[3*E+1],x=c[3*E+2],A=e[2*B],s=e[2*B+1],C=e[2*W],I=e[2*W+1],D=e[2*E],w=e[2*E+1],u-=n,n=l-n,v-=p,p=y-p,m-=t,t=x-t,C-=A,A=D-A,I-=s,s=w-s,w=1/(C*s-A*I),g.set((s*u-
I*n)*w,(s*v-I*p)*w,(s*m-I*t)*w),h.set((C*n-A*u)*w,(C*p-A*v)*w,(C*t-A*m)*w),i[B].add(g),i[W].add(g),i[E].add(g),k[B].add(h),k[W].add(h),k[E].add(h)}var ya=new THREE.Vector3,fa=new THREE.Vector3,Da=new THREE.Vector3,Wa=new THREE.Vector3,cb,db,vb;F=0;for(X=Q.length;F<X;++F){N=Q[F].start;B=Q[F].count;R=Q[F].index;P=N;for(N+=B;P<N;P+=3)B=R+b[P],W=R+b[P+1],E=R+b[P+2],a(B),a(W),a(E)}this.tangentsNeedUpdate=this.hasTangents=!0}},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.Camera=function(){THREE.Object3D.call(this);this.matrixWorldInverse=new THREE.Matrix4;this.projectionMatrix=new THREE.Matrix4;this.projectionMatrixInverse=new THREE.Matrix4};THREE.Camera.prototype=Object.create(THREE.Object3D.prototype);THREE.Camera.prototype.lookAt=function(a){this.matrix.lookAt(this.position,a,this.up);!0===this.rotationAutoUpdate&&(!1===this.useQuaternion?this.rotation.setEulerFromRotationMatrix(this.matrix,this.eulerOrder):this.quaternion.copy(this.matrix.decompose()[1]))};THREE.OrthographicCamera=function(a,b,c,d,e,g){THREE.Camera.call(this);this.left=a;this.right=b;this.top=c;this.bottom=d;this.near=void 0!==e?e:0.1;this.far=void 0!==g?g:2E3;this.updateProjectionMatrix()};THREE.OrthographicCamera.prototype=Object.create(THREE.Camera.prototype);THREE.OrthographicCamera.prototype.updateProjectionMatrix=function(){this.projectionMatrix.makeOrthographic(this.left,this.right,this.top,this.bottom,this.near,this.far)};THREE.PerspectiveCamera=function(a,b,c,d){THREE.Camera.call(this);this.fov=void 0!==a?a:50;this.aspect=void 0!==b?b:1;this.near=void 0!==c?c:0.1;this.far=void 0!==d?d:2E3;this.updateProjectionMatrix()};THREE.PerspectiveCamera.prototype=Object.create(THREE.Camera.prototype);THREE.PerspectiveCamera.prototype.setLens=function(a,b){void 0===b&&(b=24);this.fov=2*THREE.Math.radToDeg(Math.atan(b/(2*a)));this.updateProjectionMatrix()};
THREE.PerspectiveCamera.prototype.setViewOffset=function(a,b,c,d,e,g){this.fullWidth=a;this.fullHeight=b;this.x=c;this.y=d;this.width=e;this.height=g;this.updateProjectionMatrix()};
THREE.PerspectiveCamera.prototype.updateProjectionMatrix=function(){if(this.fullWidth){var a=this.fullWidth/this.fullHeight,b=Math.tan(THREE.Math.degToRad(0.5*this.fov))*this.near,c=-b,d=a*c,a=Math.abs(a*b-d),c=Math.abs(b-c);this.projectionMatrix.makeFrustum(d+this.x*a/this.fullWidth,d+(this.x+this.width)*a/this.fullWidth,b-(this.y+this.height)*c/this.fullHeight,b-this.y*c/this.fullHeight,this.near,this.far)}else this.projectionMatrix.makePerspective(this.fov,this.aspect,this.near,this.far)};THREE.Light=function(a){THREE.Object3D.call(this);this.color=new THREE.Color(a)};THREE.Light.prototype=Object.create(THREE.Object3D.prototype);THREE.AmbientLight=function(a){THREE.Light.call(this,a)};THREE.AmbientLight.prototype=Object.create(THREE.Light.prototype);THREE.DirectionalLight=function(a,b){THREE.Light.call(this,a);this.position=new THREE.Vector3(0,1,0);this.target=new THREE.Object3D;this.intensity=void 0!==b?b:1;this.onlyShadow=this.castShadow=!1;this.shadowCameraNear=50;this.shadowCameraFar=5E3;this.shadowCameraLeft=-500;this.shadowCameraTop=this.shadowCameraRight=500;this.shadowCameraBottom=-500;this.shadowCameraVisible=!1;this.shadowBias=0;this.shadowDarkness=0.5;this.shadowMapHeight=this.shadowMapWidth=512;this.shadowCascade=!1;this.shadowCascadeOffset=
new THREE.Vector3(0,0,-1E3);this.shadowCascadeCount=2;this.shadowCascadeBias=[0,0,0];this.shadowCascadeWidth=[512,512,512];this.shadowCascadeHeight=[512,512,512];this.shadowCascadeNearZ=[-1,0.99,0.998];this.shadowCascadeFarZ=[0.99,0.998,1];this.shadowCascadeArray=[];this.shadowMatrix=this.shadowCamera=this.shadowMapSize=this.shadowMap=null};THREE.DirectionalLight.prototype=Object.create(THREE.Light.prototype);THREE.HemisphereLight=function(a,b,c){THREE.Light.call(this,a);this.groundColor=new THREE.Color(b);this.position=new THREE.Vector3(0,100,0);this.intensity=void 0!==c?c:1};THREE.HemisphereLight.prototype=Object.create(THREE.Light.prototype);THREE.PointLight=function(a,b,c){THREE.Light.call(this,a);this.position=new THREE.Vector3(0,0,0);this.intensity=void 0!==b?b:1;this.distance=void 0!==c?c:0};THREE.PointLight.prototype=Object.create(THREE.Light.prototype);THREE.SpotLight=function(a,b,c,d,e){THREE.Light.call(this,a);this.position=new THREE.Vector3(0,1,0);this.target=new THREE.Object3D;this.intensity=void 0!==b?b:1;this.distance=void 0!==c?c:0;this.angle=void 0!==d?d:Math.PI/2;this.exponent=void 0!==e?e:10;this.onlyShadow=this.castShadow=!1;this.shadowCameraNear=50;this.shadowCameraFar=5E3;this.shadowCameraFov=50;this.shadowCameraVisible=!1;this.shadowBias=0;this.shadowDarkness=0.5;this.shadowMapHeight=this.shadowMapWidth=512;this.shadowMatrix=this.shadowCamera=
this.shadowMapSize=this.shadowMap=null};THREE.SpotLight.prototype=Object.create(THREE.Light.prototype);THREE.Loader=function(a){this.statusDomElement=(this.showStatus=a)?THREE.Loader.prototype.addStatusElement():null;this.onLoadStart=function(){};this.onLoadProgress=function(){};this.onLoadComplete=function(){}};
THREE.Loader.prototype={constructor:THREE.Loader,crossOrigin:"anonymous",addStatusElement:function(){var a=document.createElement("div");a.style.position="absolute";a.style.right="0px";a.style.top="0px";a.style.fontSize="0.8em";a.style.textAlign="left";a.style.background="rgba(0,0,0,0.25)";a.style.color="#fff";a.style.width="120px";a.style.padding="0.5em 0.5em 0.5em 0.5em";a.style.zIndex=1E3;a.innerHTML="Loading ...";return a},updateProgress:function(a){var b="Loaded ",b=a.total?b+((100*a.loaded/
a.total).toFixed(0)+"%"):b+((a.loaded/1E3).toFixed(2)+" KB");this.statusDomElement.innerHTML=b},extractUrlBase:function(a){a=a.split("/");a.pop();return(1>a.length?".":a.join("/"))+"/"},initMaterials:function(a,b){for(var c=[],d=0;d<a.length;++d)c[d]=THREE.Loader.prototype.createMaterial(a[d],b);return c},needsTangents:function(a){for(var b=0,c=a.length;b<c;b++)if(a[b]instanceof THREE.ShaderMaterial)return!0;return!1},createMaterial:function(a,b){function c(a){a=Math.log(a)/Math.LN2;return Math.floor(a)==
a}function d(a){a=Math.log(a)/Math.LN2;return Math.pow(2,Math.round(a))}function e(a,e,g,i,j,k,l){var y=/\.dds$/i.test(g),x=b+"/"+g;if(y){var A=THREE.ImageUtils.loadCompressedTexture(x);a[e]=A}else A=document.createElement("canvas"),a[e]=new THREE.Texture(A);a[e].sourceFile=g;i&&(a[e].repeat.set(i[0],i[1]),1!==i[0]&&(a[e].wrapS=THREE.RepeatWrapping),1!==i[1]&&(a[e].wrapT=THREE.RepeatWrapping));j&&a[e].offset.set(j[0],j[1]);k&&(g={repeat:THREE.RepeatWrapping,mirror:THREE.MirroredRepeatWrapping},void 0!==
g[k[0]]&&(a[e].wrapS=g[k[0]]),void 0!==g[k[1]]&&(a[e].wrapT=g[k[1]]));l&&(a[e].anisotropy=l);if(!y){var s=a[e],a=new Image;a.onload=function(){if(!c(this.width)||!c(this.height)){var a=d(this.width),b=d(this.height);s.image.width=a;s.image.height=b;s.image.getContext("2d").drawImage(this,0,0,a,b)}else s.image=this;s.needsUpdate=!0};a.crossOrigin=h.crossOrigin;a.src=x}}function g(a){return(255*a[0]<<16)+(255*a[1]<<8)+255*a[2]}var h=this,j="MeshLambertMaterial",i={color:15658734,opacity:1,map:null,
lightMap:null,normalMap:null,bumpMap:null,wireframe:!1};if(a.shading){var k=a.shading.toLowerCase();"phong"===k?j="MeshPhongMaterial":"basic"===k&&(j="MeshBasicMaterial")}void 0!==a.blending&&void 0!==THREE[a.blending]&&(i.blending=THREE[a.blending]);if(void 0!==a.transparent||1>a.opacity)i.transparent=a.transparent;void 0!==a.depthTest&&(i.depthTest=a.depthTest);void 0!==a.depthWrite&&(i.depthWrite=a.depthWrite);void 0!==a.visible&&(i.visible=a.visible);void 0!==a.flipSided&&(i.side=THREE.BackSide);
void 0!==a.doubleSided&&(i.side=THREE.DoubleSide);void 0!==a.wireframe&&(i.wireframe=a.wireframe);void 0!==a.vertexColors&&("face"===a.vertexColors?i.vertexColors=THREE.FaceColors:a.vertexColors&&(i.vertexColors=THREE.VertexColors));a.colorDiffuse?i.color=g(a.colorDiffuse):a.DbgColor&&(i.color=a.DbgColor);a.colorSpecular&&(i.specular=g(a.colorSpecular));a.colorAmbient&&(i.ambient=g(a.colorAmbient));a.transparency&&(i.opacity=a.transparency);a.specularCoef&&(i.shininess=a.specularCoef);a.mapDiffuse&&
b&&e(i,"map",a.mapDiffuse,a.mapDiffuseRepeat,a.mapDiffuseOffset,a.mapDiffuseWrap,a.mapDiffuseAnisotropy);a.mapLight&&b&&e(i,"lightMap",a.mapLight,a.mapLightRepeat,a.mapLightOffset,a.mapLightWrap,a.mapLightAnisotropy);a.mapBump&&b&&e(i,"bumpMap",a.mapBump,a.mapBumpRepeat,a.mapBumpOffset,a.mapBumpWrap,a.mapBumpAnisotropy);a.mapNormal&&b&&e(i,"normalMap",a.mapNormal,a.mapNormalRepeat,a.mapNormalOffset,a.mapNormalWrap,a.mapNormalAnisotropy);a.mapSpecular&&b&&e(i,"specularMap",a.mapSpecular,a.mapSpecularRepeat,
a.mapSpecularOffset,a.mapSpecularWrap,a.mapSpecularAnisotropy);a.mapBumpScale&&(i.bumpScale=a.mapBumpScale);a.mapNormal?(j=THREE.ShaderLib.normalmap,k=THREE.UniformsUtils.clone(j.uniforms),k.tNormal.value=i.normalMap,a.mapNormalFactor&&k.uNormalScale.value.set(a.mapNormalFactor,a.mapNormalFactor),i.map&&(k.tDiffuse.value=i.map,k.enableDiffuse.value=!0),i.specularMap&&(k.tSpecular.value=i.specularMap,k.enableSpecular.value=!0),i.lightMap&&(k.tAO.value=i.lightMap,k.enableAO.value=!0),k.uDiffuseColor.value.setHex(i.color),
k.uSpecularColor.value.setHex(i.specular),k.uAmbientColor.value.setHex(i.ambient),k.uShininess.value=i.shininess,void 0!==i.opacity&&(k.uOpacity.value=i.opacity),j=new THREE.ShaderMaterial({fragmentShader:j.fragmentShader,vertexShader:j.vertexShader,uniforms:k,lights:!0,fog:!0}),i.transparent&&(j.transparent=!0)):j=new THREE[j](i);void 0!==a.DbgName&&(j.name=a.DbgName);return j}};THREE.ImageLoader=function(){THREE.EventDispatcher.call(this);this.crossOrigin=null};THREE.ImageLoader.prototype={constructor:THREE.ImageLoader,load:function(a,b){var c=this;void 0===b&&(b=new Image);b.addEventListener("load",function(){c.dispatchEvent({type:"load",content:b})},!1);b.addEventListener("error",function(){c.dispatchEvent({type:"error",message:"Couldn't load URL ["+a+"]"})},!1);c.crossOrigin&&(b.crossOrigin=c.crossOrigin);b.src=a}};THREE.JSONLoader=function(a){THREE.Loader.call(this,a);this.withCredentials=!1};THREE.JSONLoader.prototype=Object.create(THREE.Loader.prototype);THREE.JSONLoader.prototype.load=function(a,b,c){c=c&&"string"===typeof c?c:this.extractUrlBase(a);this.onLoadStart();this.loadAjaxJSON(this,a,b,c)};
THREE.JSONLoader.prototype.loadAjaxJSON=function(a,b,c,d,e){var g=new XMLHttpRequest,h=0;g.onreadystatechange=function(){if(g.readyState===g.DONE)if(200===g.status||0===g.status){if(g.responseText){var j=JSON.parse(g.responseText);a.createModel(j,c,d)}else console.warn("THREE.JSONLoader: ["+b+"] seems to be unreachable or file there is empty");a.onLoadComplete()}else console.error("THREE.JSONLoader: Couldn't load ["+b+"] ["+g.status+"]");else g.readyState===g.LOADING?e&&(0===h&&(h=g.getResponseHeader("Content-Length")),
e({total:h,loaded:g.responseText.length})):g.readyState===g.HEADERS_RECEIVED&&(h=g.getResponseHeader("Content-Length"))};g.open("GET",b,!0);g.withCredentials=this.withCredentials;g.send(null)};
THREE.JSONLoader.prototype.createModel=function(a,b,c){var d=new THREE.Geometry,e=void 0!==a.scale?1/a.scale:1,g,h,j,i,k,n,p,t,u,v,m,l,y,x,A,s=a.faces;v=a.vertices;var C=a.normals,I=a.colors,D=0;for(g=0;g<a.uvs.length;g++)a.uvs[g].length&&D++;for(g=0;g<D;g++)d.faceUvs[g]=[],d.faceVertexUvs[g]=[];i=0;for(k=v.length;i<k;)n=new THREE.Vector3,n.x=v[i++]*e,n.y=v[i++]*e,n.z=v[i++]*e,d.vertices.push(n);i=0;for(k=s.length;i<k;){v=s[i++];n=v&1;j=v&2;g=v&4;h=v&8;t=v&16;p=v&32;m=v&64;v&=128;n?(l=new THREE.Face4,
l.a=s[i++],l.b=s[i++],l.c=s[i++],l.d=s[i++],n=4):(l=new THREE.Face3,l.a=s[i++],l.b=s[i++],l.c=s[i++],n=3);j&&(j=s[i++],l.materialIndex=j);j=d.faces.length;if(g)for(g=0;g<D;g++)y=a.uvs[g],u=s[i++],A=y[2*u],u=y[2*u+1],d.faceUvs[g][j]=new THREE.Vector2(A,u);if(h)for(g=0;g<D;g++){y=a.uvs[g];x=[];for(h=0;h<n;h++)u=s[i++],A=y[2*u],u=y[2*u+1],x[h]=new THREE.Vector2(A,u);d.faceVertexUvs[g][j]=x}t&&(t=3*s[i++],h=new THREE.Vector3,h.x=C[t++],h.y=C[t++],h.z=C[t],l.normal=h);if(p)for(g=0;g<n;g++)t=3*s[i++],h=
new THREE.Vector3,h.x=C[t++],h.y=C[t++],h.z=C[t],l.vertexNormals.push(h);m&&(p=s[i++],p=new THREE.Color(I[p]),l.color=p);if(v)for(g=0;g<n;g++)p=s[i++],p=new THREE.Color(I[p]),l.vertexColors.push(p);d.faces.push(l)}if(a.skinWeights){i=0;for(k=a.skinWeights.length;i<k;i+=2)s=a.skinWeights[i],C=a.skinWeights[i+1],d.skinWeights.push(new THREE.Vector4(s,C,0,0))}if(a.skinIndices){i=0;for(k=a.skinIndices.length;i<k;i+=2)s=a.skinIndices[i],C=a.skinIndices[i+1],d.skinIndices.push(new THREE.Vector4(s,C,0,0))}d.bones=
a.bones;d.animation=a.animation;if(void 0!==a.morphTargets){i=0;for(k=a.morphTargets.length;i<k;i++){d.morphTargets[i]={};d.morphTargets[i].name=a.morphTargets[i].name;d.morphTargets[i].vertices=[];I=d.morphTargets[i].vertices;D=a.morphTargets[i].vertices;s=0;for(C=D.length;s<C;s+=3)v=new THREE.Vector3,v.x=D[s]*e,v.y=D[s+1]*e,v.z=D[s+2]*e,I.push(v)}}if(void 0!==a.morphColors){i=0;for(k=a.morphColors.length;i<k;i++){d.morphColors[i]={};d.morphColors[i].name=a.morphColors[i].name;d.morphColors[i].colors=
[];C=d.morphColors[i].colors;I=a.morphColors[i].colors;e=0;for(s=I.length;e<s;e+=3)D=new THREE.Color(16755200),D.setRGB(I[e],I[e+1],I[e+2]),C.push(D)}}d.computeCentroids();d.computeFaceNormals();a=this.initMaterials(a.materials,c);this.needsTangents(a)&&d.computeTangents();b(d,a)};THREE.SceneLoader=function(){this.onLoadStart=function(){};this.onLoadProgress=function(){};this.onLoadComplete=function(){};this.callbackSync=function(){};this.callbackProgress=function(){};this.geometryHandlerMap={};this.hierarchyHandlerMap={};this.addGeometryHandler("ascii",THREE.JSONLoader)};THREE.SceneLoader.prototype.constructor=THREE.SceneLoader;
THREE.SceneLoader.prototype.load=function(a,b){var c=this,d=new XMLHttpRequest;d.onreadystatechange=function(){if(4===d.readyState)if(200===d.status||0===d.status){var e=JSON.parse(d.responseText);c.parse(e,b,a)}else console.error("THREE.SceneLoader: Couldn't load ["+a+"] ["+d.status+"]")};d.open("GET",a,!0);d.send(null)};THREE.SceneLoader.prototype.addGeometryHandler=function(a,b){this.geometryHandlerMap[a]={loaderClass:b}};
THREE.SceneLoader.prototype.addHierarchyHandler=function(a,b){this.hierarchyHandlerMap[a]={loaderClass:b}};
THREE.SceneLoader.prototype.parse=function(a,b,c){function d(a,b){return"relativeToHTML"==b?a:p+"/"+a}function e(){g(w.scene,N.objects)}function g(a,b){var c,e,h,i,k,p,m;for(m in b)if(void 0===w.objects[m]){var l=b[m],s=null;if(l.type&&l.type in n.hierarchyHandlerMap){if(void 0===l.loading){e={type:1,url:1,material:1,position:1,rotation:1,scale:1,visible:1,children:1,properties:1,skin:1,morph:1,mirroredLoop:1,duration:1};h={};for(var B in l)B in e||(h[B]=l[B]);u=w.materials[l.material];l.loading=
!0;e=n.hierarchyHandlerMap[l.type].loaderObject;e.options?e.load(d(l.url,N.urlBaseType),j(m,a,u,l)):e.load(d(l.url,N.urlBaseType),j(m,a,u,l),h)}}else if(void 0!==l.geometry){if(t=w.geometries[l.geometry]){s=!1;u=w.materials[l.material];s=u instanceof THREE.ShaderMaterial;h=l.position;i=l.rotation;k=l.scale;c=l.matrix;p=l.quaternion;l.material||(u=new THREE.MeshFaceMaterial(w.face_materials[l.geometry]));u instanceof THREE.MeshFaceMaterial&&0===u.materials.length&&(u=new THREE.MeshFaceMaterial(w.face_materials[l.geometry]));
if(u instanceof THREE.MeshFaceMaterial)for(e=0;e<u.materials.length;e++)s=s||u.materials[e]instanceof THREE.ShaderMaterial;s&&t.computeTangents();l.skin?s=new THREE.SkinnedMesh(t,u):l.morph?(s=new THREE.MorphAnimMesh(t,u),void 0!==l.duration&&(s.duration=l.duration),void 0!==l.time&&(s.time=l.time),void 0!==l.mirroredLoop&&(s.mirroredLoop=l.mirroredLoop),u.morphNormals&&t.computeMorphNormals()):s=new THREE.Mesh(t,u);s.name=m;c?(s.matrixAutoUpdate=!1,s.matrix.set(c[0],c[1],c[2],c[3],c[4],c[5],c[6],
c[7],c[8],c[9],c[10],c[11],c[12],c[13],c[14],c[15])):(s.position.set(h[0],h[1],h[2]),p?(s.quaternion.set(p[0],p[1],p[2],p[3]),s.useQuaternion=!0):s.rotation.set(i[0],i[1],i[2]),s.scale.set(k[0],k[1],k[2]));s.visible=l.visible;s.castShadow=l.castShadow;s.receiveShadow=l.receiveShadow;a.add(s);w.objects[m]=s}}else"DirectionalLight"===l.type||"PointLight"===l.type||"AmbientLight"===l.type?(x=void 0!==l.color?l.color:16777215,A=void 0!==l.intensity?l.intensity:1,"DirectionalLight"===l.type?(h=l.direction,
y=new THREE.DirectionalLight(x,A),y.position.set(h[0],h[1],h[2]),l.target&&(P.push({object:y,targetName:l.target}),y.target=null)):"PointLight"===l.type?(h=l.position,e=l.distance,y=new THREE.PointLight(x,A,e),y.position.set(h[0],h[1],h[2])):"AmbientLight"===l.type&&(y=new THREE.AmbientLight(x)),a.add(y),y.name=m,w.lights[m]=y,w.objects[m]=y):"PerspectiveCamera"===l.type||"OrthographicCamera"===l.type?("PerspectiveCamera"===l.type?v=new THREE.PerspectiveCamera(l.fov,l.aspect,l.near,l.far):"OrthographicCamera"===
l.type&&(v=new THREE.OrthographicCamera(l.left,l.right,l.top,l.bottom,l.near,l.far)),h=l.position,v.position.set(h[0],h[1],h[2]),a.add(v),v.name=m,w.cameras[m]=v,w.objects[m]=v):(h=l.position,i=l.rotation,k=l.scale,p=l.quaternion,s=new THREE.Object3D,s.name=m,s.position.set(h[0],h[1],h[2]),p?(s.quaternion.set(p[0],p[1],p[2],p[3]),s.useQuaternion=!0):s.rotation.set(i[0],i[1],i[2]),s.scale.set(k[0],k[1],k[2]),s.visible=void 0!==l.visible?l.visible:!1,a.add(s),w.objects[m]=s,w.empties[m]=s);if(s){if(void 0!==
l.properties)for(var D in l.properties)s.properties[D]=l.properties[D];if(void 0!==l.groups)for(e=0;e<l.groups.length;e++)h=l.groups[e],void 0===w.groups[h]&&(w.groups[h]=[]),w.groups[h].push(m);void 0!==l.children&&g(s,l.children)}}}function h(a){return function(b,c){w.geometries[a]=b;w.face_materials[a]=c;e();s-=1;n.onLoadComplete();k()}}function j(a,b,c,d){return function(g){var g=g.content?g.content:g.dae?g.scene:g,h=d.position,i=d.rotation,j=d.quaternion,p=d.scale;g.position.set(h[0],h[1],h[2]);
j?(g.quaternion.set(j[0],j[1],j[2],j[3]),g.useQuaternion=!0):g.rotation.set(i[0],i[1],i[2]);g.scale.set(p[0],p[1],p[2]);c&&g.traverse(function(a){a.material=c});var l=void 0!==d.visible?d.visible:!0;g.traverse(function(a){a.visible=l});b.add(g);g.name=a;w.objects[a]=g;e();s-=1;n.onLoadComplete();k()}}function i(a){return function(b,c){w.geometries[a]=b;w.face_materials[a]=c}}function k(){n.callbackProgress({totalModels:I,totalTextures:D,loadedModels:I-s,loadedTextures:D-C},w);n.onLoadProgress();if(0===
s&&0===C){for(var a=0;a<P.length;a++){var c=P[a],d=w.objects[c.targetName];d?c.object.target=d:(c.object.target=new THREE.Object3D,w.scene.add(c.object.target));c.object.target.properties.targetInverse=c.object}b(w)}}var n=this,p=THREE.Loader.prototype.extractUrlBase(c),t,u,v,m,l,y,x,A,s,C,I,D,w,P=[],N=a,F;for(F in this.geometryHandlerMap)a=this.geometryHandlerMap[F].loaderClass,this.geometryHandlerMap[F].loaderObject=new a;for(F in this.hierarchyHandlerMap)a=this.hierarchyHandlerMap[F].loaderClass,
this.hierarchyHandlerMap[F].loaderObject=new a;C=s=0;w={scene:new THREE.Scene,geometries:{},face_materials:{},materials:{},textures:{},objects:{},cameras:{},lights:{},fogs:{},empties:{},groups:{}};if(N.transform&&(F=N.transform.position,a=N.transform.rotation,c=N.transform.scale,F&&w.scene.position.set(F[0],F[1],F[2]),a&&w.scene.rotation.set(a[0],a[1],a[2]),c&&w.scene.scale.set(c[0],c[1],c[2]),F||a||c))w.scene.updateMatrix(),w.scene.updateMatrixWorld();F=function(a){return function(){C-=a;k();n.onLoadComplete()}};
for(var X in N.fogs)a=N.fogs[X],"linear"===a.type?m=new THREE.Fog(0,a.near,a.far):"exp2"===a.type&&(m=new THREE.FogExp2(0,a.density)),a=a.color,m.color.setRGB(a[0],a[1],a[2]),w.fogs[X]=m;for(var B in N.geometries)m=N.geometries[B],m.type in this.geometryHandlerMap&&(s+=1,n.onLoadStart());for(var W in N.objects)m=N.objects[W],m.type&&m.type in this.hierarchyHandlerMap&&(s+=1,n.onLoadStart());I=s;for(B in N.geometries)if(m=N.geometries[B],"cube"===m.type)t=new THREE.CubeGeometry(m.width,m.height,m.depth,
m.widthSegments,m.heightSegments,m.depthSegments),w.geometries[B]=t;else if("plane"===m.type)t=new THREE.PlaneGeometry(m.width,m.height,m.widthSegments,m.heightSegments),w.geometries[B]=t;else if("sphere"===m.type)t=new THREE.SphereGeometry(m.radius,m.widthSegments,m.heightSegments),w.geometries[B]=t;else if("cylinder"===m.type)t=new THREE.CylinderGeometry(m.topRad,m.botRad,m.height,m.radSegs,m.heightSegs),w.geometries[B]=t;else if("torus"===m.type)t=new THREE.TorusGeometry(m.radius,m.tube,m.segmentsR,
m.segmentsT),w.geometries[B]=t;else if("icosahedron"===m.type)t=new THREE.IcosahedronGeometry(m.radius,m.subdivisions),w.geometries[B]=t;else if(m.type in this.geometryHandlerMap){W={};for(l in m)"type"!==l&&"url"!==l&&(W[l]=m[l]);this.geometryHandlerMap[m.type].loaderObject.load(d(m.url,N.urlBaseType),h(B),W)}else"embedded"===m.type&&(W=N.embeds[m.id],W.metadata=N.metadata,W&&this.geometryHandlerMap.ascii.loaderObject.createModel(W,i(B),""));for(var E in N.textures)if(B=N.textures[E],B.url instanceof
Array){C+=B.url.length;for(l=0;l<B.url.length;l++)n.onLoadStart()}else C+=1,n.onLoadStart();D=C;for(E in N.textures){B=N.textures[E];void 0!==B.mapping&&void 0!==THREE[B.mapping]&&(B.mapping=new THREE[B.mapping]);if(B.url instanceof Array){W=B.url.length;m=[];for(l=0;l<W;l++)m[l]=d(B.url[l],N.urlBaseType);l=(l=/\.dds$/i.test(m[0]))?THREE.ImageUtils.loadCompressedTextureCube(m,B.mapping,F(W)):THREE.ImageUtils.loadTextureCube(m,B.mapping,F(W))}else l=/\.dds$/i.test(B.url),W=d(B.url,N.urlBaseType),m=
F(1),l=l?THREE.ImageUtils.loadCompressedTexture(W,B.mapping,m):THREE.ImageUtils.loadTexture(W,B.mapping,m),void 0!==THREE[B.minFilter]&&(l.minFilter=THREE[B.minFilter]),void 0!==THREE[B.magFilter]&&(l.magFilter=THREE[B.magFilter]),B.anisotropy&&(l.anisotropy=B.anisotropy),B.repeat&&(l.repeat.set(B.repeat[0],B.repeat[1]),1!==B.repeat[0]&&(l.wrapS=THREE.RepeatWrapping),1!==B.repeat[1]&&(l.wrapT=THREE.RepeatWrapping)),B.offset&&l.offset.set(B.offset[0],B.offset[1]),B.wrap&&(W={repeat:THREE.RepeatWrapping,
mirror:THREE.MirroredRepeatWrapping},void 0!==W[B.wrap[0]]&&(l.wrapS=W[B.wrap[0]]),void 0!==W[B.wrap[1]]&&(l.wrapT=W[B.wrap[1]]));w.textures[E]=l}var Q,R;for(Q in N.materials){E=N.materials[Q];for(R in E.parameters)"envMap"===R||"map"===R||"lightMap"===R||"bumpMap"===R?E.parameters[R]=w.textures[E.parameters[R]]:"shading"===R?E.parameters[R]="flat"===E.parameters[R]?THREE.FlatShading:THREE.SmoothShading:"side"===R?E.parameters[R]="double"==E.parameters[R]?THREE.DoubleSide:"back"==E.parameters[R]?
THREE.BackSide:THREE.FrontSide:"blending"===R?E.parameters[R]=E.parameters[R]in THREE?THREE[E.parameters[R]]:THREE.NormalBlending:"combine"===R?E.parameters[R]=E.parameters[R]in THREE?THREE[E.parameters[R]]:THREE.MultiplyOperation:"vertexColors"===R?"face"==E.parameters[R]?E.parameters[R]=THREE.FaceColors:E.parameters[R]&&(E.parameters[R]=THREE.VertexColors):"wrapRGB"===R&&(F=E.parameters[R],E.parameters[R]=new THREE.Vector3(F[0],F[1],F[2]));void 0!==E.parameters.opacity&&1>E.parameters.opacity&&
(E.parameters.transparent=!0);E.parameters.normalMap?(F=THREE.ShaderLib.normalmap,B=THREE.UniformsUtils.clone(F.uniforms),l=E.parameters.color,W=E.parameters.specular,m=E.parameters.ambient,X=E.parameters.shininess,B.tNormal.value=w.textures[E.parameters.normalMap],E.parameters.normalScale&&B.uNormalScale.value.set(E.parameters.normalScale[0],E.parameters.normalScale[1]),E.parameters.map&&(B.tDiffuse.value=E.parameters.map,B.enableDiffuse.value=!0),E.parameters.envMap&&(B.tCube.value=E.parameters.envMap,
B.enableReflection.value=!0,B.uReflectivity.value=E.parameters.reflectivity),E.parameters.lightMap&&(B.tAO.value=E.parameters.lightMap,B.enableAO.value=!0),E.parameters.specularMap&&(B.tSpecular.value=w.textures[E.parameters.specularMap],B.enableSpecular.value=!0),E.parameters.displacementMap&&(B.tDisplacement.value=w.textures[E.parameters.displacementMap],B.enableDisplacement.value=!0,B.uDisplacementBias.value=E.parameters.displacementBias,B.uDisplacementScale.value=E.parameters.displacementScale),
B.uDiffuseColor.value.setHex(l),B.uSpecularColor.value.setHex(W),B.uAmbientColor.value.setHex(m),B.uShininess.value=X,E.parameters.opacity&&(B.uOpacity.value=E.parameters.opacity),u=new THREE.ShaderMaterial({fragmentShader:F.fragmentShader,vertexShader:F.vertexShader,uniforms:B,lights:!0,fog:!0})):u=new THREE[E.type](E.parameters);w.materials[Q]=u}for(Q in N.materials)if(E=N.materials[Q],E.parameters.materials){R=[];for(l=0;l<E.parameters.materials.length;l++)R.push(w.materials[E.parameters.materials[l]]);
w.materials[Q].materials=R}e();w.cameras&&N.defaults.camera&&(w.currentCamera=w.cameras[N.defaults.camera]);w.fogs&&N.defaults.fog&&(w.scene.fog=w.fogs[N.defaults.fog]);n.callbackSync(w);k()};THREE.TextureLoader=function(){THREE.EventDispatcher.call(this);this.crossOrigin=null};THREE.TextureLoader.prototype={constructor:THREE.TextureLoader,load:function(a){var b=this,c=new Image;c.addEventListener("load",function(){var a=new THREE.Texture(c);a.needsUpdate=!0;b.dispatchEvent({type:"load",content:a})},!1);c.addEventListener("error",function(){b.dispatchEvent({type:"error",message:"Couldn't load URL ["+a+"]"})},!1);b.crossOrigin&&(c.crossOrigin=b.crossOrigin);c.src=a}};THREE.Material=function(){THREE.EventDispatcher.call(this);this.id=THREE.MaterialIdCount++;this.name="";this.side=THREE.FrontSide;this.opacity=1;this.transparent=!1;this.blending=THREE.NormalBlending;this.blendSrc=THREE.SrcAlphaFactor;this.blendDst=THREE.OneMinusSrcAlphaFactor;this.blendEquation=THREE.AddEquation;this.depthWrite=this.depthTest=!0;this.polygonOffset=!1;this.alphaTest=this.polygonOffsetUnits=this.polygonOffsetFactor=0;this.overdraw=!1;this.needsUpdate=this.visible=!0};
THREE.Material.prototype.setValues=function(a){if(void 0!==a)for(var b in a){var c=a[b];if(void 0===c)console.warn("THREE.Material: '"+b+"' parameter is undefined.");else if(b in this){var d=this[b];d instanceof THREE.Color&&c instanceof THREE.Color?d.copy(c):d instanceof THREE.Color?d.set(c):d instanceof THREE.Vector3&&c instanceof THREE.Vector3?d.copy(c):this[b]=c}}};
THREE.Material.prototype.clone=function(a){void 0===a&&(a=new THREE.Material);a.name=this.name;a.side=this.side;a.opacity=this.opacity;a.transparent=this.transparent;a.blending=this.blending;a.blendSrc=this.blendSrc;a.blendDst=this.blendDst;a.blendEquation=this.blendEquation;a.depthTest=this.depthTest;a.depthWrite=this.depthWrite;a.polygonOffset=this.polygonOffset;a.polygonOffsetFactor=this.polygonOffsetFactor;a.polygonOffsetUnits=this.polygonOffsetUnits;a.alphaTest=this.alphaTest;a.overdraw=this.overdraw;
a.visible=this.visible;return a};THREE.Material.prototype.dispose=function(){this.dispatchEvent({type:"dispose"})};THREE.MaterialIdCount=0;THREE.LineBasicMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.linewidth=1;this.linejoin=this.linecap="round";this.vertexColors=!1;this.fog=!0;this.setValues(a)};THREE.LineBasicMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.LineBasicMaterial.prototype.clone=function(){var a=new THREE.LineBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.linewidth=this.linewidth;a.linecap=this.linecap;a.linejoin=this.linejoin;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};THREE.LineDashedMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.scale=this.linewidth=1;this.dashSize=3;this.gapSize=1;this.vertexColors=!1;this.fog=!0;this.setValues(a)};THREE.LineDashedMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.LineDashedMaterial.prototype.clone=function(){var a=new THREE.LineDashedMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.linewidth=this.linewidth;a.scale=this.scale;a.dashSize=this.dashSize;a.gapSize=this.gapSize;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};THREE.MeshBasicMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.envMap=this.specularMap=this.lightMap=this.map=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=0.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.vertexColors=THREE.NoColors;this.morphTargets=this.skinning=!1;this.setValues(a)};
THREE.MeshBasicMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.MeshBasicMaterial.prototype.clone=function(){var a=new THREE.MeshBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.lightMap=this.lightMap;a.specularMap=this.specularMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;a.wireframeLinejoin=
this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;return a};THREE.MeshLambertMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.ambient=new THREE.Color(16777215);this.emissive=new THREE.Color(0);this.wrapAround=!1;this.wrapRGB=new THREE.Vector3(1,1,1);this.envMap=this.specularMap=this.lightMap=this.map=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=0.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap=
"round";this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.MeshLambertMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.MeshLambertMaterial.prototype.clone=function(){var a=new THREE.MeshLambertMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.ambient.copy(this.ambient);a.emissive.copy(this.emissive);a.wrapAround=this.wrapAround;a.wrapRGB.copy(this.wrapRGB);a.map=this.map;a.lightMap=this.lightMap;a.specularMap=this.specularMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;
a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;a.wireframeLinejoin=this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;a.morphNormals=this.morphNormals;return a};THREE.MeshPhongMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.ambient=new THREE.Color(16777215);this.emissive=new THREE.Color(0);this.specular=new THREE.Color(1118481);this.shininess=30;this.metal=!1;this.perPixel=!0;this.wrapAround=!1;this.wrapRGB=new THREE.Vector3(1,1,1);this.bumpMap=this.lightMap=this.map=null;this.bumpScale=1;this.normalMap=null;this.normalScale=new THREE.Vector2(1,1);this.envMap=this.specularMap=null;this.combine=THREE.MultiplyOperation;
this.reflectivity=1;this.refractionRatio=0.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.MeshPhongMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.MeshPhongMaterial.prototype.clone=function(){var a=new THREE.MeshPhongMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.ambient.copy(this.ambient);a.emissive.copy(this.emissive);a.specular.copy(this.specular);a.shininess=this.shininess;a.metal=this.metal;a.perPixel=this.perPixel;a.wrapAround=this.wrapAround;a.wrapRGB.copy(this.wrapRGB);a.map=this.map;a.lightMap=this.lightMap;a.bumpMap=this.bumpMap;a.bumpScale=this.bumpScale;a.normalMap=this.normalMap;a.normalScale.copy(this.normalScale);
a.specularMap=this.specularMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;a.wireframeLinejoin=this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;a.morphNormals=this.morphNormals;return a};THREE.MeshDepthMaterial=function(a){THREE.Material.call(this);this.wireframe=!1;this.wireframeLinewidth=1;this.setValues(a)};THREE.MeshDepthMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshDepthMaterial.prototype.clone=function(){var a=new THREE.LineBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;return a};THREE.MeshNormalMaterial=function(a){THREE.Material.call(this,a);this.shading=THREE.FlatShading;this.wireframe=!1;this.wireframeLinewidth=1;this.setValues(a)};THREE.MeshNormalMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshNormalMaterial.prototype.clone=function(){var a=new THREE.MeshNormalMaterial;THREE.Material.prototype.clone.call(this,a);a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;return a};THREE.MeshFaceMaterial=function(a){this.materials=a instanceof Array?a:[]};THREE.MeshFaceMaterial.prototype.clone=function(){return new THREE.MeshFaceMaterial(this.materials.slice(0))};THREE.ParticleBasicMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.map=null;this.size=1;this.sizeAttenuation=!0;this.vertexColors=!1;this.fog=!0;this.setValues(a)};THREE.ParticleBasicMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.ParticleBasicMaterial.prototype.clone=function(){var a=new THREE.ParticleBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.size=this.size;a.sizeAttenuation=this.sizeAttenuation;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};THREE.ShaderMaterial=function(a){THREE.Material.call(this);this.vertexShader=this.fragmentShader="void main() {}";this.uniforms={};this.defines={};this.attributes=null;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.lights=this.fog=!1;this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.ShaderMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.ShaderMaterial.prototype.clone=function(){var a=new THREE.ShaderMaterial;THREE.Material.prototype.clone.call(this,a);a.fragmentShader=this.fragmentShader;a.vertexShader=this.vertexShader;a.uniforms=THREE.UniformsUtils.clone(this.uniforms);a.attributes=this.attributes;a.defines=this.defines;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.fog=this.fog;a.lights=this.lights;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=
this.morphTargets;a.morphNormals=this.morphNormals;return a};THREE.SpriteMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.map=new THREE.Texture;this.useScreenCoordinates=!0;this.depthTest=!this.useScreenCoordinates;this.sizeAttenuation=!this.useScreenCoordinates;this.scaleByViewport=!this.sizeAttenuation;this.alignment=THREE.SpriteAlignment.center.clone();this.fog=!1;this.uvOffset=new THREE.Vector2(0,0);this.uvScale=new THREE.Vector2(1,1);this.setValues(a);a=a||{};void 0===a.depthTest&&(this.depthTest=!this.useScreenCoordinates);
void 0===a.sizeAttenuation&&(this.sizeAttenuation=!this.useScreenCoordinates);void 0===a.scaleByViewport&&(this.scaleByViewport=!this.sizeAttenuation)};THREE.SpriteMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.SpriteMaterial.prototype.clone=function(){var a=new THREE.SpriteMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.useScreenCoordinates=this.useScreenCoordinates;a.sizeAttenuation=this.sizeAttenuation;a.scaleByViewport=this.scaleByViewport;a.alignment.copy(this.alignment);a.uvOffset.copy(this.uvOffset);a.uvScale.copy(this.uvScale);a.fog=this.fog;return a};THREE.SpriteAlignment={};THREE.SpriteAlignment.topLeft=new THREE.Vector2(1,-1);
THREE.SpriteAlignment.topCenter=new THREE.Vector2(0,-1);THREE.SpriteAlignment.topRight=new THREE.Vector2(-1,-1);THREE.SpriteAlignment.centerLeft=new THREE.Vector2(1,0);THREE.SpriteAlignment.center=new THREE.Vector2(0,0);THREE.SpriteAlignment.centerRight=new THREE.Vector2(-1,0);THREE.SpriteAlignment.bottomLeft=new THREE.Vector2(1,1);THREE.SpriteAlignment.bottomCenter=new THREE.Vector2(0,1);THREE.SpriteAlignment.bottomRight=new THREE.Vector2(-1,1);THREE.Texture=function(a,b,c,d,e,g,h,j,i){THREE.EventDispatcher.call(this);this.id=THREE.TextureIdCount++;this.name="";this.image=a;this.mipmaps=[];this.mapping=void 0!==b?b:new THREE.UVMapping;this.wrapS=void 0!==c?c:THREE.ClampToEdgeWrapping;this.wrapT=void 0!==d?d:THREE.ClampToEdgeWrapping;this.magFilter=void 0!==e?e:THREE.LinearFilter;this.minFilter=void 0!==g?g:THREE.LinearMipMapLinearFilter;this.anisotropy=void 0!==i?i:1;this.format=void 0!==h?h:THREE.RGBAFormat;this.type=void 0!==j?j:THREE.UnsignedByteType;
this.offset=new THREE.Vector2(0,0);this.repeat=new THREE.Vector2(1,1);this.generateMipmaps=!0;this.premultiplyAlpha=!1;this.flipY=!0;this.unpackAlignment=4;this.needsUpdate=!1;this.onUpdate=null};
THREE.Texture.prototype={constructor:THREE.Texture,clone:function(a){void 0===a&&(a=new THREE.Texture);a.image=this.image;a.mipmaps=this.mipmaps.slice(0);a.mapping=this.mapping;a.wrapS=this.wrapS;a.wrapT=this.wrapT;a.magFilter=this.magFilter;a.minFilter=this.minFilter;a.anisotropy=this.anisotropy;a.format=this.format;a.type=this.type;a.offset.copy(this.offset);a.repeat.copy(this.repeat);a.generateMipmaps=this.generateMipmaps;a.premultiplyAlpha=this.premultiplyAlpha;a.flipY=this.flipY;a.unpackAlignment=
this.unpackAlignment;return a},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.TextureIdCount=0;THREE.CompressedTexture=function(a,b,c,d,e,g,h,j,i,k,n){THREE.Texture.call(this,null,g,h,j,i,k,d,e,n);this.image={width:b,height:c};this.mipmaps=a;this.generateMipmaps=!1};THREE.CompressedTexture.prototype=Object.create(THREE.Texture.prototype);THREE.CompressedTexture.prototype.clone=function(){var a=new THREE.CompressedTexture;THREE.Texture.prototype.clone.call(this,a);return a};THREE.DataTexture=function(a,b,c,d,e,g,h,j,i,k,n){THREE.Texture.call(this,null,g,h,j,i,k,d,e,n);this.image={data:a,width:b,height:c}};THREE.DataTexture.prototype=Object.create(THREE.Texture.prototype);THREE.DataTexture.prototype.clone=function(){var a=new THREE.DataTexture;THREE.Texture.prototype.clone.call(this,a);return a};THREE.Particle=function(a){THREE.Object3D.call(this);this.material=a};THREE.Particle.prototype=Object.create(THREE.Object3D.prototype);THREE.Particle.prototype.clone=function(a){void 0===a&&(a=new THREE.Particle(this.material));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.ParticleSystem=function(a,b){THREE.Object3D.call(this);this.geometry=a;this.material=void 0!==b?b:new THREE.ParticleBasicMaterial({color:16777215*Math.random()});this.sortParticles=!1;this.geometry&&null===this.geometry.boundingSphere&&this.geometry.computeBoundingSphere();this.frustumCulled=!1};THREE.ParticleSystem.prototype=Object.create(THREE.Object3D.prototype);
THREE.ParticleSystem.prototype.clone=function(a){void 0===a&&(a=new THREE.ParticleSystem(this.geometry,this.material));a.sortParticles=this.sortParticles;THREE.Object3D.prototype.clone.call(this,a);return a};THREE.Line=function(a,b,c){THREE.Object3D.call(this);this.geometry=a;this.material=void 0!==b?b:new THREE.LineBasicMaterial({color:16777215*Math.random()});this.type=void 0!==c?c:THREE.LineStrip;this.geometry&&(this.geometry.boundingSphere||this.geometry.computeBoundingSphere())};THREE.LineStrip=0;THREE.LinePieces=1;THREE.Line.prototype=Object.create(THREE.Object3D.prototype);
THREE.Line.prototype.clone=function(a){void 0===a&&(a=new THREE.Line(this.geometry,this.material,this.type));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.Mesh=function(a,b){THREE.Object3D.call(this);this.geometry=a;this.material=void 0!==b?b:new THREE.MeshBasicMaterial({color:16777215*Math.random(),wireframe:!0});void 0!==this.geometry&&(null===this.geometry.boundingSphere&&this.geometry.computeBoundingSphere(),this.updateMorphTargets())};THREE.Mesh.prototype=Object.create(THREE.Object3D.prototype);
THREE.Mesh.prototype.updateMorphTargets=function(){if(0<this.geometry.morphTargets.length){this.morphTargetBase=-1;this.morphTargetForcedOrder=[];this.morphTargetInfluences=[];this.morphTargetDictionary={};for(var a=0,b=this.geometry.morphTargets.length;a<b;a++)this.morphTargetInfluences.push(0),this.morphTargetDictionary[this.geometry.morphTargets[a].name]=a}};
THREE.Mesh.prototype.getMorphTargetIndexByName=function(a){if(void 0!==this.morphTargetDictionary[a])return this.morphTargetDictionary[a];console.log("THREE.Mesh.getMorphTargetIndexByName: morph target "+a+" does not exist. Returning 0.");return 0};THREE.Mesh.prototype.clone=function(a){void 0===a&&(a=new THREE.Mesh(this.geometry,this.material));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.Bone=function(a){THREE.Object3D.call(this);this.skin=a;this.skinMatrix=new THREE.Matrix4};THREE.Bone.prototype=Object.create(THREE.Object3D.prototype);THREE.Bone.prototype.update=function(a,b){this.matrixAutoUpdate&&(b|=this.updateMatrix());if(b||this.matrixWorldNeedsUpdate)a?this.skinMatrix.multiplyMatrices(a,this.matrix):this.skinMatrix.copy(this.matrix),this.matrixWorldNeedsUpdate=!1,b=!0;var c,d=this.children.length;for(c=0;c<d;c++)this.children[c].update(this.skinMatrix,b)};THREE.SkinnedMesh=function(a,b,c){THREE.Mesh.call(this,a,b);this.useVertexTexture=void 0!==c?c:!0;this.identityMatrix=new THREE.Matrix4;this.bones=[];this.boneMatrices=[];var d,e,g;if(this.geometry&&void 0!==this.geometry.bones){for(a=0;a<this.geometry.bones.length;a++)c=this.geometry.bones[a],d=c.pos,e=c.rotq,g=c.scl,b=this.addBone(),b.name=c.name,b.position.set(d[0],d[1],d[2]),b.quaternion.set(e[0],e[1],e[2],e[3]),b.useQuaternion=!0,void 0!==g?b.scale.set(g[0],g[1],g[2]):b.scale.set(1,1,1);for(a=
0;a<this.bones.length;a++)c=this.geometry.bones[a],b=this.bones[a],-1===c.parent?this.add(b):this.bones[c.parent].add(b);a=this.bones.length;this.useVertexTexture?(this.boneTextureHeight=this.boneTextureWidth=a=256<a?64:64<a?32:16<a?16:8,this.boneMatrices=new Float32Array(4*this.boneTextureWidth*this.boneTextureHeight),this.boneTexture=new THREE.DataTexture(this.boneMatrices,this.boneTextureWidth,this.boneTextureHeight,THREE.RGBAFormat,THREE.FloatType),this.boneTexture.minFilter=THREE.NearestFilter,
this.boneTexture.magFilter=THREE.NearestFilter,this.boneTexture.generateMipmaps=!1,this.boneTexture.flipY=!1):this.boneMatrices=new Float32Array(16*a);this.pose()}};THREE.SkinnedMesh.prototype=Object.create(THREE.Mesh.prototype);THREE.SkinnedMesh.prototype.addBone=function(a){void 0===a&&(a=new THREE.Bone(this));this.bones.push(a);return a};
THREE.SkinnedMesh.prototype.updateMatrixWorld=function(a){this.matrixAutoUpdate&&this.updateMatrix();if(this.matrixWorldNeedsUpdate||a)this.parent?this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix):this.matrixWorld.copy(this.matrix),this.matrixWorldNeedsUpdate=!1;for(var a=0,b=this.children.length;a<b;a++){var c=this.children[a];c instanceof THREE.Bone?c.update(this.identityMatrix,!1):c.updateMatrixWorld(!0)}if(void 0==this.boneInverses){this.boneInverses=[];a=0;for(b=this.bones.length;a<
b;a++)c=new THREE.Matrix4,c.getInverse(this.bones[a].skinMatrix),this.boneInverses.push(c)}a=0;for(b=this.bones.length;a<b;a++)THREE.SkinnedMesh.offsetMatrix.multiplyMatrices(this.bones[a].skinMatrix,this.boneInverses[a]),THREE.SkinnedMesh.offsetMatrix.flattenToArrayOffset(this.boneMatrices,16*a);this.useVertexTexture&&(this.boneTexture.needsUpdate=!0)};
THREE.SkinnedMesh.prototype.pose=function(){this.updateMatrixWorld(!0);for(var a=0;a<this.geometry.skinIndices.length;a++){var b=this.geometry.skinWeights[a],c=1/b.lengthManhattan();Infinity!==c?b.multiplyScalar(c):b.set(1)}};THREE.SkinnedMesh.prototype.clone=function(a){void 0===a&&(a=new THREE.SkinnedMesh(this.geometry,this.material,this.useVertexTexture));THREE.Mesh.prototype.clone.call(this,a);return a};THREE.SkinnedMesh.offsetMatrix=new THREE.Matrix4;THREE.MorphAnimMesh=function(a,b){THREE.Mesh.call(this,a,b);this.duration=1E3;this.mirroredLoop=!1;this.currentKeyframe=this.lastKeyframe=this.time=0;this.direction=1;this.directionBackwards=!1;this.setFrameRange(0,this.geometry.morphTargets.length-1)};THREE.MorphAnimMesh.prototype=Object.create(THREE.Mesh.prototype);THREE.MorphAnimMesh.prototype.setFrameRange=function(a,b){this.startKeyframe=a;this.endKeyframe=b;this.length=this.endKeyframe-this.startKeyframe+1};
THREE.MorphAnimMesh.prototype.setDirectionForward=function(){this.direction=1;this.directionBackwards=!1};THREE.MorphAnimMesh.prototype.setDirectionBackward=function(){this.direction=-1;this.directionBackwards=!0};
THREE.MorphAnimMesh.prototype.parseAnimations=function(){var a=this.geometry;a.animations||(a.animations={});for(var b,c=a.animations,d=/([a-z]+)(\d+)/,e=0,g=a.morphTargets.length;e<g;e++){var h=a.morphTargets[e].name.match(d);if(h&&1<h.length){h=h[1];c[h]||(c[h]={start:Infinity,end:-Infinity});var j=c[h];e<j.start&&(j.start=e);e>j.end&&(j.end=e);b||(b=h)}}a.firstAnimation=b};
THREE.MorphAnimMesh.prototype.setAnimationLabel=function(a,b,c){this.geometry.animations||(this.geometry.animations={});this.geometry.animations[a]={start:b,end:c}};THREE.MorphAnimMesh.prototype.playAnimation=function(a,b){var c=this.geometry.animations[a];c?(this.setFrameRange(c.start,c.end),this.duration=1E3*((c.end-c.start)/b),this.time=0):console.warn("animation["+a+"] undefined")};
THREE.MorphAnimMesh.prototype.updateAnimation=function(a){var b=this.duration/this.length;this.time+=this.direction*a;if(this.mirroredLoop){if(this.time>this.duration||0>this.time)this.direction*=-1,this.time>this.duration&&(this.time=this.duration,this.directionBackwards=!0),0>this.time&&(this.time=0,this.directionBackwards=!1)}else this.time%=this.duration,0>this.time&&(this.time+=this.duration);a=this.startKeyframe+THREE.Math.clamp(Math.floor(this.time/b),0,this.length-1);a!==this.currentKeyframe&&
(this.morphTargetInfluences[this.lastKeyframe]=0,this.morphTargetInfluences[this.currentKeyframe]=1,this.morphTargetInfluences[a]=0,this.lastKeyframe=this.currentKeyframe,this.currentKeyframe=a);b=this.time%b/b;this.directionBackwards&&(b=1-b);this.morphTargetInfluences[this.currentKeyframe]=b;this.morphTargetInfluences[this.lastKeyframe]=1-b};
THREE.MorphAnimMesh.prototype.clone=function(a){void 0===a&&(a=new THREE.MorphAnimMesh(this.geometry,this.material));a.duration=this.duration;a.mirroredLoop=this.mirroredLoop;a.time=this.time;a.lastKeyframe=this.lastKeyframe;a.currentKeyframe=this.currentKeyframe;a.direction=this.direction;a.directionBackwards=this.directionBackwards;THREE.Mesh.prototype.clone.call(this,a);return a};THREE.Ribbon=function(a,b){THREE.Object3D.call(this);this.geometry=a;this.material=b};THREE.Ribbon.prototype=Object.create(THREE.Object3D.prototype);THREE.Ribbon.prototype.clone=function(a){void 0===a&&(a=new THREE.Ribbon(this.geometry,this.material));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.LOD=function(){THREE.Object3D.call(this);this.LODs=[]};THREE.LOD.prototype=Object.create(THREE.Object3D.prototype);THREE.LOD.prototype.addLevel=function(a,b){void 0===b&&(b=0);for(var b=Math.abs(b),c=0;c<this.LODs.length&&!(b<this.LODs[c].visibleAtDistance);c++);this.LODs.splice(c,0,{visibleAtDistance:b,object3D:a});this.add(a)};
THREE.LOD.prototype.update=function(a){if(1<this.LODs.length){a.matrixWorldInverse.getInverse(a.matrixWorld);a=a.matrixWorldInverse;a=-(a.elements[2]*this.matrixWorld.elements[12]+a.elements[6]*this.matrixWorld.elements[13]+a.elements[10]*this.matrixWorld.elements[14]+a.elements[14]);this.LODs[0].object3D.visible=!0;for(var b=1;b<this.LODs.length;b++)if(a>=this.LODs[b].visibleAtDistance)this.LODs[b-1].object3D.visible=!1,this.LODs[b].object3D.visible=!0;else break;for(;b<this.LODs.length;b++)this.LODs[b].object3D.visible=
!1}};THREE.LOD.prototype.clone=function(){};THREE.Sprite=function(a){THREE.Object3D.call(this);this.material=void 0!==a?a:new THREE.SpriteMaterial;this.rotation3d=this.rotation;this.rotation=0};THREE.Sprite.prototype=Object.create(THREE.Object3D.prototype);THREE.Sprite.prototype.updateMatrix=function(){this.matrix.setPosition(this.position);this.rotation3d.set(0,0,this.rotation);this.matrix.setRotationFromEuler(this.rotation3d);(1!==this.scale.x||1!==this.scale.y)&&this.matrix.scale(this.scale);this.matrixWorldNeedsUpdate=!0};
THREE.Sprite.prototype.clone=function(a){void 0===a&&(a=new THREE.Sprite(this.material));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.Scene=function(){THREE.Object3D.call(this);this.overrideMaterial=this.fog=null;this.matrixAutoUpdate=!1;this.__objects=[];this.__lights=[];this.__objectsAdded=[];this.__objectsRemoved=[]};THREE.Scene.prototype=Object.create(THREE.Object3D.prototype);
THREE.Scene.prototype.__addObject=function(a){if(a instanceof THREE.Light)-1===this.__lights.indexOf(a)&&this.__lights.push(a),a.target&&void 0===a.target.parent&&this.add(a.target);else if(!(a instanceof THREE.Camera||a instanceof THREE.Bone)&&-1===this.__objects.indexOf(a)){this.__objects.push(a);this.__objectsAdded.push(a);var b=this.__objectsRemoved.indexOf(a);-1!==b&&this.__objectsRemoved.splice(b,1)}for(b=0;b<a.children.length;b++)this.__addObject(a.children[b])};
THREE.Scene.prototype.__removeObject=function(a){if(a instanceof THREE.Light){var b=this.__lights.indexOf(a);-1!==b&&this.__lights.splice(b,1)}else a instanceof THREE.Camera||(b=this.__objects.indexOf(a),-1!==b&&(this.__objects.splice(b,1),this.__objectsRemoved.push(a),b=this.__objectsAdded.indexOf(a),-1!==b&&this.__objectsAdded.splice(b,1)));for(b=0;b<a.children.length;b++)this.__removeObject(a.children[b])};THREE.Fog=function(a,b,c){this.name="";this.color=new THREE.Color(a);this.near=void 0!==b?b:1;this.far=void 0!==c?c:1E3};THREE.Fog.prototype.clone=function(){return new THREE.Fog(this.color.getHex(),this.near,this.far)};THREE.FogExp2=function(a,b){this.name="";this.color=new THREE.Color(a);this.density=void 0!==b?b:2.5E-4};THREE.FogExp2.prototype.clone=function(){return new THREE.FogExp2(this.color.getHex(),this.density)};THREE.ShaderChunk={fog_pars_fragment:"#ifdef USE_FOG\nuniform vec3 fogColor;\n#ifdef FOG_EXP2\nuniform float fogDensity;\n#else\nuniform float fogNear;\nuniform float fogFar;\n#endif\n#endif",fog_fragment:"#ifdef USE_FOG\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n#ifdef FOG_EXP2\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n#else\nfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n#endif\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n#endif",
envmap_pars_fragment:"#ifdef USE_ENVMAP\nuniform float reflectivity;\nuniform samplerCube envMap;\nuniform float flipEnvMap;\nuniform int combine;\n#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\nuniform bool useRefract;\nuniform float refractionRatio;\n#else\nvarying vec3 vReflect;\n#endif\n#endif",envmap_fragment:"#ifdef USE_ENVMAP\nvec3 reflectVec;\n#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\nvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\nif ( useRefract ) {\nreflectVec = refract( cameraToVertex, normal, refractionRatio );\n} else { \nreflectVec = reflect( cameraToVertex, normal );\n}\n#else\nreflectVec = vReflect;\n#endif\n#ifdef DOUBLE_SIDED\nfloat flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\nvec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n#else\nvec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n#endif\n#ifdef GAMMA_INPUT\ncubeColor.xyz *= cubeColor.xyz;\n#endif\nif ( combine == 1 ) {\ngl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularStrength * reflectivity );\n} else if ( combine == 2 ) {\ngl_FragColor.xyz += cubeColor.xyz * specularStrength * reflectivity;\n} else {\ngl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * cubeColor.xyz, specularStrength * reflectivity );\n}\n#endif",
envmap_pars_vertex:"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )\nvarying vec3 vReflect;\nuniform float refractionRatio;\nuniform bool useRefract;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n#ifdef USE_SKINNING\nvec4 worldPosition = modelMatrix * skinned;\n#endif\n#if defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\nvec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );\n#endif\n#if ! defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\nvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n#endif\n#endif",
envmap_vertex:"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )\nvec3 worldNormal = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;\nworldNormal = normalize( worldNormal );\nvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\nif ( useRefract ) {\nvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n} else {\nvReflect = reflect( cameraToVertex, worldNormal );\n}\n#endif",map_particle_pars_fragment:"#ifdef USE_MAP\nuniform sampler2D map;\n#endif",
map_particle_fragment:"#ifdef USE_MAP\ngl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );\n#endif",map_pars_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\nvarying vec2 vUv;\nuniform vec4 offsetRepeat;\n#endif",map_pars_fragment:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\nvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\nuniform sampler2D map;\n#endif",
map_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\nvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif",map_fragment:"#ifdef USE_MAP\nvec4 texelColor = texture2D( map, vUv );\n#ifdef GAMMA_INPUT\ntexelColor.xyz *= texelColor.xyz;\n#endif\ngl_FragColor = gl_FragColor * texelColor;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\nvarying vec2 vUv2;\nuniform sampler2D lightMap;\n#endif",lightmap_pars_vertex:"#ifdef USE_LIGHTMAP\nvarying vec2 vUv2;\n#endif",
lightmap_fragment:"#ifdef USE_LIGHTMAP\ngl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );\n#endif",lightmap_vertex:"#ifdef USE_LIGHTMAP\nvUv2 = uv2;\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\nuniform sampler2D bumpMap;\nuniform float bumpScale;\nvec2 dHdxy_fwd() {\nvec2 dSTdx = dFdx( vUv );\nvec2 dSTdy = dFdy( vUv );\nfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\nfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\nfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\nreturn vec2( dBx, dBy );\n}\nvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\nvec3 vSigmaX = dFdx( surf_pos );\nvec3 vSigmaY = dFdy( surf_pos );\nvec3 vN = surf_norm;\nvec3 R1 = cross( vSigmaY, vN );\nvec3 R2 = cross( vN, vSigmaX );\nfloat fDet = dot( vSigmaX, R1 );\nvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\nreturn normalize( abs( fDet ) * surf_norm - vGrad );\n}\n#endif",
normalmap_pars_fragment:"#ifdef USE_NORMALMAP\nuniform sampler2D normalMap;\nuniform vec2 normalScale;\nvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\nvec3 q0 = dFdx( eye_pos.xyz );\nvec3 q1 = dFdy( eye_pos.xyz );\nvec2 st0 = dFdx( vUv.st );\nvec2 st1 = dFdy( vUv.st );\nvec3 S = normalize(  q0 * st1.t - q1 * st0.t );\nvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\nvec3 N = normalize( surf_norm );\nvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\nmapN.xy = normalScale * mapN.xy;\nmat3 tsn = mat3( S, T, N );\nreturn normalize( tsn * mapN );\n}\n#endif",
specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\nuniform sampler2D specularMap;\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\nvec4 texelSpecular = texture2D( specularMap, vUv );\nspecularStrength = texelSpecular.r;\n#else\nspecularStrength = 1.0;\n#endif",lights_lambert_pars_vertex:"uniform vec3 ambient;\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS > 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif",
lights_lambert_vertex:"vLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\nvLightBack = vec3( 0.0 );\n#endif\ntransformedNormal = normalize( transformedNormal );\n#if MAX_DIR_LIGHTS > 0\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( transformedNormal, dirVector );\nvec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\ndirectionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\ndirectionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += directionalLightColor[ i ] * directionalLightWeighting;\n#ifdef DOUBLE_SIDED\nvLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;\n#endif\n}\n#endif\n#if MAX_POINT_LIGHTS > 0\nfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\nfloat dotProduct = dot( transformedNormal, lVector );\nvec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\npointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\npointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;\n#ifdef DOUBLE_SIDED\nvLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nfor( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );\nif ( spotEffect > spotLightAngleCos[ i ] ) {\nspotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\nfloat dotProduct = dot( transformedNormal, lVector );\nvec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\nspotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\nspotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;\n#ifdef DOUBLE_SIDED\nvLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_HEMI_LIGHTS > 0\nfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( transformedNormal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nfloat hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;\nvLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n#ifdef DOUBLE_SIDED\nvLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\n#endif\n}\n#endif\nvLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;\n#ifdef DOUBLE_SIDED\nvLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;\n#endif",
lights_phong_pars_vertex:"#ifndef PHONG_PER_PIXEL\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\nvarying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\nvarying vec3 vWorldPosition;\n#endif",
lights_phong_vertex:"#ifndef PHONG_PER_PIXEL\n#if MAX_POINT_LIGHTS > 0\nfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nvPointLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nfor( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nvSpotLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\nvWorldPosition = worldPosition.xyz;\n#endif",
lights_phong_pars_fragment:"uniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS > 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n#ifdef PHONG_PER_PIXEL\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#else\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n#ifdef PHONG_PER_PIXEL\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n#else\nvarying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\nvarying vec3 vWorldPosition;\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;",
lights_phong_fragment:"vec3 normal = normalize( vNormal );\nvec3 viewPosition = normalize( vViewPosition );\n#ifdef DOUBLE_SIDED\nnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n#endif\n#ifdef USE_NORMALMAP\nnormal = perturbNormal2Arb( -viewPosition, normal );\n#elif defined( USE_BUMPMAP )\nnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n#if MAX_POINT_LIGHTS > 0\nvec3 pointDiffuse  = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n#ifdef PHONG_PER_PIXEL\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\n#else\nvec3 lVector = normalize( vPointLight[ i ].xyz );\nfloat lDistance = vPointLight[ i ].w;\n#endif\nfloat dotProduct = dot( normal, lVector );\n#ifdef WRAP_AROUND\nfloat pointDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n#else\nfloat pointDiffuseWeight = max( dotProduct, 0.0 );\n#endif\npointDiffuse  += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\nvec3 pointHalfVector = normalize( lVector + viewPosition );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, pointHalfVector ), 5.0 );\npointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\n#else\npointSpecular += specular * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nvec3 spotDiffuse  = vec3( 0.0 );\nvec3 spotSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n#ifdef PHONG_PER_PIXEL\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\n#else\nvec3 lVector = normalize( vSpotLight[ i ].xyz );\nfloat lDistance = vSpotLight[ i ].w;\n#endif\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\nif ( spotEffect > spotLightAngleCos[ i ] ) {\nspotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\nfloat dotProduct = dot( normal, lVector );\n#ifdef WRAP_AROUND\nfloat spotDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n#else\nfloat spotDiffuseWeight = max( dotProduct, 0.0 );\n#endif\nspotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;\nvec3 spotHalfVector = normalize( lVector + viewPosition );\nfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\nfloat spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, spotHalfVector ), 5.0 );\nspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;\n#else\nspotSpecular += specular * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_DIR_LIGHTS > 0\nvec3 dirDiffuse  = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, dirVector );\n#ifdef WRAP_AROUND\nfloat dirDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dotProduct, 0.0 );\n#endif\ndirDiffuse  += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewPosition );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\ndirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n#else\ndirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_HEMI_LIGHTS > 0\nvec3 hemiDiffuse  = vec3( 0.0 );\nvec3 hemiSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\nhemiDiffuse += diffuse * hemiColor;\nvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\nfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\nfloat hemiSpecularWeightSky = specularStrength * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\nvec3 lVectorGround = -lVector;\nvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\nfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\nfloat hemiSpecularWeightGround = specularStrength * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat dotProductGround = dot( normal, lVectorGround );\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );\nvec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );\nhemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n#else\nhemiSpecular += specular * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;\n#endif\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS > 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_HEMI_LIGHTS > 0\ntotalDiffuse += hemiDiffuse;\ntotalSpecular += hemiSpecular;\n#endif\n#if MAX_POINT_LIGHTS > 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\n#if MAX_SPOT_LIGHTS > 0\ntotalDiffuse += spotDiffuse;\ntotalSpecular += spotSpecular;\n#endif\n#ifdef METAL\ngl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\n#endif",
color_pars_fragment:"#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif",color_fragment:"#ifdef USE_COLOR\ngl_FragColor = gl_FragColor * vec4( vColor, opacity );\n#endif",color_pars_vertex:"#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif",color_vertex:"#ifdef USE_COLOR\n#ifdef GAMMA_INPUT\nvColor = color * color;\n#else\nvColor = color;\n#endif\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n#ifdef BONE_TEXTURE\nuniform sampler2D boneTexture;\nmat4 getBoneMatrix( const in float i ) {\nfloat j = i * 4.0;\nfloat x = mod( j, N_BONE_PIXEL_X );\nfloat y = floor( j / N_BONE_PIXEL_X );\nconst float dx = 1.0 / N_BONE_PIXEL_X;\nconst float dy = 1.0 / N_BONE_PIXEL_Y;\ny = dy * ( y + 0.5 );\nvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\nvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\nvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\nvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\nmat4 bone = mat4( v1, v2, v3, v4 );\nreturn bone;\n}\n#else\nuniform mat4 boneGlobalMatrices[ MAX_BONES ];\nmat4 getBoneMatrix( const in float i ) {\nmat4 bone = boneGlobalMatrices[ int(i) ];\nreturn bone;\n}\n#endif\n#endif",
skinbase_vertex:"#ifdef USE_SKINNING\nmat4 boneMatX = getBoneMatrix( skinIndex.x );\nmat4 boneMatY = getBoneMatrix( skinIndex.y );\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n#ifdef USE_MORPHTARGETS\nvec4 skinVertex = vec4( morphed, 1.0 );\n#else\nvec4 skinVertex = vec4( position, 1.0 );\n#endif\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned \t  += boneMatY * skinVertex * skinWeight.y;\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n#ifndef USE_MORPHNORMALS\nuniform float morphTargetInfluences[ 8 ];\n#else\nuniform float morphTargetInfluences[ 4 ];\n#endif\n#endif",
morphtarget_vertex:"#ifdef USE_MORPHTARGETS\nvec3 morphed = vec3( 0.0 );\nmorphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\nmorphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\nmorphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\nmorphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n#ifndef USE_MORPHNORMALS\nmorphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\nmorphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\nmorphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\nmorphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n#endif\nmorphed += position;\n#endif",
default_vertex:"vec4 mvPosition;\n#ifdef USE_SKINNING\nmvPosition = modelViewMatrix * skinned;\n#endif\n#if !defined( USE_SKINNING ) && defined( USE_MORPHTARGETS )\nmvPosition = modelViewMatrix * vec4( morphed, 1.0 );\n#endif\n#if !defined( USE_SKINNING ) && ! defined( USE_MORPHTARGETS )\nmvPosition = modelViewMatrix * vec4( position, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\nvec3 morphedNormal = vec3( 0.0 );\nmorphedNormal +=  ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\nmorphedNormal +=  ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\nmorphedNormal +=  ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\nmorphedNormal +=  ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\nmorphedNormal += normal;\n#endif",
skinnormal_vertex:"#ifdef USE_SKINNING\nmat4 skinMatrix = skinWeight.x * boneMatX;\nskinMatrix \t+= skinWeight.y * boneMatY;\n#ifdef USE_MORPHNORMALS\nvec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );\n#else\nvec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );\n#endif\n#endif",defaultnormal_vertex:"vec3 objectNormal;\n#ifdef USE_SKINNING\nobjectNormal = skinnedNormal.xyz;\n#endif\n#if !defined( USE_SKINNING ) && defined( USE_MORPHNORMALS )\nobjectNormal = morphedNormal;\n#endif\n#if !defined( USE_SKINNING ) && ! defined( USE_MORPHNORMALS )\nobjectNormal = normal;\n#endif\n#ifdef FLIP_SIDED\nobjectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;",
shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\nuniform sampler2D shadowMap[ MAX_SHADOWS ];\nuniform vec2 shadowMapSize[ MAX_SHADOWS ];\nuniform float shadowDarkness[ MAX_SHADOWS ];\nuniform float shadowBias[ MAX_SHADOWS ];\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nfloat unpackDepth( const in vec4 rgba_depth ) {\nconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\nfloat depth = dot( rgba_depth, bit_shift );\nreturn depth;\n}\n#endif",shadowmap_fragment:"#ifdef USE_SHADOWMAP\n#ifdef SHADOWMAP_DEBUG\nvec3 frustumColors[3];\nfrustumColors[0] = vec3( 1.0, 0.5, 0.0 );\nfrustumColors[1] = vec3( 0.0, 1.0, 0.8 );\nfrustumColors[2] = vec3( 0.0, 0.5, 1.0 );\n#endif\n#ifdef SHADOWMAP_CASCADE\nint inFrustumCount = 0;\n#endif\nfloat fDepth;\nvec3 shadowColor = vec3( 1.0 );\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\nbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\nbool inFrustum = all( inFrustumVec );\n#ifdef SHADOWMAP_CASCADE\ninFrustumCount += int( inFrustum );\nbvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );\n#else\nbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n#endif\nbool frustumTest = all( frustumTestVec );\nif ( frustumTest ) {\nshadowCoord.z += shadowBias[ i ];\n#if defined( SHADOWMAP_TYPE_PCF )\nfloat shadow = 0.0;\nconst float shadowDelta = 1.0 / 9.0;\nfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\nfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\nfloat dx0 = -1.25 * xPixelOffset;\nfloat dy0 = -1.25 * yPixelOffset;\nfloat dx1 = 1.25 * xPixelOffset;\nfloat dy1 = 1.25 * yPixelOffset;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\nfloat shadow = 0.0;\nfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\nfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\nfloat dx0 = -1.0 * xPixelOffset;\nfloat dy0 = -1.0 * yPixelOffset;\nfloat dx1 = 1.0 * xPixelOffset;\nfloat dy1 = 1.0 * yPixelOffset;\nmat3 shadowKernel;\nmat3 depthKernel;\ndepthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\nif ( depthKernel[0][0] < shadowCoord.z ) shadowKernel[0][0] = 0.25;\nelse shadowKernel[0][0] = 0.0;\ndepthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\nif ( depthKernel[0][1] < shadowCoord.z ) shadowKernel[0][1] = 0.25;\nelse shadowKernel[0][1] = 0.0;\ndepthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i], shadowCoord.xy + vec2( dx0, dy1 ) ) );\nif ( depthKernel[0][2] < shadowCoord.z ) shadowKernel[0][2] = 0.25;\nelse shadowKernel[0][2] = 0.0;\ndepthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\nif ( depthKernel[1][0] < shadowCoord.z ) shadowKernel[1][0] = 0.25;\nelse shadowKernel[1][0] = 0.0;\ndepthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\nif ( depthKernel[1][1] < shadowCoord.z ) shadowKernel[1][1] = 0.25;\nelse shadowKernel[1][1] = 0.0;\ndepthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\nif ( depthKernel[1][2] < shadowCoord.z ) shadowKernel[1][2] = 0.25;\nelse shadowKernel[1][2] = 0.0;\ndepthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\nif ( depthKernel[2][0] < shadowCoord.z ) shadowKernel[2][0] = 0.25;\nelse shadowKernel[2][0] = 0.0;\ndepthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\nif ( depthKernel[2][1] < shadowCoord.z ) shadowKernel[2][1] = 0.25;\nelse shadowKernel[2][1] = 0.0;\ndepthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\nif ( depthKernel[2][2] < shadowCoord.z ) shadowKernel[2][2] = 0.25;\nelse shadowKernel[2][2] = 0.0;\nvec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );\nshadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );\nshadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );\nvec4 shadowValues;\nshadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );\nshadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );\nshadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );\nshadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );\nshadow = dot( shadowValues, vec4( 1.0 ) );\nshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n#else\nvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\nfloat fDepth = unpackDepth( rgbaDepth );\nif ( fDepth < shadowCoord.z )\nshadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\n#endif\n}\n#ifdef SHADOWMAP_DEBUG\n#ifdef SHADOWMAP_CASCADE\nif ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];\n#else\nif ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];\n#endif\n#endif\n}\n#ifdef GAMMA_OUTPUT\nshadowColor *= shadowColor;\n#endif\ngl_FragColor.xyz = gl_FragColor.xyz * shadowColor;\n#endif",
shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nuniform mat4 shadowMatrix[ MAX_SHADOWS ];\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n}\n#endif",alphatest_fragment:"#ifdef ALPHATEST\nif ( gl_FragColor.a < ALPHATEST ) discard;\n#endif",linear_to_gamma_fragment:"#ifdef GAMMA_OUTPUT\ngl_FragColor.xyz = sqrt( gl_FragColor.xyz );\n#endif"};
THREE.UniformsUtils={merge:function(a){var b,c,d,e={};for(b=0;b<a.length;b++)for(c in d=this.clone(a[b]),d)e[c]=d[c];return e},clone:function(a){var b,c,d,e={};for(b in a)for(c in e[b]={},a[b])d=a[b][c],e[b][c]=d instanceof THREE.Color||d instanceof THREE.Vector2||d instanceof THREE.Vector3||d instanceof THREE.Vector4||d instanceof THREE.Matrix4||d instanceof THREE.Texture?d.clone():d instanceof Array?d.slice():d;return e}};
THREE.UniformsLib={common:{diffuse:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},map:{type:"t",value:null},offsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)},lightMap:{type:"t",value:null},specularMap:{type:"t",value:null},envMap:{type:"t",value:null},flipEnvMap:{type:"f",value:-1},useRefract:{type:"i",value:0},reflectivity:{type:"f",value:1},refractionRatio:{type:"f",value:0.98},combine:{type:"i",value:0},morphTargetInfluences:{type:"f",value:0}},bump:{bumpMap:{type:"t",
value:null},bumpScale:{type:"f",value:1}},normalmap:{normalMap:{type:"t",value:null},normalScale:{type:"v2",value:new THREE.Vector2(1,1)}},fog:{fogDensity:{type:"f",value:2.5E-4},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},fogColor:{type:"c",value:new THREE.Color(16777215)}},lights:{ambientLightColor:{type:"fv",value:[]},directionalLightDirection:{type:"fv",value:[]},directionalLightColor:{type:"fv",value:[]},hemisphereLightDirection:{type:"fv",value:[]},hemisphereLightSkyColor:{type:"fv",
value:[]},hemisphereLightGroundColor:{type:"fv",value:[]},pointLightColor:{type:"fv",value:[]},pointLightPosition:{type:"fv",value:[]},pointLightDistance:{type:"fv1",value:[]},spotLightColor:{type:"fv",value:[]},spotLightPosition:{type:"fv",value:[]},spotLightDirection:{type:"fv",value:[]},spotLightDistance:{type:"fv1",value:[]},spotLightAngleCos:{type:"fv1",value:[]},spotLightExponent:{type:"fv1",value:[]}},particle:{psColor:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},size:{type:"f",
value:1},scale:{type:"f",value:1},map:{type:"t",value:null},fogDensity:{type:"f",value:2.5E-4},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},fogColor:{type:"c",value:new THREE.Color(16777215)}},shadowmap:{shadowMap:{type:"tv",value:[]},shadowMapSize:{type:"v2v",value:[]},shadowBias:{type:"fv1",value:[]},shadowDarkness:{type:"fv1",value:[]},shadowMatrix:{type:"m4v",value:[]}}};
THREE.ShaderLib={basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.shadowmap]),vertexShader:[THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,
THREE.ShaderChunk.skinbase_vertex,"#ifdef USE_ENVMAP",THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"#endif",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,
THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,"void main() {\ngl_FragColor = vec4( diffuse, opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,
THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},lambert:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{ambient:{type:"c",value:new THREE.Color(16777215)},emissive:{type:"c",value:new THREE.Color(0)},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\n#endif",
THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_lambert_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,
THREE.ShaderChunk.defaultnormal_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.lights_lambert_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\n#endif",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,
THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3 ( 1.0 ), opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,"#ifdef DOUBLE_SIDED\nif ( gl_FrontFacing )\ngl_FragColor.xyz *= vLightFront;\nelse\ngl_FragColor.xyz *= vLightBack;\n#else\ngl_FragColor.xyz *= vLightFront;\n#endif",THREE.ShaderChunk.lightmap_fragment,
THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},phong:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.bump,THREE.UniformsLib.normalmap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{ambient:{type:"c",value:new THREE.Color(16777215)},emissive:{type:"c",value:new THREE.Color(0)},specular:{type:"c",
value:new THREE.Color(1118481)},shininess:{type:"f",value:30},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["#define PHONG\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;",THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_phong_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,
"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"vNormal = normalize( transformedNormal );",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,"vViewPosition = -mvPosition.xyz;",THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,
THREE.ShaderChunk.lights_phong_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;\nuniform vec3 ambient;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.lights_phong_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,
THREE.ShaderChunk.bumpmap_pars_fragment,THREE.ShaderChunk.normalmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3 ( 1.0 ), opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,THREE.ShaderChunk.lights_phong_fragment,THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,
THREE.ShaderChunk.fog_fragment,"}"].join("\n")},particle_basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.particle,THREE.UniformsLib.shadowmap]),vertexShader:["uniform float size;\nuniform float scale;",THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.color_vertex,"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n#ifdef USE_SIZEATTENUATION\ngl_PointSize = size * ( scale / length( mvPosition.xyz ) );\n#else\ngl_PointSize = size;\n#endif\ngl_Position = projectionMatrix * mvPosition;",
THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 psColor;\nuniform float opacity;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_particle_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,"void main() {\ngl_FragColor = vec4( psColor, opacity );",THREE.ShaderChunk.map_particle_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.shadowmap_fragment,
THREE.ShaderChunk.fog_fragment,"}"].join("\n")},dashed:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,{scale:{type:"f",value:1},dashSize:{type:"f",value:1},totalSize:{type:"f",value:2}}]),vertexShader:["uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;",THREE.ShaderChunk.color_pars_vertex,"void main() {",THREE.ShaderChunk.color_vertex,"vLineDistance = scale * lineDistance;\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n}"].join("\n"),
fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,"void main() {\nif ( mod( vLineDistance, totalSize ) > dashSize ) {\ndiscard;\n}\ngl_FragColor = vec4( diffuse, opacity );",THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},depth:{uniforms:{mNear:{type:"f",value:1},mFar:{type:"f",value:2E3},opacity:{type:"f",
value:1}},vertexShader:"void main() {\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform float mNear;\nuniform float mFar;\nuniform float opacity;\nvoid main() {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat color = 1.0 - smoothstep( mNear, mFar, depth );\ngl_FragColor = vec4( vec3( color ), opacity );\n}"},normal:{uniforms:{opacity:{type:"f",value:1}},vertexShader:"varying vec3 vNormal;\nvoid main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\nvNormal = normalize( normalMatrix * normal );\ngl_Position = projectionMatrix * mvPosition;\n}",
fragmentShader:"uniform float opacity;\nvarying vec3 vNormal;\nvoid main() {\ngl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );\n}"},normalmap:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{enableAO:{type:"i",value:0},enableDiffuse:{type:"i",value:0},enableSpecular:{type:"i",value:0},enableReflection:{type:"i",value:0},enableDisplacement:{type:"i",value:0},tDisplacement:{type:"t",value:null},tDiffuse:{type:"t",value:null},
tCube:{type:"t",value:null},tNormal:{type:"t",value:null},tSpecular:{type:"t",value:null},tAO:{type:"t",value:null},uNormalScale:{type:"v2",value:new THREE.Vector2(1,1)},uDisplacementBias:{type:"f",value:0},uDisplacementScale:{type:"f",value:1},uDiffuseColor:{type:"c",value:new THREE.Color(16777215)},uSpecularColor:{type:"c",value:new THREE.Color(1118481)},uAmbientColor:{type:"c",value:new THREE.Color(16777215)},uShininess:{type:"f",value:30},uOpacity:{type:"f",value:1},useRefract:{type:"i",value:0},
uRefractionRatio:{type:"f",value:0.98},uReflectivity:{type:"f",value:0.5},uOffset:{type:"v2",value:new THREE.Vector2(0,0)},uRepeat:{type:"v2",value:new THREE.Vector2(1,1)},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),fragmentShader:["uniform vec3 uAmbientColor;\nuniform vec3 uDiffuseColor;\nuniform vec3 uSpecularColor;\nuniform float uShininess;\nuniform float uOpacity;\nuniform bool enableDiffuse;\nuniform bool enableSpecular;\nuniform bool enableAO;\nuniform bool enableReflection;\nuniform sampler2D tDiffuse;\nuniform sampler2D tNormal;\nuniform sampler2D tSpecular;\nuniform sampler2D tAO;\nuniform samplerCube tCube;\nuniform vec2 uNormalScale;\nuniform bool useRefract;\nuniform float uRefractionRatio;\nuniform float uReflectivity;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS > 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vWorldPosition;\nvarying vec3 vViewPosition;",
THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3( 1.0 ), uOpacity );\nvec3 specularTex = vec3( 1.0 );\nvec3 normalTex = texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;\nnormalTex.xy *= uNormalScale;\nnormalTex = normalize( normalTex );\nif( enableDiffuse ) {\n#ifdef GAMMA_INPUT\nvec4 texelColor = texture2D( tDiffuse, vUv );\ntexelColor.xyz *= texelColor.xyz;\ngl_FragColor = gl_FragColor * texelColor;\n#else\ngl_FragColor = gl_FragColor * texture2D( tDiffuse, vUv );\n#endif\n}\nif( enableAO ) {\n#ifdef GAMMA_INPUT\nvec4 aoColor = texture2D( tAO, vUv );\naoColor.xyz *= aoColor.xyz;\ngl_FragColor.xyz = gl_FragColor.xyz * aoColor.xyz;\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * texture2D( tAO, vUv ).xyz;\n#endif\n}\nif( enableSpecular )\nspecularTex = texture2D( tSpecular, vUv ).xyz;\nmat3 tsb = mat3( normalize( vTangent ), normalize( vBinormal ), normalize( vNormal ) );\nvec3 finalNormal = tsb * normalTex;\n#ifdef FLIP_SIDED\nfinalNormal = -finalNormal;\n#endif\nvec3 normal = normalize( finalNormal );\nvec3 viewPosition = normalize( vViewPosition );\n#if MAX_POINT_LIGHTS > 0\nvec3 pointDiffuse = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 pointVector = lPosition.xyz + vViewPosition.xyz;\nfloat pointDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\npointDistance = 1.0 - min( ( length( pointVector ) / pointLightDistance[ i ] ), 1.0 );\npointVector = normalize( pointVector );\n#ifdef WRAP_AROUND\nfloat pointDiffuseWeightFull = max( dot( normal, pointVector ), 0.0 );\nfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, pointVector ) + 0.5, 0.0 );\nvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n#else\nfloat pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );\n#endif\npointDiffuse += pointDistance * pointLightColor[ i ] * uDiffuseColor * pointDiffuseWeight;\nvec3 pointHalfVector = normalize( pointVector + viewPosition );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( pointVector, pointHalfVector ), 5.0 );\npointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * pointDistance * specularNormalization;\n#else\npointSpecular += pointDistance * pointLightColor[ i ] * uSpecularColor * pointSpecularWeight * pointDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nvec3 spotDiffuse = vec3( 0.0 );\nvec3 spotSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 spotVector = lPosition.xyz + vViewPosition.xyz;\nfloat spotDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nspotDistance = 1.0 - min( ( length( spotVector ) / spotLightDistance[ i ] ), 1.0 );\nspotVector = normalize( spotVector );\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\nif ( spotEffect > spotLightAngleCos[ i ] ) {\nspotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\n#ifdef WRAP_AROUND\nfloat spotDiffuseWeightFull = max( dot( normal, spotVector ), 0.0 );\nfloat spotDiffuseWeightHalf = max( 0.5 * dot( normal, spotVector ) + 0.5, 0.0 );\nvec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n#else\nfloat spotDiffuseWeight = max( dot( normal, spotVector ), 0.0 );\n#endif\nspotDiffuse += spotDistance * spotLightColor[ i ] * uDiffuseColor * spotDiffuseWeight * spotEffect;\nvec3 spotHalfVector = normalize( spotVector + viewPosition );\nfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\nfloat spotSpecularWeight = specularTex.r * max( pow( spotDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( spotVector, spotHalfVector ), 5.0 );\nspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * spotDistance * specularNormalization * spotEffect;\n#else\nspotSpecular += spotDistance * spotLightColor[ i ] * uSpecularColor * spotSpecularWeight * spotDiffuseWeight * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_DIR_LIGHTS > 0\nvec3 dirDiffuse = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\n#ifdef WRAP_AROUND\nfloat directionalLightWeightingFull = max( dot( normal, dirVector ), 0.0 );\nfloat directionalLightWeightingHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( directionalLightWeightingFull ), vec3( directionalLightWeightingHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\n#endif\ndirDiffuse += directionalLightColor[ i ] * uDiffuseColor * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewPosition );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\ndirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n#else\ndirSpecular += directionalLightColor[ i ] * uSpecularColor * dirSpecularWeight * dirDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_HEMI_LIGHTS > 0\nvec3 hemiDiffuse  = vec3( 0.0 );\nvec3 hemiSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\nhemiDiffuse += uDiffuseColor * hemiColor;\nvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\nfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\nfloat hemiSpecularWeightSky = specularTex.r * max( pow( hemiDotNormalHalfSky, uShininess ), 0.0 );\nvec3 lVectorGround = -lVector;\nvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\nfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\nfloat hemiSpecularWeightGround = specularTex.r * max( pow( hemiDotNormalHalfGround, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat dotProductGround = dot( normal, lVectorGround );\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlickSky = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );\nvec3 schlickGround = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );\nhemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n#else\nhemiSpecular += uSpecularColor * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;\n#endif\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS > 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_HEMI_LIGHTS > 0\ntotalDiffuse += hemiDiffuse;\ntotalSpecular += hemiSpecular;\n#endif\n#if MAX_POINT_LIGHTS > 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\n#if MAX_SPOT_LIGHTS > 0\ntotalDiffuse += spotDiffuse;\ntotalSpecular += spotSpecular;\n#endif\n#ifdef METAL\ngl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor + totalSpecular );\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor ) + totalSpecular;\n#endif\nif ( enableReflection ) {\nvec3 vReflect;\nvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\nif ( useRefract ) {\nvReflect = refract( cameraToVertex, normal, uRefractionRatio );\n} else {\nvReflect = reflect( cameraToVertex, normal );\n}\nvec4 cubeColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\n#ifdef GAMMA_INPUT\ncubeColor.xyz *= cubeColor.xyz;\n#endif\ngl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularTex.r * uReflectivity );\n}",
THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n"),vertexShader:["attribute vec4 tangent;\nuniform vec2 uOffset;\nuniform vec2 uRepeat;\nuniform bool enableDisplacement;\n#ifdef VERTEX_TEXTURES\nuniform sampler2D tDisplacement;\nuniform float uDisplacementScale;\nuniform float uDisplacementBias;\n#endif\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec3 vWorldPosition;\nvarying vec3 vViewPosition;",
THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,"#ifdef USE_SKINNING\nvNormal = normalize( normalMatrix * skinnedNormal.xyz );\nvec4 skinnedTangent = skinMatrix * vec4( tangent.xyz, 0.0 );\nvTangent = normalize( normalMatrix * skinnedTangent.xyz );\n#else\nvNormal = normalize( normalMatrix * normal );\nvTangent = normalize( normalMatrix * tangent.xyz );\n#endif\nvBinormal = normalize( cross( vNormal, vTangent ) * tangent.w );\nvUv = uv * uRepeat + uOffset;\nvec3 displacedPosition;\n#ifdef VERTEX_TEXTURES\nif ( enableDisplacement ) {\nvec3 dv = texture2D( tDisplacement, uv ).xyz;\nfloat df = uDisplacementScale * dv.x + uDisplacementBias;\ndisplacedPosition = position + normalize( normal ) * df;\n} else {\n#ifdef USE_SKINNING\nvec4 skinVertex = vec4( position, 1.0 );\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned \t  += boneMatY * skinVertex * skinWeight.y;\ndisplacedPosition  = skinned.xyz;\n#else\ndisplacedPosition = position;\n#endif\n}\n#else\n#ifdef USE_SKINNING\nvec4 skinVertex = vec4( position, 1.0 );\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned \t  += boneMatY * skinVertex * skinWeight.y;\ndisplacedPosition  = skinned.xyz;\n#else\ndisplacedPosition = position;\n#endif\n#endif\nvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\nvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\nvWorldPosition = worldPosition.xyz;\nvViewPosition = -mvPosition.xyz;\n#ifdef USE_SHADOWMAP\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n}\n#endif\n}"].join("\n")},
cube:{uniforms:{tCube:{type:"t",value:null},tFlip:{type:"f",value:-1}},vertexShader:"varying vec3 vWorldPosition;\nvoid main() {\nvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\nvWorldPosition = worldPosition.xyz;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform samplerCube tCube;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\nvoid main() {\ngl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n}"},
depthRGBA:{uniforms:{},vertexShader:[THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,"void main() {",THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,"}"].join("\n"),fragmentShader:"vec4 pack_depth( const in float depth ) {\nconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\nconst vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\nvec4 res = fract( depth * bit_shift );\nres -= res.xxyz * bit_mask;\nreturn res;\n}\nvoid main() {\ngl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\n}"}};THREE.WebGLRenderer=function(a){function b(a){if(a.__webglCustomAttributesList)for(var b in a.__webglCustomAttributesList)f.deleteBuffer(a.__webglCustomAttributesList[b].buffer)}function c(a,b){var c=a.vertices.length,d=b.material;if(d.attributes){void 0===a.__webglCustomAttributesList&&(a.__webglCustomAttributesList=[]);for(var e in d.attributes){var g=d.attributes[e];if(!g.__webglInitialized||g.createUniqueBuffers){g.__webglInitialized=!0;var h=1;"v2"===g.type?h=2:"v3"===g.type?h=3:"v4"===g.type?
h=4:"c"===g.type&&(h=3);g.size=h;g.array=new Float32Array(c*h);g.buffer=f.createBuffer();g.buffer.belongsToAttribute=e;g.needsUpdate=!0}a.__webglCustomAttributesList.push(g)}}}function d(a,b){var c=b.geometry,d=a.faces3,i=a.faces4,j=3*d.length+4*i.length,k=1*d.length+2*i.length,i=3*d.length+4*i.length,d=e(b,a),p=h(d),l=g(d),m=d.vertexColors?d.vertexColors:!1;a.__vertexArray=new Float32Array(3*j);l&&(a.__normalArray=new Float32Array(3*j));c.hasTangents&&(a.__tangentArray=new Float32Array(4*j));m&&
(a.__colorArray=new Float32Array(3*j));if(p){if(0<c.faceUvs.length||0<c.faceVertexUvs.length)a.__uvArray=new Float32Array(2*j);if(1<c.faceUvs.length||1<c.faceVertexUvs.length)a.__uv2Array=new Float32Array(2*j)}b.geometry.skinWeights.length&&b.geometry.skinIndices.length&&(a.__skinIndexArray=new Float32Array(4*j),a.__skinWeightArray=new Float32Array(4*j));a.__faceArray=new Uint16Array(3*k);a.__lineArray=new Uint16Array(2*i);if(a.numMorphTargets){a.__morphTargetsArrays=[];c=0;for(p=a.numMorphTargets;c<
p;c++)a.__morphTargetsArrays.push(new Float32Array(3*j))}if(a.numMorphNormals){a.__morphNormalsArrays=[];c=0;for(p=a.numMorphNormals;c<p;c++)a.__morphNormalsArrays.push(new Float32Array(3*j))}a.__webglFaceCount=3*k;a.__webglLineCount=2*i;if(d.attributes){void 0===a.__webglCustomAttributesList&&(a.__webglCustomAttributesList=[]);for(var n in d.attributes){var k=d.attributes[n],c={},t;for(t in k)c[t]=k[t];if(!c.__webglInitialized||c.createUniqueBuffers)c.__webglInitialized=!0,i=1,"v2"===c.type?i=2:
"v3"===c.type?i=3:"v4"===c.type?i=4:"c"===c.type&&(i=3),c.size=i,c.array=new Float32Array(j*i),c.buffer=f.createBuffer(),c.buffer.belongsToAttribute=n,k.needsUpdate=!0,c.__original=k;a.__webglCustomAttributesList.push(c)}}a.__inittedArrays=!0}function e(a,b){return a.material instanceof THREE.MeshFaceMaterial?a.material.materials[b.materialIndex]:a.material}function g(a){return a instanceof THREE.MeshBasicMaterial&&!a.envMap||a instanceof THREE.MeshDepthMaterial?!1:a&&void 0!==a.shading&&a.shading===
THREE.SmoothShading?THREE.SmoothShading:THREE.FlatShading}function h(a){return a.map||a.lightMap||a.bumpMap||a.normalMap||a.specularMap||a instanceof THREE.ShaderMaterial?!0:!1}function j(a){var b,c,d;for(b in a.attributes)d="index"===b?f.ELEMENT_ARRAY_BUFFER:f.ARRAY_BUFFER,c=a.attributes[b],c.buffer=f.createBuffer(),f.bindBuffer(d,c.buffer),f.bufferData(d,c.array,f.STATIC_DRAW)}function i(a,b,c){var d=a.attributes,e=d.index,g=d.position,h=d.normal,i=d.uv,j=d.color,d=d.tangent;a.elementsNeedUpdate&&
void 0!==e&&(f.bindBuffer(f.ELEMENT_ARRAY_BUFFER,e.buffer),f.bufferData(f.ELEMENT_ARRAY_BUFFER,e.array,b));a.verticesNeedUpdate&&void 0!==g&&(f.bindBuffer(f.ARRAY_BUFFER,g.buffer),f.bufferData(f.ARRAY_BUFFER,g.array,b));a.normalsNeedUpdate&&void 0!==h&&(f.bindBuffer(f.ARRAY_BUFFER,h.buffer),f.bufferData(f.ARRAY_BUFFER,h.array,b));a.uvsNeedUpdate&&void 0!==i&&(f.bindBuffer(f.ARRAY_BUFFER,i.buffer),f.bufferData(f.ARRAY_BUFFER,i.array,b));a.colorsNeedUpdate&&void 0!==j&&(f.bindBuffer(f.ARRAY_BUFFER,
j.buffer),f.bufferData(f.ARRAY_BUFFER,j.array,b));a.tangentsNeedUpdate&&void 0!==d&&(f.bindBuffer(f.ARRAY_BUFFER,d.buffer),f.bufferData(f.ARRAY_BUFFER,d.array,b));if(c)for(var k in a.attributes)delete a.attributes[k].array}function k(a){qb[a]||(f.enableVertexAttribArray(a),qb[a]=!0)}function n(){for(var a in qb)qb[a]&&(f.disableVertexAttribArray(a),qb[a]=!1)}function p(a,b){return a.z!==b.z?b.z-a.z:b.id-a.id}function t(a,b){return b[0]-a[0]}function u(a,b,c){if(a.length)for(var d=0,e=a.length;d<e;d++)qa=
ub=null,pa=ha=za=ga=mb=ja=ia=-1,Rb=!0,a[d].render(b,c,Oc,xc),qa=ub=null,pa=ha=za=ga=mb=ja=ia=-1,Rb=!0}function v(a,b,c,d,e,f,g,h){var i,j,k,p;b?(j=a.length-1,p=b=-1):(j=0,b=a.length,p=1);for(var l=j;l!==b;l+=p)if(i=a[l],i.render){j=i.object;k=i.buffer;if(h)i=h;else{i=i[c];if(!i)continue;g&&M.setBlending(i.blending,i.blendEquation,i.blendSrc,i.blendDst);M.setDepthTest(i.depthTest);M.setDepthWrite(i.depthWrite);F(i.polygonOffset,i.polygonOffsetFactor,i.polygonOffsetUnits)}M.setMaterialFaces(i);k instanceof
THREE.BufferGeometry?M.renderBufferDirect(d,e,f,i,k,j):M.renderBuffer(d,e,f,i,k,j)}}function m(a,b,c,d,e,f,g){for(var h,i,j=0,k=a.length;j<k;j++)if(h=a[j],i=h.object,i.visible){if(g)h=g;else{h=h[b];if(!h)continue;f&&M.setBlending(h.blending,h.blendEquation,h.blendSrc,h.blendDst);M.setDepthTest(h.depthTest);M.setDepthWrite(h.depthWrite);F(h.polygonOffset,h.polygonOffsetFactor,h.polygonOffsetUnits)}M.renderImmediateObject(c,d,e,h,i)}}function l(a,b,c){a.push({buffer:b,object:c,opaque:null,transparent:null})}
function y(a){for(var b in a.attributes)if(a.attributes[b].needsUpdate)return!0;return!1}function x(a){for(var b in a.attributes)a.attributes[b].needsUpdate=!1}function A(a,b){for(var c=a.length-1;0<=c;c--)a[c].object===b&&a.splice(c,1)}function s(a,b){for(var c=a.length-1;0<=c;c--)a[c]===b&&a.splice(c,1)}function C(a,b,c,d,e){Z=0;d.needsUpdate&&(d.program&&yc(d),M.initMaterial(d,b,c,e),d.needsUpdate=!1);d.morphTargets&&!e.__webglMorphTargetInfluences&&(e.__webglMorphTargetInfluences=new Float32Array(M.maxMorphTargets));
var g=!1,h=d.program,i=h.uniforms,j=d.uniforms;h!==ub&&(f.useProgram(h),ub=h,g=!0);d.id!==pa&&(pa=d.id,g=!0);if(g||a!==qa)f.uniformMatrix4fv(i.projectionMatrix,!1,a.projectionMatrix.elements),a!==qa&&(qa=a);if(d.skinning)if(nc&&e.useVertexTexture){if(null!==i.boneTexture){var k=I();f.uniform1i(i.boneTexture,k);M.setTexture(e.boneTexture,k)}}else null!==i.boneGlobalMatrices&&f.uniformMatrix4fv(i.boneGlobalMatrices,!1,e.boneMatrices);if(g){c&&d.fog&&(j.fogColor.value=c.color,c instanceof THREE.Fog?
(j.fogNear.value=c.near,j.fogFar.value=c.far):c instanceof THREE.FogExp2&&(j.fogDensity.value=c.density));if(d instanceof THREE.MeshPhongMaterial||d instanceof THREE.MeshLambertMaterial||d.lights){if(Rb){for(var p,l=k=0,m=0,n,t,s,u=zc,v=u.directional.colors,x=u.directional.positions,y=u.point.colors,A=u.point.positions,B=u.point.distances,D=u.spot.colors,C=u.spot.positions,E=u.spot.distances,F=u.spot.directions,N=u.spot.anglesCos,Q=u.spot.exponents,X=u.hemi.skyColors,ga=u.hemi.groundColors,ia=u.hemi.positions,
ja=0,fa=0,ba=0,ha=0,za=0,Da=0,Fa=0,Ta=0,G=p=0,c=s=G=0,g=b.length;c<g;c++)p=b[c],p.onlyShadow||(n=p.color,t=p.intensity,s=p.distance,p instanceof THREE.AmbientLight?p.visible&&(M.gammaInput?(k+=n.r*n.r,l+=n.g*n.g,m+=n.b*n.b):(k+=n.r,l+=n.g,m+=n.b)):p instanceof THREE.DirectionalLight?(za+=1,p.visible&&(ra.getPositionFromMatrix(p.matrixWorld),Ga.getPositionFromMatrix(p.target.matrixWorld),ra.sub(Ga),ra.normalize(),0===ra.x&&0===ra.y&&0===ra.z||(p=3*ja,x[p]=ra.x,x[p+1]=ra.y,x[p+2]=ra.z,M.gammaInput?
w(v,p,n,t*t):P(v,p,n,t),ja+=1))):p instanceof THREE.PointLight?(Da+=1,p.visible&&(G=3*fa,M.gammaInput?w(y,G,n,t*t):P(y,G,n,t),Ga.getPositionFromMatrix(p.matrixWorld),A[G]=Ga.x,A[G+1]=Ga.y,A[G+2]=Ga.z,B[fa]=s,fa+=1)):p instanceof THREE.SpotLight?(Fa+=1,p.visible&&(G=3*ba,M.gammaInput?w(D,G,n,t*t):P(D,G,n,t),Ga.getPositionFromMatrix(p.matrixWorld),C[G]=Ga.x,C[G+1]=Ga.y,C[G+2]=Ga.z,E[ba]=s,ra.copy(Ga),Ga.getPositionFromMatrix(p.target.matrixWorld),ra.sub(Ga),ra.normalize(),F[G]=ra.x,F[G+1]=ra.y,F[G+
2]=ra.z,N[ba]=Math.cos(p.angle),Q[ba]=p.exponent,ba+=1)):p instanceof THREE.HemisphereLight&&(Ta+=1,p.visible&&(ra.getPositionFromMatrix(p.matrixWorld),ra.normalize(),0===ra.x&&0===ra.y&&0===ra.z||(s=3*ha,ia[s]=ra.x,ia[s+1]=ra.y,ia[s+2]=ra.z,n=p.color,p=p.groundColor,M.gammaInput?(t*=t,w(X,s,n,t),w(ga,s,p,t)):(P(X,s,n,t),P(ga,s,p,t)),ha+=1))));c=3*ja;for(g=Math.max(v.length,3*za);c<g;c++)v[c]=0;c=3*fa;for(g=Math.max(y.length,3*Da);c<g;c++)y[c]=0;c=3*ba;for(g=Math.max(D.length,3*Fa);c<g;c++)D[c]=0;
c=3*ha;for(g=Math.max(X.length,3*Ta);c<g;c++)X[c]=0;c=3*ha;for(g=Math.max(ga.length,3*Ta);c<g;c++)ga[c]=0;u.directional.length=ja;u.point.length=fa;u.spot.length=ba;u.hemi.length=ha;u.ambient[0]=k;u.ambient[1]=l;u.ambient[2]=m;Rb=!1}c=zc;j.ambientLightColor.value=c.ambient;j.directionalLightColor.value=c.directional.colors;j.directionalLightDirection.value=c.directional.positions;j.pointLightColor.value=c.point.colors;j.pointLightPosition.value=c.point.positions;j.pointLightDistance.value=c.point.distances;
j.spotLightColor.value=c.spot.colors;j.spotLightPosition.value=c.spot.positions;j.spotLightDistance.value=c.spot.distances;j.spotLightDirection.value=c.spot.directions;j.spotLightAngleCos.value=c.spot.anglesCos;j.spotLightExponent.value=c.spot.exponents;j.hemisphereLightSkyColor.value=c.hemi.skyColors;j.hemisphereLightGroundColor.value=c.hemi.groundColors;j.hemisphereLightDirection.value=c.hemi.positions}if(d instanceof THREE.MeshBasicMaterial||d instanceof THREE.MeshLambertMaterial||d instanceof
THREE.MeshPhongMaterial){j.opacity.value=d.opacity;M.gammaInput?j.diffuse.value.copyGammaToLinear(d.color):j.diffuse.value=d.color;j.map.value=d.map;j.lightMap.value=d.lightMap;j.specularMap.value=d.specularMap;d.bumpMap&&(j.bumpMap.value=d.bumpMap,j.bumpScale.value=d.bumpScale);d.normalMap&&(j.normalMap.value=d.normalMap,j.normalScale.value.copy(d.normalScale));var Ea;d.map?Ea=d.map:d.specularMap?Ea=d.specularMap:d.normalMap?Ea=d.normalMap:d.bumpMap&&(Ea=d.bumpMap);void 0!==Ea&&(c=Ea.offset,Ea=Ea.repeat,
j.offsetRepeat.value.set(c.x,c.y,Ea.x,Ea.y));j.envMap.value=d.envMap;j.flipEnvMap.value=d.envMap instanceof THREE.WebGLRenderTargetCube?1:-1;j.reflectivity.value=d.reflectivity;j.refractionRatio.value=d.refractionRatio;j.combine.value=d.combine;j.useRefract.value=d.envMap&&d.envMap.mapping instanceof THREE.CubeRefractionMapping}d instanceof THREE.LineBasicMaterial?(j.diffuse.value=d.color,j.opacity.value=d.opacity):d instanceof THREE.LineDashedMaterial?(j.diffuse.value=d.color,j.opacity.value=d.opacity,
j.dashSize.value=d.dashSize,j.totalSize.value=d.dashSize+d.gapSize,j.scale.value=d.scale):d instanceof THREE.ParticleBasicMaterial?(j.psColor.value=d.color,j.opacity.value=d.opacity,j.size.value=d.size,j.scale.value=ya.height/2,j.map.value=d.map):d instanceof THREE.MeshPhongMaterial?(j.shininess.value=d.shininess,M.gammaInput?(j.ambient.value.copyGammaToLinear(d.ambient),j.emissive.value.copyGammaToLinear(d.emissive),j.specular.value.copyGammaToLinear(d.specular)):(j.ambient.value=d.ambient,j.emissive.value=
d.emissive,j.specular.value=d.specular),d.wrapAround&&j.wrapRGB.value.copy(d.wrapRGB)):d instanceof THREE.MeshLambertMaterial?(M.gammaInput?(j.ambient.value.copyGammaToLinear(d.ambient),j.emissive.value.copyGammaToLinear(d.emissive)):(j.ambient.value=d.ambient,j.emissive.value=d.emissive),d.wrapAround&&j.wrapRGB.value.copy(d.wrapRGB)):d instanceof THREE.MeshDepthMaterial?(j.mNear.value=a.near,j.mFar.value=a.far,j.opacity.value=d.opacity):d instanceof THREE.MeshNormalMaterial&&(j.opacity.value=d.opacity);
if(e.receiveShadow&&!d._shadowPass&&j.shadowMatrix){c=Ea=0;for(g=b.length;c<g;c++)if(k=b[c],k.castShadow&&(k instanceof THREE.SpotLight||k instanceof THREE.DirectionalLight&&!k.shadowCascade))j.shadowMap.value[Ea]=k.shadowMap,j.shadowMapSize.value[Ea]=k.shadowMapSize,j.shadowMatrix.value[Ea]=k.shadowMatrix,j.shadowDarkness.value[Ea]=k.shadowDarkness,j.shadowBias.value[Ea]=k.shadowBias,Ea++}b=d.uniformsList;j=0;for(Ea=b.length;j<Ea;j++)if(g=h.uniforms[b[j][1]])if(c=b[j][0],l=c.type,k=c.value,"i"===
l)f.uniform1i(g,k);else if("f"===l)f.uniform1f(g,k);else if("v2"===l)f.uniform2f(g,k.x,k.y);else if("v3"===l)f.uniform3f(g,k.x,k.y,k.z);else if("v4"===l)f.uniform4f(g,k.x,k.y,k.z,k.w);else if("c"===l)f.uniform3f(g,k.r,k.g,k.b);else if("iv1"===l)f.uniform1iv(g,k);else if("iv"===l)f.uniform3iv(g,k);else if("fv1"===l)f.uniform1fv(g,k);else if("fv"===l)f.uniform3fv(g,k);else if("v2v"===l){void 0===c._array&&(c._array=new Float32Array(2*k.length));l=0;for(m=k.length;l<m;l++)u=2*l,c._array[u]=k[l].x,c._array[u+
1]=k[l].y;f.uniform2fv(g,c._array)}else if("v3v"===l){void 0===c._array&&(c._array=new Float32Array(3*k.length));l=0;for(m=k.length;l<m;l++)u=3*l,c._array[u]=k[l].x,c._array[u+1]=k[l].y,c._array[u+2]=k[l].z;f.uniform3fv(g,c._array)}else if("v4v"===l){void 0===c._array&&(c._array=new Float32Array(4*k.length));l=0;for(m=k.length;l<m;l++)u=4*l,c._array[u]=k[l].x,c._array[u+1]=k[l].y,c._array[u+2]=k[l].z,c._array[u+3]=k[l].w;f.uniform4fv(g,c._array)}else if("m4"===l)void 0===c._array&&(c._array=new Float32Array(16)),
k.flattenToArray(c._array),f.uniformMatrix4fv(g,!1,c._array);else if("m4v"===l){void 0===c._array&&(c._array=new Float32Array(16*k.length));l=0;for(m=k.length;l<m;l++)k[l].flattenToArrayOffset(c._array,16*l);f.uniformMatrix4fv(g,!1,c._array)}else if("t"===l){if(u=k,k=I(),f.uniform1i(g,k),u)if(u.image instanceof Array&&6===u.image.length){if(c=u,g=k,6===c.image.length)if(c.needsUpdate){c.image.__webglTextureCube||(c.image.__webglTextureCube=f.createTexture(),M.info.memory.textures++);f.activeTexture(f.TEXTURE0+
g);f.bindTexture(f.TEXTURE_CUBE_MAP,c.image.__webglTextureCube);f.pixelStorei(f.UNPACK_FLIP_Y_WEBGL,c.flipY);g=c instanceof THREE.CompressedTexture;k=[];for(l=0;6>l;l++)m=k,u=l,M.autoScaleCubemaps&&!g?(v=c.image[l],y=ld,v.width<=y&&v.height<=y||(A=Math.max(v.width,v.height),x=Math.floor(v.width*y/A),y=Math.floor(v.height*y/A),A=document.createElement("canvas"),A.width=x,A.height=y,A.getContext("2d").drawImage(v,0,0,v.width,v.height,0,0,x,y),v=A)):v=c.image[l],m[u]=v;l=k[0];m=0===(l.width&l.width-
1)&&0===(l.height&l.height-1);u=R(c.format);v=R(c.type);W(f.TEXTURE_CUBE_MAP,c,m);for(l=0;6>l;l++)if(g){y=k[l].mipmaps;A=0;for(B=y.length;A<B;A++)x=y[A],f.compressedTexImage2D(f.TEXTURE_CUBE_MAP_POSITIVE_X+l,A,u,x.width,x.height,0,x.data)}else f.texImage2D(f.TEXTURE_CUBE_MAP_POSITIVE_X+l,0,u,u,v,k[l]);c.generateMipmaps&&m&&f.generateMipmap(f.TEXTURE_CUBE_MAP);c.needsUpdate=!1;if(c.onUpdate)c.onUpdate()}else f.activeTexture(f.TEXTURE0+g),f.bindTexture(f.TEXTURE_CUBE_MAP,c.image.__webglTextureCube)}else u instanceof
THREE.WebGLRenderTargetCube?(c=u,f.activeTexture(f.TEXTURE0+k),f.bindTexture(f.TEXTURE_CUBE_MAP,c.__webglTexture)):M.setTexture(u,k)}else if("tv"===l){void 0===c._array&&(c._array=[]);l=0;for(m=c.value.length;l<m;l++)c._array[l]=I();f.uniform1iv(g,c._array);l=0;for(m=c.value.length;l<m;l++)u=c.value[l],k=c._array[l],u&&M.setTexture(u,k)}if((d instanceof THREE.ShaderMaterial||d instanceof THREE.MeshPhongMaterial||d.envMap)&&null!==i.cameraPosition)Ga.getPositionFromMatrix(a.matrixWorld),f.uniform3f(i.cameraPosition,
Ga.x,Ga.y,Ga.z);(d instanceof THREE.MeshPhongMaterial||d instanceof THREE.MeshLambertMaterial||d instanceof THREE.ShaderMaterial||d.skinning)&&null!==i.viewMatrix&&f.uniformMatrix4fv(i.viewMatrix,!1,a.matrixWorldInverse.elements)}f.uniformMatrix4fv(i.modelViewMatrix,!1,e._modelViewMatrix.elements);i.normalMatrix&&f.uniformMatrix3fv(i.normalMatrix,!1,e._normalMatrix.elements);null!==i.modelMatrix&&f.uniformMatrix4fv(i.modelMatrix,!1,e.matrixWorld.elements);return h}function I(){var a=Z;a>=Ac&&console.warn("WebGLRenderer: trying to use "+
a+" texture units while this GPU supports only "+Ac);Z+=1;return a}function D(a,b){a._modelViewMatrix.multiplyMatrices(b.matrixWorldInverse,a.matrixWorld);a._normalMatrix.getInverse(a._modelViewMatrix);a._normalMatrix.transpose()}function w(a,b,c,d){a[b]=c.r*c.r*d;a[b+1]=c.g*c.g*d;a[b+2]=c.b*c.b*d}function P(a,b,c,d){a[b]=c.r*d;a[b+1]=c.g*d;a[b+2]=c.b*d}function N(a){a!==pb&&(f.lineWidth(a),pb=a)}function F(a,b,c){nb!==a&&(a?f.enable(f.POLYGON_OFFSET_FILL):f.disable(f.POLYGON_OFFSET_FILL),nb=a);if(a&&
(ob!==b||wb!==c))f.polygonOffset(b,c),ob=b,wb=c}function X(a){for(var a=a.split("\n"),b=0,c=a.length;b<c;b++)a[b]=b+1+": "+a[b];return a.join("\n")}function B(a,b){var c;"fragment"===a?c=f.createShader(f.FRAGMENT_SHADER):"vertex"===a&&(c=f.createShader(f.VERTEX_SHADER));f.shaderSource(c,b);f.compileShader(c);return!f.getShaderParameter(c,f.COMPILE_STATUS)?(console.error(f.getShaderInfoLog(c)),console.error(X(b)),null):c}function W(a,b,c){c?(f.texParameteri(a,f.TEXTURE_WRAP_S,R(b.wrapS)),f.texParameteri(a,
f.TEXTURE_WRAP_T,R(b.wrapT)),f.texParameteri(a,f.TEXTURE_MAG_FILTER,R(b.magFilter)),f.texParameteri(a,f.TEXTURE_MIN_FILTER,R(b.minFilter))):(f.texParameteri(a,f.TEXTURE_WRAP_S,f.CLAMP_TO_EDGE),f.texParameteri(a,f.TEXTURE_WRAP_T,f.CLAMP_TO_EDGE),f.texParameteri(a,f.TEXTURE_MAG_FILTER,Q(b.magFilter)),f.texParameteri(a,f.TEXTURE_MIN_FILTER,Q(b.minFilter)));if(rb&&b.type!==THREE.FloatType&&(1<b.anisotropy||b.__oldAnisotropy))f.texParameterf(a,rb.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(b.anisotropy,Pc)),b.__oldAnisotropy=
b.anisotropy}function E(a,b){f.bindRenderbuffer(f.RENDERBUFFER,a);b.depthBuffer&&!b.stencilBuffer?(f.renderbufferStorage(f.RENDERBUFFER,f.DEPTH_COMPONENT16,b.width,b.height),f.framebufferRenderbuffer(f.FRAMEBUFFER,f.DEPTH_ATTACHMENT,f.RENDERBUFFER,a)):b.depthBuffer&&b.stencilBuffer?(f.renderbufferStorage(f.RENDERBUFFER,f.DEPTH_STENCIL,b.width,b.height),f.framebufferRenderbuffer(f.FRAMEBUFFER,f.DEPTH_STENCIL_ATTACHMENT,f.RENDERBUFFER,a)):f.renderbufferStorage(f.RENDERBUFFER,f.RGBA4,b.width,b.height)}
function Q(a){return a===THREE.NearestFilter||a===THREE.NearestMipMapNearestFilter||a===THREE.NearestMipMapLinearFilter?f.NEAREST:f.LINEAR}function R(a){if(a===THREE.RepeatWrapping)return f.REPEAT;if(a===THREE.ClampToEdgeWrapping)return f.CLAMP_TO_EDGE;if(a===THREE.MirroredRepeatWrapping)return f.MIRRORED_REPEAT;if(a===THREE.NearestFilter)return f.NEAREST;if(a===THREE.NearestMipMapNearestFilter)return f.NEAREST_MIPMAP_NEAREST;if(a===THREE.NearestMipMapLinearFilter)return f.NEAREST_MIPMAP_LINEAR;if(a===
THREE.LinearFilter)return f.LINEAR;if(a===THREE.LinearMipMapNearestFilter)return f.LINEAR_MIPMAP_NEAREST;if(a===THREE.LinearMipMapLinearFilter)return f.LINEAR_MIPMAP_LINEAR;if(a===THREE.UnsignedByteType)return f.UNSIGNED_BYTE;if(a===THREE.UnsignedShort4444Type)return f.UNSIGNED_SHORT_4_4_4_4;if(a===THREE.UnsignedShort5551Type)return f.UNSIGNED_SHORT_5_5_5_1;if(a===THREE.UnsignedShort565Type)return f.UNSIGNED_SHORT_5_6_5;if(a===THREE.ByteType)return f.BYTE;if(a===THREE.ShortType)return f.SHORT;if(a===
THREE.UnsignedShortType)return f.UNSIGNED_SHORT;if(a===THREE.IntType)return f.INT;if(a===THREE.UnsignedIntType)return f.UNSIGNED_INT;if(a===THREE.FloatType)return f.FLOAT;if(a===THREE.AlphaFormat)return f.ALPHA;if(a===THREE.RGBFormat)return f.RGB;if(a===THREE.RGBAFormat)return f.RGBA;if(a===THREE.LuminanceFormat)return f.LUMINANCE;if(a===THREE.LuminanceAlphaFormat)return f.LUMINANCE_ALPHA;if(a===THREE.AddEquation)return f.FUNC_ADD;if(a===THREE.SubtractEquation)return f.FUNC_SUBTRACT;if(a===THREE.ReverseSubtractEquation)return f.FUNC_REVERSE_SUBTRACT;
if(a===THREE.ZeroFactor)return f.ZERO;if(a===THREE.OneFactor)return f.ONE;if(a===THREE.SrcColorFactor)return f.SRC_COLOR;if(a===THREE.OneMinusSrcColorFactor)return f.ONE_MINUS_SRC_COLOR;if(a===THREE.SrcAlphaFactor)return f.SRC_ALPHA;if(a===THREE.OneMinusSrcAlphaFactor)return f.ONE_MINUS_SRC_ALPHA;if(a===THREE.DstAlphaFactor)return f.DST_ALPHA;if(a===THREE.OneMinusDstAlphaFactor)return f.ONE_MINUS_DST_ALPHA;if(a===THREE.DstColorFactor)return f.DST_COLOR;if(a===THREE.OneMinusDstColorFactor)return f.ONE_MINUS_DST_COLOR;
if(a===THREE.SrcAlphaSaturateFactor)return f.SRC_ALPHA_SATURATE;if(void 0!==sb){if(a===THREE.RGB_S3TC_DXT1_Format)return sb.COMPRESSED_RGB_S3TC_DXT1_EXT;if(a===THREE.RGBA_S3TC_DXT1_Format)return sb.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(a===THREE.RGBA_S3TC_DXT3_Format)return sb.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(a===THREE.RGBA_S3TC_DXT5_Format)return sb.COMPRESSED_RGBA_S3TC_DXT5_EXT}return 0}console.log("THREE.WebGLRenderer",THREE.REVISION);var a=a||{},ya=void 0!==a.canvas?a.canvas:document.createElement("canvas"),
fa=void 0!==a.precision?a.precision:"highp",Da=void 0!==a.alpha?a.alpha:!0,Wa=void 0!==a.premultipliedAlpha?a.premultipliedAlpha:!0,cb=void 0!==a.antialias?a.antialias:!1,db=void 0!==a.stencil?a.stencil:!0,vb=void 0!==a.preserveDrawingBuffer?a.preserveDrawingBuffer:!1,Fa=void 0!==a.clearColor?new THREE.Color(a.clearColor):new THREE.Color(0),Va=void 0!==a.clearAlpha?a.clearAlpha:0;this.domElement=ya;this.context=null;this.devicePixelRatio=void 0!==a.devicePixelRatio?a.devicePixelRatio:void 0!==window.devicePixelRatio?
window.devicePixelRatio:1;this.autoUpdateScene=this.autoUpdateObjects=this.sortObjects=this.autoClearStencil=this.autoClearDepth=this.autoClearColor=this.autoClear=!0;this.shadowMapEnabled=this.physicallyBasedShading=this.gammaOutput=this.gammaInput=!1;this.shadowMapAutoUpdate=!0;this.shadowMapType=THREE.PCFShadowMap;this.shadowMapCullFace=THREE.CullFaceFront;this.shadowMapCascade=this.shadowMapDebug=!1;this.maxMorphTargets=8;this.maxMorphNormals=4;this.autoScaleCubemaps=!0;this.renderPluginsPre=
[];this.renderPluginsPost=[];this.info={memory:{programs:0,geometries:0,textures:0},render:{calls:0,vertices:0,faces:0,points:0}};var M=this,Sa=[],kd=0,ub=null,ec=null,pa=-1,ha=null,qa=null,bb=0,Z=0,ga=-1,za=-1,ia=-1,ba=-1,Ra=-1,lb=-1,ja=-1,mb=-1,nb=null,ob=null,wb=null,pb=null,fc=0,gc=0,hc=0,wc=0,Oc=0,xc=0,qb={},Bc=new THREE.Frustum,Qc=new THREE.Matrix4,md=new THREE.Matrix4,Ga=new THREE.Vector3,ra=new THREE.Vector3,Rb=!0,zc={ambient:[0,0,0],directional:{length:0,colors:[],positions:[]},point:{length:0,
colors:[],positions:[],distances:[]},spot:{length:0,colors:[],positions:[],distances:[],directions:[],anglesCos:[],exponents:[]},hemi:{length:0,skyColors:[],groundColors:[],positions:[]}},f,ic,Cc,rb,sb;try{if(!(f=ya.getContext("experimental-webgl",{alpha:Da,premultipliedAlpha:Wa,antialias:cb,stencil:db,preserveDrawingBuffer:vb})))throw"Error creating WebGL context.";}catch(nd){console.error(nd)}ic=f.getExtension("OES_texture_float");Cc=f.getExtension("OES_standard_derivatives");rb=f.getExtension("EXT_texture_filter_anisotropic")||
f.getExtension("MOZ_EXT_texture_filter_anisotropic")||f.getExtension("WEBKIT_EXT_texture_filter_anisotropic");sb=f.getExtension("WEBGL_compressed_texture_s3tc")||f.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||f.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");ic||console.log("THREE.WebGLRenderer: Float textures not supported.");Cc||console.log("THREE.WebGLRenderer: Standard derivatives not supported.");rb||console.log("THREE.WebGLRenderer: Anisotropic texture filtering not supported.");
sb||console.log("THREE.WebGLRenderer: S3TC compressed textures not supported.");void 0===f.getShaderPrecisionFormat&&(f.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}});f.clearColor(0,0,0,1);f.clearDepth(1);f.clearStencil(0);f.enable(f.DEPTH_TEST);f.depthFunc(f.LEQUAL);f.frontFace(f.CCW);f.cullFace(f.BACK);f.enable(f.CULL_FACE);f.enable(f.BLEND);f.blendEquation(f.FUNC_ADD);f.blendFunc(f.SRC_ALPHA,f.ONE_MINUS_SRC_ALPHA);f.clearColor(Fa.r,Fa.g,Fa.b,Va);this.context=f;
var Ac=f.getParameter(f.MAX_TEXTURE_IMAGE_UNITS),od=f.getParameter(f.MAX_VERTEX_TEXTURE_IMAGE_UNITS);f.getParameter(f.MAX_TEXTURE_SIZE);var ld=f.getParameter(f.MAX_CUBE_MAP_TEXTURE_SIZE),Pc=rb?f.getParameter(rb.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0,Dc=0<od,nc=Dc&&ic;sb&&f.getParameter(f.COMPRESSED_TEXTURE_FORMATS);var pd=f.getShaderPrecisionFormat(f.VERTEX_SHADER,f.HIGH_FLOAT),Gd=f.getShaderPrecisionFormat(f.VERTEX_SHADER,f.MEDIUM_FLOAT);f.getShaderPrecisionFormat(f.VERTEX_SHADER,f.LOW_FLOAT);var Hd=
f.getShaderPrecisionFormat(f.FRAGMENT_SHADER,f.HIGH_FLOAT),Id=f.getShaderPrecisionFormat(f.FRAGMENT_SHADER,f.MEDIUM_FLOAT);f.getShaderPrecisionFormat(f.FRAGMENT_SHADER,f.LOW_FLOAT);f.getShaderPrecisionFormat(f.VERTEX_SHADER,f.HIGH_INT);f.getShaderPrecisionFormat(f.VERTEX_SHADER,f.MEDIUM_INT);f.getShaderPrecisionFormat(f.VERTEX_SHADER,f.LOW_INT);f.getShaderPrecisionFormat(f.FRAGMENT_SHADER,f.HIGH_INT);f.getShaderPrecisionFormat(f.FRAGMENT_SHADER,f.MEDIUM_INT);f.getShaderPrecisionFormat(f.FRAGMENT_SHADER,
f.LOW_INT);var Jd=0<pd.precision&&0<Hd.precision,Rc=0<Gd.precision&&0<Id.precision;"highp"===fa&&!Jd&&(Rc?(fa="mediump",console.warn("WebGLRenderer: highp not supported, using mediump")):(fa="lowp",console.warn("WebGLRenderer: highp and mediump not supported, using lowp")));"mediump"===fa&&!Rc&&(fa="lowp",console.warn("WebGLRenderer: mediump not supported, using lowp"));this.getContext=function(){return f};this.supportsVertexTextures=function(){return Dc};this.supportsFloatTextures=function(){return ic};
this.supportsStandardDerivatives=function(){return Cc};this.supportsCompressedTextureS3TC=function(){return sb};this.getMaxAnisotropy=function(){return Pc};this.getPrecision=function(){return fa};this.setSize=function(a,b){ya.width=a*this.devicePixelRatio;ya.height=b*this.devicePixelRatio;ya.style.width=a+"px";ya.style.height=b+"px";this.setViewport(0,0,ya.width,ya.height)};this.setViewport=function(a,b,c,d){fc=void 0!==a?a:0;gc=void 0!==b?b:0;hc=void 0!==c?c:ya.width;wc=void 0!==d?d:ya.height;f.viewport(fc,
gc,hc,wc)};this.setScissor=function(a,b,c,d){f.scissor(a,b,c,d)};this.enableScissorTest=function(a){a?f.enable(f.SCISSOR_TEST):f.disable(f.SCISSOR_TEST)};this.setClearColorHex=function(a,b){Fa.setHex(a);Va=b;f.clearColor(Fa.r,Fa.g,Fa.b,Va)};this.setClearColor=function(a,b){Fa.copy(a);Va=b;f.clearColor(Fa.r,Fa.g,Fa.b,Va)};this.getClearColor=function(){return Fa};this.getClearAlpha=function(){return Va};this.clear=function(a,b,c){var d=0;if(void 0===a||a)d|=f.COLOR_BUFFER_BIT;if(void 0===b||b)d|=f.DEPTH_BUFFER_BIT;
if(void 0===c||c)d|=f.STENCIL_BUFFER_BIT;f.clear(d)};this.clearTarget=function(a,b,c,d){this.setRenderTarget(a);this.clear(b,c,d)};this.addPostPlugin=function(a){a.init(this);this.renderPluginsPost.push(a)};this.addPrePlugin=function(a){a.init(this);this.renderPluginsPre.push(a)};this.updateShadowMap=function(a,b){ub=null;pa=ha=mb=ja=ia=-1;Rb=!0;za=ga=-1;this.shadowMapPlugin.update(a,b)};var xd=function(a){a=a.target;a.removeEventListener("dispose",xd);a.__webglInit=void 0;void 0!==a.__webglVertexBuffer&&
f.deleteBuffer(a.__webglVertexBuffer);void 0!==a.__webglNormalBuffer&&f.deleteBuffer(a.__webglNormalBuffer);void 0!==a.__webglTangentBuffer&&f.deleteBuffer(a.__webglTangentBuffer);void 0!==a.__webglColorBuffer&&f.deleteBuffer(a.__webglColorBuffer);void 0!==a.__webglUVBuffer&&f.deleteBuffer(a.__webglUVBuffer);void 0!==a.__webglUV2Buffer&&f.deleteBuffer(a.__webglUV2Buffer);void 0!==a.__webglSkinIndicesBuffer&&f.deleteBuffer(a.__webglSkinIndicesBuffer);void 0!==a.__webglSkinWeightsBuffer&&f.deleteBuffer(a.__webglSkinWeightsBuffer);
void 0!==a.__webglFaceBuffer&&f.deleteBuffer(a.__webglFaceBuffer);void 0!==a.__webglLineBuffer&&f.deleteBuffer(a.__webglLineBuffer);void 0!==a.__webglLineDistanceBuffer&&f.deleteBuffer(a.__webglLineDistanceBuffer);if(void 0!==a.geometryGroups)for(var c in a.geometryGroups){var d=a.geometryGroups[c];if(void 0!==d.numMorphTargets)for(var e=0,g=d.numMorphTargets;e<g;e++)f.deleteBuffer(d.__webglMorphTargetsBuffers[e]);if(void 0!==d.numMorphNormals){e=0;for(g=d.numMorphNormals;e<g;e++)f.deleteBuffer(d.__webglMorphNormalsBuffers[e])}b(d)}b(a);
M.info.memory.geometries--},Sc=function(a){a=a.target;a.removeEventListener("dispose",Sc);a.image&&a.image.__webglTextureCube?f.deleteTexture(a.image.__webglTextureCube):a.__webglInit&&(a.__webglInit=!1,f.deleteTexture(a.__webglTexture));M.info.memory.textures--},Tc=function(a){a=a.target;a.removeEventListener("dispose",Tc);if(a&&a.__webglTexture)if(f.deleteTexture(a.__webglTexture),a instanceof THREE.WebGLRenderTargetCube)for(var b=0;6>b;b++)f.deleteFramebuffer(a.__webglFramebuffer[b]),f.deleteRenderbuffer(a.__webglRenderbuffer[b]);
else f.deleteFramebuffer(a.__webglFramebuffer),f.deleteRenderbuffer(a.__webglRenderbuffer);M.info.memory.textures--},Uc=function(a){a=a.target;a.removeEventListener("dispose",Uc);yc(a)},yc=function(a){var b=a.program;if(void 0!==b){a.program=void 0;var c,d,e=!1,a=0;for(c=Sa.length;a<c;a++)if(d=Sa[a],d.program===b){d.usedTimes--;0===d.usedTimes&&(e=!0);break}if(!0===e){e=[];a=0;for(c=Sa.length;a<c;a++)d=Sa[a],d.program!==b&&e.push(d);Sa=e;f.deleteProgram(b);M.info.memory.programs--}}};this.renderBufferImmediate=
function(a,b,c){a.hasPositions&&!a.__webglVertexBuffer&&(a.__webglVertexBuffer=f.createBuffer());a.hasNormals&&!a.__webglNormalBuffer&&(a.__webglNormalBuffer=f.createBuffer());a.hasUvs&&!a.__webglUvBuffer&&(a.__webglUvBuffer=f.createBuffer());a.hasColors&&!a.__webglColorBuffer&&(a.__webglColorBuffer=f.createBuffer());a.hasPositions&&(f.bindBuffer(f.ARRAY_BUFFER,a.__webglVertexBuffer),f.bufferData(f.ARRAY_BUFFER,a.positionArray,f.DYNAMIC_DRAW),f.enableVertexAttribArray(b.attributes.position),f.vertexAttribPointer(b.attributes.position,
3,f.FLOAT,!1,0,0));if(a.hasNormals){f.bindBuffer(f.ARRAY_BUFFER,a.__webglNormalBuffer);if(c.shading===THREE.FlatShading){var d,e,g,h,i,j,k,l,p,m,n,t=3*a.count;for(n=0;n<t;n+=9)m=a.normalArray,d=m[n],e=m[n+1],g=m[n+2],h=m[n+3],j=m[n+4],l=m[n+5],i=m[n+6],k=m[n+7],p=m[n+8],d=(d+h+i)/3,e=(e+j+k)/3,g=(g+l+p)/3,m[n]=d,m[n+1]=e,m[n+2]=g,m[n+3]=d,m[n+4]=e,m[n+5]=g,m[n+6]=d,m[n+7]=e,m[n+8]=g}f.bufferData(f.ARRAY_BUFFER,a.normalArray,f.DYNAMIC_DRAW);f.enableVertexAttribArray(b.attributes.normal);f.vertexAttribPointer(b.attributes.normal,
3,f.FLOAT,!1,0,0)}a.hasUvs&&c.map&&(f.bindBuffer(f.ARRAY_BUFFER,a.__webglUvBuffer),f.bufferData(f.ARRAY_BUFFER,a.uvArray,f.DYNAMIC_DRAW),f.enableVertexAttribArray(b.attributes.uv),f.vertexAttribPointer(b.attributes.uv,2,f.FLOAT,!1,0,0));a.hasColors&&c.vertexColors!==THREE.NoColors&&(f.bindBuffer(f.ARRAY_BUFFER,a.__webglColorBuffer),f.bufferData(f.ARRAY_BUFFER,a.colorArray,f.DYNAMIC_DRAW),f.enableVertexAttribArray(b.attributes.color),f.vertexAttribPointer(b.attributes.color,3,f.FLOAT,!1,0,0));f.drawArrays(f.TRIANGLES,
0,a.count);a.count=0};this.renderBufferDirect=function(a,b,c,d,e,g){if(!1!==d.visible)if(c=C(a,b,c,d,g),a=c.attributes,b=!1,c=16777215*e.id+2*c.id+(d.wireframe?1:0),c!==ha&&(ha=c,b=!0),b&&n(),g instanceof THREE.Mesh)if(d=e.attributes.index){g=e.offsets;1<g.length&&(b=!0);for(var c=0,h=g.length;c<h;c++){var i=g[c].index;if(b){var j=e.attributes.position,l=j.itemSize;f.bindBuffer(f.ARRAY_BUFFER,j.buffer);k(a.position);f.vertexAttribPointer(a.position,l,f.FLOAT,!1,0,4*i*l);l=e.attributes.normal;if(0<=
a.normal&&l){var p=l.itemSize;f.bindBuffer(f.ARRAY_BUFFER,l.buffer);k(a.normal);f.vertexAttribPointer(a.normal,p,f.FLOAT,!1,0,4*i*p)}l=e.attributes.uv;0<=a.uv&&l&&(p=l.itemSize,f.bindBuffer(f.ARRAY_BUFFER,l.buffer),k(a.uv),f.vertexAttribPointer(a.uv,p,f.FLOAT,!1,0,4*i*p));l=e.attributes.color;0<=a.color&&l&&(p=l.itemSize,f.bindBuffer(f.ARRAY_BUFFER,l.buffer),k(a.color),f.vertexAttribPointer(a.color,p,f.FLOAT,!1,0,4*i*p));l=e.attributes.tangent;0<=a.tangent&&l&&(p=l.itemSize,f.bindBuffer(f.ARRAY_BUFFER,
l.buffer),k(a.tangent),f.vertexAttribPointer(a.tangent,p,f.FLOAT,!1,0,4*i*p));f.bindBuffer(f.ELEMENT_ARRAY_BUFFER,d.buffer)}f.drawElements(f.TRIANGLES,g[c].count,f.UNSIGNED_SHORT,2*g[c].start);M.info.render.calls++;M.info.render.vertices+=g[c].count;M.info.render.faces+=g[c].count/3}}else b&&(j=e.attributes.position,l=j.itemSize,f.bindBuffer(f.ARRAY_BUFFER,j.buffer),k(a.position),f.vertexAttribPointer(a.position,l,f.FLOAT,!1,0,0),l=e.attributes.normal,0<=a.normal&&l&&(p=l.itemSize,f.bindBuffer(f.ARRAY_BUFFER,
l.buffer),k(a.normal),f.vertexAttribPointer(a.normal,p,f.FLOAT,!1,0,0)),l=e.attributes.uv,0<=a.uv&&l&&(p=l.itemSize,f.bindBuffer(f.ARRAY_BUFFER,l.buffer),k(a.uv),f.vertexAttribPointer(a.uv,p,f.FLOAT,!1,0,0)),l=e.attributes.color,0<=a.color&&l&&(p=l.itemSize,f.bindBuffer(f.ARRAY_BUFFER,l.buffer),k(a.color),f.vertexAttribPointer(a.color,p,f.FLOAT,!1,0,0)),l=e.attributes.tangent,0<=a.tangent&&l&&(p=l.itemSize,f.bindBuffer(f.ARRAY_BUFFER,l.buffer),k(a.tangent),f.vertexAttribPointer(a.tangent,p,f.FLOAT,
!1,0,0))),f.drawArrays(f.TRIANGLES,0,j.numItems/3),M.info.render.calls++,M.info.render.vertices+=j.numItems/3,M.info.render.faces+=j.numItems/3/3;else g instanceof THREE.ParticleSystem?b&&(j=e.attributes.position,l=j.itemSize,f.bindBuffer(f.ARRAY_BUFFER,j.buffer),k(a.position),f.vertexAttribPointer(a.position,l,f.FLOAT,!1,0,0),l=e.attributes.color,0<=a.color&&l&&(p=l.itemSize,f.bindBuffer(f.ARRAY_BUFFER,l.buffer),k(a.color),f.vertexAttribPointer(a.color,p,f.FLOAT,!1,0,0)),f.drawArrays(f.POINTS,0,
j.numItems/3),M.info.render.calls++,M.info.render.points+=j.numItems/3):g instanceof THREE.Line&&b&&(j=e.attributes.position,l=j.itemSize,f.bindBuffer(f.ARRAY_BUFFER,j.buffer),k(a.position),f.vertexAttribPointer(a.position,l,f.FLOAT,!1,0,0),l=e.attributes.color,0<=a.color&&l&&(p=l.itemSize,f.bindBuffer(f.ARRAY_BUFFER,l.buffer),k(a.color),f.vertexAttribPointer(a.color,p,f.FLOAT,!1,0,0)),N(d.linewidth),f.drawArrays(f.LINE_STRIP,0,j.numItems/3),M.info.render.calls++,M.info.render.points+=j.numItems)};
this.renderBuffer=function(a,b,c,d,e,g){if(!1!==d.visible){var h,i,c=C(a,b,c,d,g),a=c.attributes,b=!1,c=16777215*e.id+2*c.id+(d.wireframe?1:0);c!==ha&&(ha=c,b=!0);b&&n();if(!d.morphTargets&&0<=a.position)b&&(f.bindBuffer(f.ARRAY_BUFFER,e.__webglVertexBuffer),k(a.position),f.vertexAttribPointer(a.position,3,f.FLOAT,!1,0,0));else if(g.morphTargetBase){c=d.program.attributes;-1!==g.morphTargetBase&&0<=c.position?(f.bindBuffer(f.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[g.morphTargetBase]),k(c.position),
f.vertexAttribPointer(c.position,3,f.FLOAT,!1,0,0)):0<=c.position&&(f.bindBuffer(f.ARRAY_BUFFER,e.__webglVertexBuffer),k(c.position),f.vertexAttribPointer(c.position,3,f.FLOAT,!1,0,0));if(g.morphTargetForcedOrder.length){var j=0;i=g.morphTargetForcedOrder;for(h=g.morphTargetInfluences;j<d.numSupportedMorphTargets&&j<i.length;)0<=c["morphTarget"+j]&&(f.bindBuffer(f.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[i[j]]),k(c["morphTarget"+j]),f.vertexAttribPointer(c["morphTarget"+j],3,f.FLOAT,!1,0,0)),0<=
c["morphNormal"+j]&&d.morphNormals&&(f.bindBuffer(f.ARRAY_BUFFER,e.__webglMorphNormalsBuffers[i[j]]),k(c["morphNormal"+j]),f.vertexAttribPointer(c["morphNormal"+j],3,f.FLOAT,!1,0,0)),g.__webglMorphTargetInfluences[j]=h[i[j]],j++}else{i=[];h=g.morphTargetInfluences;var l,p=h.length;for(l=0;l<p;l++)j=h[l],0<j&&i.push([j,l]);i.length>d.numSupportedMorphTargets?(i.sort(t),i.length=d.numSupportedMorphTargets):i.length>d.numSupportedMorphNormals?i.sort(t):0===i.length&&i.push([0,0]);for(j=0;j<d.numSupportedMorphTargets;)i[j]?
(l=i[j][1],0<=c["morphTarget"+j]&&(f.bindBuffer(f.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[l]),k(c["morphTarget"+j]),f.vertexAttribPointer(c["morphTarget"+j],3,f.FLOAT,!1,0,0)),0<=c["morphNormal"+j]&&d.morphNormals&&(f.bindBuffer(f.ARRAY_BUFFER,e.__webglMorphNormalsBuffers[l]),k(c["morphNormal"+j]),f.vertexAttribPointer(c["morphNormal"+j],3,f.FLOAT,!1,0,0)),g.__webglMorphTargetInfluences[j]=h[l]):g.__webglMorphTargetInfluences[j]=0,j++}null!==d.program.uniforms.morphTargetInfluences&&f.uniform1fv(d.program.uniforms.morphTargetInfluences,
g.__webglMorphTargetInfluences)}if(b){if(e.__webglCustomAttributesList){h=0;for(i=e.__webglCustomAttributesList.length;h<i;h++)c=e.__webglCustomAttributesList[h],0<=a[c.buffer.belongsToAttribute]&&(f.bindBuffer(f.ARRAY_BUFFER,c.buffer),k(a[c.buffer.belongsToAttribute]),f.vertexAttribPointer(a[c.buffer.belongsToAttribute],c.size,f.FLOAT,!1,0,0))}0<=a.color&&(f.bindBuffer(f.ARRAY_BUFFER,e.__webglColorBuffer),k(a.color),f.vertexAttribPointer(a.color,3,f.FLOAT,!1,0,0));0<=a.normal&&(f.bindBuffer(f.ARRAY_BUFFER,
e.__webglNormalBuffer),k(a.normal),f.vertexAttribPointer(a.normal,3,f.FLOAT,!1,0,0));0<=a.tangent&&(f.bindBuffer(f.ARRAY_BUFFER,e.__webglTangentBuffer),k(a.tangent),f.vertexAttribPointer(a.tangent,4,f.FLOAT,!1,0,0));0<=a.uv&&(f.bindBuffer(f.ARRAY_BUFFER,e.__webglUVBuffer),k(a.uv),f.vertexAttribPointer(a.uv,2,f.FLOAT,!1,0,0));0<=a.uv2&&(f.bindBuffer(f.ARRAY_BUFFER,e.__webglUV2Buffer),k(a.uv2),f.vertexAttribPointer(a.uv2,2,f.FLOAT,!1,0,0));d.skinning&&(0<=a.skinIndex&&0<=a.skinWeight)&&(f.bindBuffer(f.ARRAY_BUFFER,
e.__webglSkinIndicesBuffer),k(a.skinIndex),f.vertexAttribPointer(a.skinIndex,4,f.FLOAT,!1,0,0),f.bindBuffer(f.ARRAY_BUFFER,e.__webglSkinWeightsBuffer),k(a.skinWeight),f.vertexAttribPointer(a.skinWeight,4,f.FLOAT,!1,0,0));0<=a.lineDistance&&(f.bindBuffer(f.ARRAY_BUFFER,e.__webglLineDistanceBuffer),k(a.lineDistance),f.vertexAttribPointer(a.lineDistance,1,f.FLOAT,!1,0,0))}g instanceof THREE.Mesh?(d.wireframe?(N(d.wireframeLinewidth),b&&f.bindBuffer(f.ELEMENT_ARRAY_BUFFER,e.__webglLineBuffer),f.drawElements(f.LINES,
e.__webglLineCount,f.UNSIGNED_SHORT,0)):(b&&f.bindBuffer(f.ELEMENT_ARRAY_BUFFER,e.__webglFaceBuffer),f.drawElements(f.TRIANGLES,e.__webglFaceCount,f.UNSIGNED_SHORT,0)),M.info.render.calls++,M.info.render.vertices+=e.__webglFaceCount,M.info.render.faces+=e.__webglFaceCount/3):g instanceof THREE.Line?(g=g.type===THREE.LineStrip?f.LINE_STRIP:f.LINES,N(d.linewidth),f.drawArrays(g,0,e.__webglLineCount),M.info.render.calls++):g instanceof THREE.ParticleSystem?(f.drawArrays(f.POINTS,0,e.__webglParticleCount),
M.info.render.calls++,M.info.render.points+=e.__webglParticleCount):g instanceof THREE.Ribbon&&(f.drawArrays(f.TRIANGLE_STRIP,0,e.__webglVertexCount),M.info.render.calls++)}};this.render=function(a,b,c,d){if(!1===b instanceof THREE.Camera)console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");else{var e,g,h,i,j=a.__lights,k=a.fog;pa=-1;Rb=!0;this.autoUpdateScene&&a.updateMatrixWorld();void 0===b.parent&&b.updateMatrixWorld();b.matrixWorldInverse.getInverse(b.matrixWorld);
Qc.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse);Bc.setFromMatrix(Qc);this.autoUpdateObjects&&this.initWebGLObjects(a);u(this.renderPluginsPre,a,b);M.info.render.calls=0;M.info.render.vertices=0;M.info.render.faces=0;M.info.render.points=0;this.setRenderTarget(c);(this.autoClear||d)&&this.clear(this.autoClearColor,this.autoClearDepth,this.autoClearStencil);i=a.__webglObjects;d=0;for(e=i.length;d<e;d++)if(g=i[d],h=g.object,g.render=!1,h.visible&&(!(h instanceof THREE.Mesh||h instanceof
THREE.ParticleSystem)||!h.frustumCulled||Bc.intersectsObject(h))){D(h,b);var l=g,n=l.buffer,t=void 0,s=t=void 0,s=l.object.material;if(s instanceof THREE.MeshFaceMaterial)t=n.materialIndex,t=s.materials[t],t.transparent?(l.transparent=t,l.opaque=null):(l.opaque=t,l.transparent=null);else if(t=s)t.transparent?(l.transparent=t,l.opaque=null):(l.opaque=t,l.transparent=null);g.render=!0;!0===this.sortObjects&&(null!==h.renderDepth?g.z=h.renderDepth:(Ga.getPositionFromMatrix(h.matrixWorld),Ga.applyProjection(Qc),
g.z=Ga.z),g.id=h.id)}this.sortObjects&&i.sort(p);i=a.__webglObjectsImmediate;d=0;for(e=i.length;d<e;d++)g=i[d],h=g.object,h.visible&&(D(h,b),h=g.object.material,h.transparent?(g.transparent=h,g.opaque=null):(g.opaque=h,g.transparent=null));a.overrideMaterial?(d=a.overrideMaterial,this.setBlending(d.blending,d.blendEquation,d.blendSrc,d.blendDst),this.setDepthTest(d.depthTest),this.setDepthWrite(d.depthWrite),F(d.polygonOffset,d.polygonOffsetFactor,d.polygonOffsetUnits),v(a.__webglObjects,!1,"",b,
j,k,!0,d),m(a.__webglObjectsImmediate,"",b,j,k,!1,d)):(d=null,this.setBlending(THREE.NoBlending),v(a.__webglObjects,!0,"opaque",b,j,k,!1,d),m(a.__webglObjectsImmediate,"opaque",b,j,k,!1,d),v(a.__webglObjects,!1,"transparent",b,j,k,!0,d),m(a.__webglObjectsImmediate,"transparent",b,j,k,!0,d));u(this.renderPluginsPost,a,b);c&&(c.generateMipmaps&&c.minFilter!==THREE.NearestFilter&&c.minFilter!==THREE.LinearFilter)&&(c instanceof THREE.WebGLRenderTargetCube?(f.bindTexture(f.TEXTURE_CUBE_MAP,c.__webglTexture),
f.generateMipmap(f.TEXTURE_CUBE_MAP),f.bindTexture(f.TEXTURE_CUBE_MAP,null)):(f.bindTexture(f.TEXTURE_2D,c.__webglTexture),f.generateMipmap(f.TEXTURE_2D),f.bindTexture(f.TEXTURE_2D,null)));this.setDepthTest(!0);this.setDepthWrite(!0)}};this.renderImmediateObject=function(a,b,c,d,e){var g=C(a,b,c,d,e);ha=-1;M.setMaterialFaces(d);e.immediateRenderCallback?e.immediateRenderCallback(g,f,Bc):e.render(function(a){M.renderBufferImmediate(a,g,d)})};this.initWebGLObjects=function(a){a.__webglObjects||(a.__webglObjects=
[],a.__webglObjectsImmediate=[],a.__webglSprites=[],a.__webglFlares=[]);for(;a.__objectsAdded.length;){var b=a.__objectsAdded[0],k=a,p=void 0,m=void 0,n=void 0,u=void 0;if(!b.__webglInit)if(b.__webglInit=!0,b._modelViewMatrix=new THREE.Matrix4,b._normalMatrix=new THREE.Matrix3,void 0!==b.geometry&&void 0===b.geometry.__webglInit&&(b.geometry.__webglInit=!0,b.geometry.addEventListener("dispose",xd)),b instanceof THREE.Mesh)if(m=b.geometry,n=b.material,m instanceof THREE.Geometry){if(void 0===m.geometryGroups){var v=
m,w=void 0,B=void 0,D=void 0,C=void 0,E=void 0,F=void 0,I={},N=v.morphTargets.length,P=v.morphNormals.length,R=n instanceof THREE.MeshFaceMaterial;v.geometryGroups={};w=0;for(B=v.faces.length;w<B;w++)D=v.faces[w],C=R?D.materialIndex:0,void 0===I[C]&&(I[C]={hash:C,counter:0}),F=I[C].hash+"_"+I[C].counter,void 0===v.geometryGroups[F]&&(v.geometryGroups[F]={faces3:[],faces4:[],materialIndex:C,vertices:0,numMorphTargets:N,numMorphNormals:P}),E=D instanceof THREE.Face3?3:4,65535<v.geometryGroups[F].vertices+
E&&(I[C].counter+=1,F=I[C].hash+"_"+I[C].counter,void 0===v.geometryGroups[F]&&(v.geometryGroups[F]={faces3:[],faces4:[],materialIndex:C,vertices:0,numMorphTargets:N,numMorphNormals:P})),D instanceof THREE.Face3?v.geometryGroups[F].faces3.push(w):v.geometryGroups[F].faces4.push(w),v.geometryGroups[F].vertices+=E;v.geometryGroupsList=[];var W=void 0;for(W in v.geometryGroups)v.geometryGroups[W].id=bb++,v.geometryGroupsList.push(v.geometryGroups[W])}for(p in m.geometryGroups)if(u=m.geometryGroups[p],
!u.__webglVertexBuffer){var Q=u;Q.__webglVertexBuffer=f.createBuffer();Q.__webglNormalBuffer=f.createBuffer();Q.__webglTangentBuffer=f.createBuffer();Q.__webglColorBuffer=f.createBuffer();Q.__webglUVBuffer=f.createBuffer();Q.__webglUV2Buffer=f.createBuffer();Q.__webglSkinIndicesBuffer=f.createBuffer();Q.__webglSkinWeightsBuffer=f.createBuffer();Q.__webglFaceBuffer=f.createBuffer();Q.__webglLineBuffer=f.createBuffer();var X=void 0,Z=void 0;if(Q.numMorphTargets){Q.__webglMorphTargetsBuffers=[];X=0;
for(Z=Q.numMorphTargets;X<Z;X++)Q.__webglMorphTargetsBuffers.push(f.createBuffer())}if(Q.numMorphNormals){Q.__webglMorphNormalsBuffers=[];X=0;for(Z=Q.numMorphNormals;X<Z;X++)Q.__webglMorphNormalsBuffers.push(f.createBuffer())}M.info.memory.geometries++;d(u,b);m.verticesNeedUpdate=!0;m.morphTargetsNeedUpdate=!0;m.elementsNeedUpdate=!0;m.uvsNeedUpdate=!0;m.normalsNeedUpdate=!0;m.tangentsNeedUpdate=!0;m.colorsNeedUpdate=!0}}else m instanceof THREE.BufferGeometry&&j(m);else if(b instanceof THREE.Ribbon){if(m=
b.geometry,!m.__webglVertexBuffer){var fa=m;fa.__webglVertexBuffer=f.createBuffer();fa.__webglColorBuffer=f.createBuffer();fa.__webglNormalBuffer=f.createBuffer();M.info.memory.geometries++;var ba=m,ja=b,ga=ba.vertices.length;ba.__vertexArray=new Float32Array(3*ga);ba.__colorArray=new Float32Array(3*ga);ba.__normalArray=new Float32Array(3*ga);ba.__webglVertexCount=ga;c(ba,ja);m.verticesNeedUpdate=!0;m.colorsNeedUpdate=!0;m.normalsNeedUpdate=!0}}else if(b instanceof THREE.Line){if(m=b.geometry,!m.__webglVertexBuffer)if(m instanceof
THREE.Geometry){var ia=m;ia.__webglVertexBuffer=f.createBuffer();ia.__webglColorBuffer=f.createBuffer();ia.__webglLineDistanceBuffer=f.createBuffer();M.info.memory.geometries++;var ha=m,ya=b,qa=ha.vertices.length;ha.__vertexArray=new Float32Array(3*qa);ha.__colorArray=new Float32Array(3*qa);ha.__lineDistanceArray=new Float32Array(1*qa);ha.__webglLineCount=qa;c(ha,ya);m.verticesNeedUpdate=!0;m.colorsNeedUpdate=!0;m.lineDistancesNeedUpdate=!0}else m instanceof THREE.BufferGeometry&&j(m)}else if(b instanceof
THREE.ParticleSystem&&(m=b.geometry,!m.__webglVertexBuffer))if(m instanceof THREE.Geometry){var za=m;za.__webglVertexBuffer=f.createBuffer();za.__webglColorBuffer=f.createBuffer();M.info.memory.geometries++;var ra=m,Da=b,Fa=ra.vertices.length;ra.__vertexArray=new Float32Array(3*Fa);ra.__colorArray=new Float32Array(3*Fa);ra.__sortArray=[];ra.__webglParticleCount=Fa;c(ra,Da);m.verticesNeedUpdate=!0;m.colorsNeedUpdate=!0}else m instanceof THREE.BufferGeometry&&j(m);if(!b.__webglActive){if(b instanceof
THREE.Mesh)if(m=b.geometry,m instanceof THREE.BufferGeometry)l(k.__webglObjects,m,b);else{if(m instanceof THREE.Geometry)for(p in m.geometryGroups)u=m.geometryGroups[p],l(k.__webglObjects,u,b)}else b instanceof THREE.Ribbon||b instanceof THREE.Line||b instanceof THREE.ParticleSystem?(m=b.geometry,l(k.__webglObjects,m,b)):b instanceof THREE.ImmediateRenderObject||b.immediateRenderCallback?k.__webglObjectsImmediate.push({object:b,opaque:null,transparent:null}):b instanceof THREE.Sprite?k.__webglSprites.push(b):
b instanceof THREE.LensFlare&&k.__webglFlares.push(b);b.__webglActive=!0}a.__objectsAdded.splice(0,1)}for(;a.__objectsRemoved.length;){var pa=a.__objectsRemoved[0],Ra=a;pa instanceof THREE.Mesh||pa instanceof THREE.ParticleSystem||pa instanceof THREE.Ribbon||pa instanceof THREE.Line?A(Ra.__webglObjects,pa):pa instanceof THREE.Sprite?s(Ra.__webglSprites,pa):pa instanceof THREE.LensFlare?s(Ra.__webglFlares,pa):(pa instanceof THREE.ImmediateRenderObject||pa.immediateRenderCallback)&&A(Ra.__webglObjectsImmediate,
pa);pa.__webglActive=!1;a.__objectsRemoved.splice(0,1)}for(var Va=0,db=a.__webglObjects.length;Va<db;Va++){var Ta=a.__webglObjects[Va].object,G=Ta.geometry,Ea=void 0,Sa=void 0,Ma=void 0;if(Ta instanceof THREE.Mesh)if(G instanceof THREE.BufferGeometry)(G.verticesNeedUpdate||G.elementsNeedUpdate||G.uvsNeedUpdate||G.normalsNeedUpdate||G.colorsNeedUpdate||G.tangentsNeedUpdate)&&i(G,f.DYNAMIC_DRAW,!G.dynamic),G.verticesNeedUpdate=!1,G.elementsNeedUpdate=!1,G.uvsNeedUpdate=!1,G.normalsNeedUpdate=!1,G.colorsNeedUpdate=
!1,G.tangentsNeedUpdate=!1;else{for(var cb=0,lb=G.geometryGroupsList.length;cb<lb;cb++)if(Ea=G.geometryGroupsList[cb],Ma=e(Ta,Ea),G.buffersNeedUpdate&&d(Ea,Ta),Sa=Ma.attributes&&y(Ma),G.verticesNeedUpdate||G.morphTargetsNeedUpdate||G.elementsNeedUpdate||G.uvsNeedUpdate||G.normalsNeedUpdate||G.colorsNeedUpdate||G.tangentsNeedUpdate||Sa){var ca=Ea,mb=Ta,eb=f.DYNAMIC_DRAW,sb=!G.dynamic,Wa=Ma;if(ca.__inittedArrays){var vb=g(Wa),wb=Wa.vertexColors?Wa.vertexColors:!1,Rb=h(Wa),rb=vb===THREE.SmoothShading,
z=void 0,O=void 0,Yb=void 0,H=void 0,oc=void 0,Zb=void 0,tb=void 0,ub=void 0,Sb=void 0,pc=void 0,qc=void 0,J=void 0,K=void 0,L=void 0,aa=void 0,xb=void 0,yb=void 0,zb=void 0,nb=void 0,Ab=void 0,Bb=void 0,Cb=void 0,ob=void 0,Db=void 0,Eb=void 0,Fb=void 0,pb=void 0,Gb=void 0,Hb=void 0,Ib=void 0,qb=void 0,Jb=void 0,Kb=void 0,Lb=void 0,Ec=void 0,ka=void 0,ec=void 0,$b=void 0,rc=void 0,sc=void 0,Ja=void 0,ic=void 0,Ha=void 0,Ia=void 0,ac=void 0,Tb=void 0,Aa=0,Ca=0,Ub=0,Vb=0,fb=0,Pa=0,na=0,Ua=0,Ba=0,T=
0,Y=0,r=0,la=void 0,Ka=ca.__vertexArray,Fc=ca.__uvArray,Gc=ca.__uv2Array,gb=ca.__normalArray,ua=ca.__tangentArray,La=ca.__colorArray,va=ca.__skinIndexArray,wa=ca.__skinWeightArray,fc=ca.__morphTargetsArrays,gc=ca.__morphNormalsArrays,hc=ca.__webglCustomAttributesList,q=void 0,Mb=ca.__faceArray,ab=ca.__lineArray,Xa=mb.geometry,wc=Xa.elementsNeedUpdate,nc=Xa.uvsNeedUpdate,Bc=Xa.normalsNeedUpdate,Cc=Xa.tangentsNeedUpdate,Dc=Xa.colorsNeedUpdate,Oc=Xa.morphTargetsNeedUpdate,jc=Xa.vertices,da=ca.faces3,
ea=ca.faces4,Qa=Xa.faces,qd=Xa.faceVertexUvs[0],rd=Xa.faceVertexUvs[1],kc=Xa.skinIndices,bc=Xa.skinWeights,cc=Xa.morphTargets,Vc=Xa.morphNormals;if(Xa.verticesNeedUpdate){z=0;for(O=da.length;z<O;z++)H=Qa[da[z]],J=jc[H.a],K=jc[H.b],L=jc[H.c],Ka[Ca]=J.x,Ka[Ca+1]=J.y,Ka[Ca+2]=J.z,Ka[Ca+3]=K.x,Ka[Ca+4]=K.y,Ka[Ca+5]=K.z,Ka[Ca+6]=L.x,Ka[Ca+7]=L.y,Ka[Ca+8]=L.z,Ca+=9;z=0;for(O=ea.length;z<O;z++)H=Qa[ea[z]],J=jc[H.a],K=jc[H.b],L=jc[H.c],aa=jc[H.d],Ka[Ca]=J.x,Ka[Ca+1]=J.y,Ka[Ca+2]=J.z,Ka[Ca+3]=K.x,Ka[Ca+4]=
K.y,Ka[Ca+5]=K.z,Ka[Ca+6]=L.x,Ka[Ca+7]=L.y,Ka[Ca+8]=L.z,Ka[Ca+9]=aa.x,Ka[Ca+10]=aa.y,Ka[Ca+11]=aa.z,Ca+=12;f.bindBuffer(f.ARRAY_BUFFER,ca.__webglVertexBuffer);f.bufferData(f.ARRAY_BUFFER,Ka,eb)}if(Oc){Ja=0;for(ic=cc.length;Ja<ic;Ja++){z=Y=0;for(O=da.length;z<O;z++)ac=da[z],H=Qa[ac],J=cc[Ja].vertices[H.a],K=cc[Ja].vertices[H.b],L=cc[Ja].vertices[H.c],Ha=fc[Ja],Ha[Y]=J.x,Ha[Y+1]=J.y,Ha[Y+2]=J.z,Ha[Y+3]=K.x,Ha[Y+4]=K.y,Ha[Y+5]=K.z,Ha[Y+6]=L.x,Ha[Y+7]=L.y,Ha[Y+8]=L.z,Wa.morphNormals&&(rb?(Tb=Vc[Ja].vertexNormals[ac],
Ab=Tb.a,Bb=Tb.b,Cb=Tb.c):Cb=Bb=Ab=Vc[Ja].faceNormals[ac],Ia=gc[Ja],Ia[Y]=Ab.x,Ia[Y+1]=Ab.y,Ia[Y+2]=Ab.z,Ia[Y+3]=Bb.x,Ia[Y+4]=Bb.y,Ia[Y+5]=Bb.z,Ia[Y+6]=Cb.x,Ia[Y+7]=Cb.y,Ia[Y+8]=Cb.z),Y+=9;z=0;for(O=ea.length;z<O;z++)ac=ea[z],H=Qa[ac],J=cc[Ja].vertices[H.a],K=cc[Ja].vertices[H.b],L=cc[Ja].vertices[H.c],aa=cc[Ja].vertices[H.d],Ha=fc[Ja],Ha[Y]=J.x,Ha[Y+1]=J.y,Ha[Y+2]=J.z,Ha[Y+3]=K.x,Ha[Y+4]=K.y,Ha[Y+5]=K.z,Ha[Y+6]=L.x,Ha[Y+7]=L.y,Ha[Y+8]=L.z,Ha[Y+9]=aa.x,Ha[Y+10]=aa.y,Ha[Y+11]=aa.z,Wa.morphNormals&&
(rb?(Tb=Vc[Ja].vertexNormals[ac],Ab=Tb.a,Bb=Tb.b,Cb=Tb.c,ob=Tb.d):ob=Cb=Bb=Ab=Vc[Ja].faceNormals[ac],Ia=gc[Ja],Ia[Y]=Ab.x,Ia[Y+1]=Ab.y,Ia[Y+2]=Ab.z,Ia[Y+3]=Bb.x,Ia[Y+4]=Bb.y,Ia[Y+5]=Bb.z,Ia[Y+6]=Cb.x,Ia[Y+7]=Cb.y,Ia[Y+8]=Cb.z,Ia[Y+9]=ob.x,Ia[Y+10]=ob.y,Ia[Y+11]=ob.z),Y+=12;f.bindBuffer(f.ARRAY_BUFFER,ca.__webglMorphTargetsBuffers[Ja]);f.bufferData(f.ARRAY_BUFFER,fc[Ja],eb);Wa.morphNormals&&(f.bindBuffer(f.ARRAY_BUFFER,ca.__webglMorphNormalsBuffers[Ja]),f.bufferData(f.ARRAY_BUFFER,gc[Ja],eb))}}if(bc.length){z=
0;for(O=da.length;z<O;z++)H=Qa[da[z]],Gb=bc[H.a],Hb=bc[H.b],Ib=bc[H.c],wa[T]=Gb.x,wa[T+1]=Gb.y,wa[T+2]=Gb.z,wa[T+3]=Gb.w,wa[T+4]=Hb.x,wa[T+5]=Hb.y,wa[T+6]=Hb.z,wa[T+7]=Hb.w,wa[T+8]=Ib.x,wa[T+9]=Ib.y,wa[T+10]=Ib.z,wa[T+11]=Ib.w,Jb=kc[H.a],Kb=kc[H.b],Lb=kc[H.c],va[T]=Jb.x,va[T+1]=Jb.y,va[T+2]=Jb.z,va[T+3]=Jb.w,va[T+4]=Kb.x,va[T+5]=Kb.y,va[T+6]=Kb.z,va[T+7]=Kb.w,va[T+8]=Lb.x,va[T+9]=Lb.y,va[T+10]=Lb.z,va[T+11]=Lb.w,T+=12;z=0;for(O=ea.length;z<O;z++)H=Qa[ea[z]],Gb=bc[H.a],Hb=bc[H.b],Ib=bc[H.c],qb=bc[H.d],
wa[T]=Gb.x,wa[T+1]=Gb.y,wa[T+2]=Gb.z,wa[T+3]=Gb.w,wa[T+4]=Hb.x,wa[T+5]=Hb.y,wa[T+6]=Hb.z,wa[T+7]=Hb.w,wa[T+8]=Ib.x,wa[T+9]=Ib.y,wa[T+10]=Ib.z,wa[T+11]=Ib.w,wa[T+12]=qb.x,wa[T+13]=qb.y,wa[T+14]=qb.z,wa[T+15]=qb.w,Jb=kc[H.a],Kb=kc[H.b],Lb=kc[H.c],Ec=kc[H.d],va[T]=Jb.x,va[T+1]=Jb.y,va[T+2]=Jb.z,va[T+3]=Jb.w,va[T+4]=Kb.x,va[T+5]=Kb.y,va[T+6]=Kb.z,va[T+7]=Kb.w,va[T+8]=Lb.x,va[T+9]=Lb.y,va[T+10]=Lb.z,va[T+11]=Lb.w,va[T+12]=Ec.x,va[T+13]=Ec.y,va[T+14]=Ec.z,va[T+15]=Ec.w,T+=16;0<T&&(f.bindBuffer(f.ARRAY_BUFFER,
ca.__webglSkinIndicesBuffer),f.bufferData(f.ARRAY_BUFFER,va,eb),f.bindBuffer(f.ARRAY_BUFFER,ca.__webglSkinWeightsBuffer),f.bufferData(f.ARRAY_BUFFER,wa,eb))}if(Dc&&wb){z=0;for(O=da.length;z<O;z++)H=Qa[da[z]],tb=H.vertexColors,ub=H.color,3===tb.length&&wb===THREE.VertexColors?(Db=tb[0],Eb=tb[1],Fb=tb[2]):Fb=Eb=Db=ub,La[Ba]=Db.r,La[Ba+1]=Db.g,La[Ba+2]=Db.b,La[Ba+3]=Eb.r,La[Ba+4]=Eb.g,La[Ba+5]=Eb.b,La[Ba+6]=Fb.r,La[Ba+7]=Fb.g,La[Ba+8]=Fb.b,Ba+=9;z=0;for(O=ea.length;z<O;z++)H=Qa[ea[z]],tb=H.vertexColors,
ub=H.color,4===tb.length&&wb===THREE.VertexColors?(Db=tb[0],Eb=tb[1],Fb=tb[2],pb=tb[3]):pb=Fb=Eb=Db=ub,La[Ba]=Db.r,La[Ba+1]=Db.g,La[Ba+2]=Db.b,La[Ba+3]=Eb.r,La[Ba+4]=Eb.g,La[Ba+5]=Eb.b,La[Ba+6]=Fb.r,La[Ba+7]=Fb.g,La[Ba+8]=Fb.b,La[Ba+9]=pb.r,La[Ba+10]=pb.g,La[Ba+11]=pb.b,Ba+=12;0<Ba&&(f.bindBuffer(f.ARRAY_BUFFER,ca.__webglColorBuffer),f.bufferData(f.ARRAY_BUFFER,La,eb))}if(Cc&&Xa.hasTangents){z=0;for(O=da.length;z<O;z++)H=Qa[da[z]],Sb=H.vertexTangents,xb=Sb[0],yb=Sb[1],zb=Sb[2],ua[na]=xb.x,ua[na+1]=
xb.y,ua[na+2]=xb.z,ua[na+3]=xb.w,ua[na+4]=yb.x,ua[na+5]=yb.y,ua[na+6]=yb.z,ua[na+7]=yb.w,ua[na+8]=zb.x,ua[na+9]=zb.y,ua[na+10]=zb.z,ua[na+11]=zb.w,na+=12;z=0;for(O=ea.length;z<O;z++)H=Qa[ea[z]],Sb=H.vertexTangents,xb=Sb[0],yb=Sb[1],zb=Sb[2],nb=Sb[3],ua[na]=xb.x,ua[na+1]=xb.y,ua[na+2]=xb.z,ua[na+3]=xb.w,ua[na+4]=yb.x,ua[na+5]=yb.y,ua[na+6]=yb.z,ua[na+7]=yb.w,ua[na+8]=zb.x,ua[na+9]=zb.y,ua[na+10]=zb.z,ua[na+11]=zb.w,ua[na+12]=nb.x,ua[na+13]=nb.y,ua[na+14]=nb.z,ua[na+15]=nb.w,na+=16;f.bindBuffer(f.ARRAY_BUFFER,
ca.__webglTangentBuffer);f.bufferData(f.ARRAY_BUFFER,ua,eb)}if(Bc&&vb){z=0;for(O=da.length;z<O;z++)if(H=Qa[da[z]],oc=H.vertexNormals,Zb=H.normal,3===oc.length&&rb)for(ka=0;3>ka;ka++)$b=oc[ka],gb[Pa]=$b.x,gb[Pa+1]=$b.y,gb[Pa+2]=$b.z,Pa+=3;else for(ka=0;3>ka;ka++)gb[Pa]=Zb.x,gb[Pa+1]=Zb.y,gb[Pa+2]=Zb.z,Pa+=3;z=0;for(O=ea.length;z<O;z++)if(H=Qa[ea[z]],oc=H.vertexNormals,Zb=H.normal,4===oc.length&&rb)for(ka=0;4>ka;ka++)$b=oc[ka],gb[Pa]=$b.x,gb[Pa+1]=$b.y,gb[Pa+2]=$b.z,Pa+=3;else for(ka=0;4>ka;ka++)gb[Pa]=
Zb.x,gb[Pa+1]=Zb.y,gb[Pa+2]=Zb.z,Pa+=3;f.bindBuffer(f.ARRAY_BUFFER,ca.__webglNormalBuffer);f.bufferData(f.ARRAY_BUFFER,gb,eb)}if(nc&&qd&&Rb){z=0;for(O=da.length;z<O;z++)if(Yb=da[z],pc=qd[Yb],void 0!==pc)for(ka=0;3>ka;ka++)rc=pc[ka],Fc[Ub]=rc.x,Fc[Ub+1]=rc.y,Ub+=2;z=0;for(O=ea.length;z<O;z++)if(Yb=ea[z],pc=qd[Yb],void 0!==pc)for(ka=0;4>ka;ka++)rc=pc[ka],Fc[Ub]=rc.x,Fc[Ub+1]=rc.y,Ub+=2;0<Ub&&(f.bindBuffer(f.ARRAY_BUFFER,ca.__webglUVBuffer),f.bufferData(f.ARRAY_BUFFER,Fc,eb))}if(nc&&rd&&Rb){z=0;for(O=
da.length;z<O;z++)if(Yb=da[z],qc=rd[Yb],void 0!==qc)for(ka=0;3>ka;ka++)sc=qc[ka],Gc[Vb]=sc.x,Gc[Vb+1]=sc.y,Vb+=2;z=0;for(O=ea.length;z<O;z++)if(Yb=ea[z],qc=rd[Yb],void 0!==qc)for(ka=0;4>ka;ka++)sc=qc[ka],Gc[Vb]=sc.x,Gc[Vb+1]=sc.y,Vb+=2;0<Vb&&(f.bindBuffer(f.ARRAY_BUFFER,ca.__webglUV2Buffer),f.bufferData(f.ARRAY_BUFFER,Gc,eb))}if(wc){z=0;for(O=da.length;z<O;z++)Mb[fb]=Aa,Mb[fb+1]=Aa+1,Mb[fb+2]=Aa+2,fb+=3,ab[Ua]=Aa,ab[Ua+1]=Aa+1,ab[Ua+2]=Aa,ab[Ua+3]=Aa+2,ab[Ua+4]=Aa+1,ab[Ua+5]=Aa+2,Ua+=6,Aa+=3;z=0;
for(O=ea.length;z<O;z++)Mb[fb]=Aa,Mb[fb+1]=Aa+1,Mb[fb+2]=Aa+3,Mb[fb+3]=Aa+1,Mb[fb+4]=Aa+2,Mb[fb+5]=Aa+3,fb+=6,ab[Ua]=Aa,ab[Ua+1]=Aa+1,ab[Ua+2]=Aa,ab[Ua+3]=Aa+3,ab[Ua+4]=Aa+1,ab[Ua+5]=Aa+2,ab[Ua+6]=Aa+2,ab[Ua+7]=Aa+3,Ua+=8,Aa+=4;f.bindBuffer(f.ELEMENT_ARRAY_BUFFER,ca.__webglFaceBuffer);f.bufferData(f.ELEMENT_ARRAY_BUFFER,Mb,eb);f.bindBuffer(f.ELEMENT_ARRAY_BUFFER,ca.__webglLineBuffer);f.bufferData(f.ELEMENT_ARRAY_BUFFER,ab,eb)}if(hc){ka=0;for(ec=hc.length;ka<ec;ka++)if(q=hc[ka],q.__original.needsUpdate){r=
0;if(1===q.size)if(void 0===q.boundTo||"vertices"===q.boundTo){z=0;for(O=da.length;z<O;z++)H=Qa[da[z]],q.array[r]=q.value[H.a],q.array[r+1]=q.value[H.b],q.array[r+2]=q.value[H.c],r+=3;z=0;for(O=ea.length;z<O;z++)H=Qa[ea[z]],q.array[r]=q.value[H.a],q.array[r+1]=q.value[H.b],q.array[r+2]=q.value[H.c],q.array[r+3]=q.value[H.d],r+=4}else{if("faces"===q.boundTo){z=0;for(O=da.length;z<O;z++)la=q.value[da[z]],q.array[r]=la,q.array[r+1]=la,q.array[r+2]=la,r+=3;z=0;for(O=ea.length;z<O;z++)la=q.value[ea[z]],
q.array[r]=la,q.array[r+1]=la,q.array[r+2]=la,q.array[r+3]=la,r+=4}}else if(2===q.size)if(void 0===q.boundTo||"vertices"===q.boundTo){z=0;for(O=da.length;z<O;z++)H=Qa[da[z]],J=q.value[H.a],K=q.value[H.b],L=q.value[H.c],q.array[r]=J.x,q.array[r+1]=J.y,q.array[r+2]=K.x,q.array[r+3]=K.y,q.array[r+4]=L.x,q.array[r+5]=L.y,r+=6;z=0;for(O=ea.length;z<O;z++)H=Qa[ea[z]],J=q.value[H.a],K=q.value[H.b],L=q.value[H.c],aa=q.value[H.d],q.array[r]=J.x,q.array[r+1]=J.y,q.array[r+2]=K.x,q.array[r+3]=K.y,q.array[r+
4]=L.x,q.array[r+5]=L.y,q.array[r+6]=aa.x,q.array[r+7]=aa.y,r+=8}else{if("faces"===q.boundTo){z=0;for(O=da.length;z<O;z++)L=K=J=la=q.value[da[z]],q.array[r]=J.x,q.array[r+1]=J.y,q.array[r+2]=K.x,q.array[r+3]=K.y,q.array[r+4]=L.x,q.array[r+5]=L.y,r+=6;z=0;for(O=ea.length;z<O;z++)aa=L=K=J=la=q.value[ea[z]],q.array[r]=J.x,q.array[r+1]=J.y,q.array[r+2]=K.x,q.array[r+3]=K.y,q.array[r+4]=L.x,q.array[r+5]=L.y,q.array[r+6]=aa.x,q.array[r+7]=aa.y,r+=8}}else if(3===q.size){var S;S="c"===q.type?["r","g","b"]:
["x","y","z"];if(void 0===q.boundTo||"vertices"===q.boundTo){z=0;for(O=da.length;z<O;z++)H=Qa[da[z]],J=q.value[H.a],K=q.value[H.b],L=q.value[H.c],q.array[r]=J[S[0]],q.array[r+1]=J[S[1]],q.array[r+2]=J[S[2]],q.array[r+3]=K[S[0]],q.array[r+4]=K[S[1]],q.array[r+5]=K[S[2]],q.array[r+6]=L[S[0]],q.array[r+7]=L[S[1]],q.array[r+8]=L[S[2]],r+=9;z=0;for(O=ea.length;z<O;z++)H=Qa[ea[z]],J=q.value[H.a],K=q.value[H.b],L=q.value[H.c],aa=q.value[H.d],q.array[r]=J[S[0]],q.array[r+1]=J[S[1]],q.array[r+2]=J[S[2]],q.array[r+
3]=K[S[0]],q.array[r+4]=K[S[1]],q.array[r+5]=K[S[2]],q.array[r+6]=L[S[0]],q.array[r+7]=L[S[1]],q.array[r+8]=L[S[2]],q.array[r+9]=aa[S[0]],q.array[r+10]=aa[S[1]],q.array[r+11]=aa[S[2]],r+=12}else if("faces"===q.boundTo){z=0;for(O=da.length;z<O;z++)L=K=J=la=q.value[da[z]],q.array[r]=J[S[0]],q.array[r+1]=J[S[1]],q.array[r+2]=J[S[2]],q.array[r+3]=K[S[0]],q.array[r+4]=K[S[1]],q.array[r+5]=K[S[2]],q.array[r+6]=L[S[0]],q.array[r+7]=L[S[1]],q.array[r+8]=L[S[2]],r+=9;z=0;for(O=ea.length;z<O;z++)aa=L=K=J=la=
q.value[ea[z]],q.array[r]=J[S[0]],q.array[r+1]=J[S[1]],q.array[r+2]=J[S[2]],q.array[r+3]=K[S[0]],q.array[r+4]=K[S[1]],q.array[r+5]=K[S[2]],q.array[r+6]=L[S[0]],q.array[r+7]=L[S[1]],q.array[r+8]=L[S[2]],q.array[r+9]=aa[S[0]],q.array[r+10]=aa[S[1]],q.array[r+11]=aa[S[2]],r+=12}else if("faceVertices"===q.boundTo){z=0;for(O=da.length;z<O;z++)la=q.value[da[z]],J=la[0],K=la[1],L=la[2],q.array[r]=J[S[0]],q.array[r+1]=J[S[1]],q.array[r+2]=J[S[2]],q.array[r+3]=K[S[0]],q.array[r+4]=K[S[1]],q.array[r+5]=K[S[2]],
q.array[r+6]=L[S[0]],q.array[r+7]=L[S[1]],q.array[r+8]=L[S[2]],r+=9;z=0;for(O=ea.length;z<O;z++)la=q.value[ea[z]],J=la[0],K=la[1],L=la[2],aa=la[3],q.array[r]=J[S[0]],q.array[r+1]=J[S[1]],q.array[r+2]=J[S[2]],q.array[r+3]=K[S[0]],q.array[r+4]=K[S[1]],q.array[r+5]=K[S[2]],q.array[r+6]=L[S[0]],q.array[r+7]=L[S[1]],q.array[r+8]=L[S[2]],q.array[r+9]=aa[S[0]],q.array[r+10]=aa[S[1]],q.array[r+11]=aa[S[2]],r+=12}}else if(4===q.size)if(void 0===q.boundTo||"vertices"===q.boundTo){z=0;for(O=da.length;z<O;z++)H=
Qa[da[z]],J=q.value[H.a],K=q.value[H.b],L=q.value[H.c],q.array[r]=J.x,q.array[r+1]=J.y,q.array[r+2]=J.z,q.array[r+3]=J.w,q.array[r+4]=K.x,q.array[r+5]=K.y,q.array[r+6]=K.z,q.array[r+7]=K.w,q.array[r+8]=L.x,q.array[r+9]=L.y,q.array[r+10]=L.z,q.array[r+11]=L.w,r+=12;z=0;for(O=ea.length;z<O;z++)H=Qa[ea[z]],J=q.value[H.a],K=q.value[H.b],L=q.value[H.c],aa=q.value[H.d],q.array[r]=J.x,q.array[r+1]=J.y,q.array[r+2]=J.z,q.array[r+3]=J.w,q.array[r+4]=K.x,q.array[r+5]=K.y,q.array[r+6]=K.z,q.array[r+7]=K.w,q.array[r+
8]=L.x,q.array[r+9]=L.y,q.array[r+10]=L.z,q.array[r+11]=L.w,q.array[r+12]=aa.x,q.array[r+13]=aa.y,q.array[r+14]=aa.z,q.array[r+15]=aa.w,r+=16}else if("faces"===q.boundTo){z=0;for(O=da.length;z<O;z++)L=K=J=la=q.value[da[z]],q.array[r]=J.x,q.array[r+1]=J.y,q.array[r+2]=J.z,q.array[r+3]=J.w,q.array[r+4]=K.x,q.array[r+5]=K.y,q.array[r+6]=K.z,q.array[r+7]=K.w,q.array[r+8]=L.x,q.array[r+9]=L.y,q.array[r+10]=L.z,q.array[r+11]=L.w,r+=12;z=0;for(O=ea.length;z<O;z++)aa=L=K=J=la=q.value[ea[z]],q.array[r]=J.x,
q.array[r+1]=J.y,q.array[r+2]=J.z,q.array[r+3]=J.w,q.array[r+4]=K.x,q.array[r+5]=K.y,q.array[r+6]=K.z,q.array[r+7]=K.w,q.array[r+8]=L.x,q.array[r+9]=L.y,q.array[r+10]=L.z,q.array[r+11]=L.w,q.array[r+12]=aa.x,q.array[r+13]=aa.y,q.array[r+14]=aa.z,q.array[r+15]=aa.w,r+=16}else if("faceVertices"===q.boundTo){z=0;for(O=da.length;z<O;z++)la=q.value[da[z]],J=la[0],K=la[1],L=la[2],q.array[r]=J.x,q.array[r+1]=J.y,q.array[r+2]=J.z,q.array[r+3]=J.w,q.array[r+4]=K.x,q.array[r+5]=K.y,q.array[r+6]=K.z,q.array[r+
7]=K.w,q.array[r+8]=L.x,q.array[r+9]=L.y,q.array[r+10]=L.z,q.array[r+11]=L.w,r+=12;z=0;for(O=ea.length;z<O;z++)la=q.value[ea[z]],J=la[0],K=la[1],L=la[2],aa=la[3],q.array[r]=J.x,q.array[r+1]=J.y,q.array[r+2]=J.z,q.array[r+3]=J.w,q.array[r+4]=K.x,q.array[r+5]=K.y,q.array[r+6]=K.z,q.array[r+7]=K.w,q.array[r+8]=L.x,q.array[r+9]=L.y,q.array[r+10]=L.z,q.array[r+11]=L.w,q.array[r+12]=aa.x,q.array[r+13]=aa.y,q.array[r+14]=aa.z,q.array[r+15]=aa.w,r+=16}f.bindBuffer(f.ARRAY_BUFFER,q.buffer);f.bufferData(f.ARRAY_BUFFER,
q.array,eb)}}sb&&(delete ca.__inittedArrays,delete ca.__colorArray,delete ca.__normalArray,delete ca.__tangentArray,delete ca.__uvArray,delete ca.__uv2Array,delete ca.__faceArray,delete ca.__vertexArray,delete ca.__lineArray,delete ca.__skinIndexArray,delete ca.__skinWeightArray)}}G.verticesNeedUpdate=!1;G.morphTargetsNeedUpdate=!1;G.elementsNeedUpdate=!1;G.uvsNeedUpdate=!1;G.normalsNeedUpdate=!1;G.colorsNeedUpdate=!1;G.tangentsNeedUpdate=!1;G.buffersNeedUpdate=!1;Ma.attributes&&x(Ma)}else if(Ta instanceof
THREE.Ribbon){Ma=e(Ta,G);Sa=Ma.attributes&&y(Ma);if(G.verticesNeedUpdate||G.colorsNeedUpdate||G.normalsNeedUpdate||Sa){var hb=G,Wc=f.DYNAMIC_DRAW,Hc=void 0,Ic=void 0,Jc=void 0,Xc=void 0,ma=void 0,Yc=void 0,Zc=void 0,$c=void 0,xc=void 0,Na=void 0,tc=void 0,sa=void 0,Ya=void 0,yc=hb.vertices,zc=hb.colors,Ac=hb.normals,Pc=yc.length,Rc=zc.length,Sc=Ac.length,ad=hb.__vertexArray,bd=hb.__colorArray,cd=hb.__normalArray,Tc=hb.colorsNeedUpdate,Uc=hb.normalsNeedUpdate,sd=hb.__webglCustomAttributesList;if(hb.verticesNeedUpdate){for(Hc=
0;Hc<Pc;Hc++)Xc=yc[Hc],ma=3*Hc,ad[ma]=Xc.x,ad[ma+1]=Xc.y,ad[ma+2]=Xc.z;f.bindBuffer(f.ARRAY_BUFFER,hb.__webglVertexBuffer);f.bufferData(f.ARRAY_BUFFER,ad,Wc)}if(Tc){for(Ic=0;Ic<Rc;Ic++)Yc=zc[Ic],ma=3*Ic,bd[ma]=Yc.r,bd[ma+1]=Yc.g,bd[ma+2]=Yc.b;f.bindBuffer(f.ARRAY_BUFFER,hb.__webglColorBuffer);f.bufferData(f.ARRAY_BUFFER,bd,Wc)}if(Uc){for(Jc=0;Jc<Sc;Jc++)Zc=Ac[Jc],ma=3*Jc,cd[ma]=Zc.x,cd[ma+1]=Zc.y,cd[ma+2]=Zc.z;f.bindBuffer(f.ARRAY_BUFFER,hb.__webglNormalBuffer);f.bufferData(f.ARRAY_BUFFER,cd,Wc)}if(sd){$c=
0;for(xc=sd.length;$c<xc;$c++)if(sa=sd[$c],sa.needsUpdate&&(void 0===sa.boundTo||"vertices"===sa.boundTo)){ma=0;tc=sa.value.length;if(1===sa.size)for(Na=0;Na<tc;Na++)sa.array[Na]=sa.value[Na];else if(2===sa.size)for(Na=0;Na<tc;Na++)Ya=sa.value[Na],sa.array[ma]=Ya.x,sa.array[ma+1]=Ya.y,ma+=2;else if(3===sa.size)if("c"===sa.type)for(Na=0;Na<tc;Na++)Ya=sa.value[Na],sa.array[ma]=Ya.r,sa.array[ma+1]=Ya.g,sa.array[ma+2]=Ya.b,ma+=3;else for(Na=0;Na<tc;Na++)Ya=sa.value[Na],sa.array[ma]=Ya.x,sa.array[ma+1]=
Ya.y,sa.array[ma+2]=Ya.z,ma+=3;else if(4===sa.size)for(Na=0;Na<tc;Na++)Ya=sa.value[Na],sa.array[ma]=Ya.x,sa.array[ma+1]=Ya.y,sa.array[ma+2]=Ya.z,sa.array[ma+3]=Ya.w,ma+=4;f.bindBuffer(f.ARRAY_BUFFER,sa.buffer);f.bufferData(f.ARRAY_BUFFER,sa.array,Wc)}}}G.verticesNeedUpdate=!1;G.colorsNeedUpdate=!1;G.normalsNeedUpdate=!1;Ma.attributes&&x(Ma)}else if(Ta instanceof THREE.Line)if(G instanceof THREE.BufferGeometry)(G.verticesNeedUpdate||G.colorsNeedUpdate)&&i(G,f.DYNAMIC_DRAW,!G.dynamic),G.verticesNeedUpdate=
!1,G.colorsNeedUpdate=!1;else{Ma=e(Ta,G);Sa=Ma.attributes&&y(Ma);if(G.verticesNeedUpdate||G.colorsNeedUpdate||G.lineDistancesNeedUpdate||Sa){var ib=G,dd=f.DYNAMIC_DRAW,Kc=void 0,Lc=void 0,Mc=void 0,ed=void 0,xa=void 0,fd=void 0,yd=ib.vertices,zd=ib.colors,Ad=ib.lineDistances,kd=yd.length,ld=zd.length,nd=Ad.length,gd=ib.__vertexArray,hd=ib.__colorArray,Bd=ib.__lineDistanceArray,od=ib.colorsNeedUpdate,pd=ib.lineDistancesNeedUpdate,td=ib.__webglCustomAttributesList,id=void 0,Cd=void 0,Oa=void 0,uc=void 0,
Za=void 0,ta=void 0;if(ib.verticesNeedUpdate){for(Kc=0;Kc<kd;Kc++)ed=yd[Kc],xa=3*Kc,gd[xa]=ed.x,gd[xa+1]=ed.y,gd[xa+2]=ed.z;f.bindBuffer(f.ARRAY_BUFFER,ib.__webglVertexBuffer);f.bufferData(f.ARRAY_BUFFER,gd,dd)}if(od){for(Lc=0;Lc<ld;Lc++)fd=zd[Lc],xa=3*Lc,hd[xa]=fd.r,hd[xa+1]=fd.g,hd[xa+2]=fd.b;f.bindBuffer(f.ARRAY_BUFFER,ib.__webglColorBuffer);f.bufferData(f.ARRAY_BUFFER,hd,dd)}if(pd){for(Mc=0;Mc<nd;Mc++)Bd[Mc]=Ad[Mc];f.bindBuffer(f.ARRAY_BUFFER,ib.__webglLineDistanceBuffer);f.bufferData(f.ARRAY_BUFFER,
Bd,dd)}if(td){id=0;for(Cd=td.length;id<Cd;id++)if(ta=td[id],ta.needsUpdate&&(void 0===ta.boundTo||"vertices"===ta.boundTo)){xa=0;uc=ta.value.length;if(1===ta.size)for(Oa=0;Oa<uc;Oa++)ta.array[Oa]=ta.value[Oa];else if(2===ta.size)for(Oa=0;Oa<uc;Oa++)Za=ta.value[Oa],ta.array[xa]=Za.x,ta.array[xa+1]=Za.y,xa+=2;else if(3===ta.size)if("c"===ta.type)for(Oa=0;Oa<uc;Oa++)Za=ta.value[Oa],ta.array[xa]=Za.r,ta.array[xa+1]=Za.g,ta.array[xa+2]=Za.b,xa+=3;else for(Oa=0;Oa<uc;Oa++)Za=ta.value[Oa],ta.array[xa]=Za.x,
ta.array[xa+1]=Za.y,ta.array[xa+2]=Za.z,xa+=3;else if(4===ta.size)for(Oa=0;Oa<uc;Oa++)Za=ta.value[Oa],ta.array[xa]=Za.x,ta.array[xa+1]=Za.y,ta.array[xa+2]=Za.z,ta.array[xa+3]=Za.w,xa+=4;f.bindBuffer(f.ARRAY_BUFFER,ta.buffer);f.bufferData(f.ARRAY_BUFFER,ta.array,dd)}}}G.verticesNeedUpdate=!1;G.colorsNeedUpdate=!1;G.lineDistancesNeedUpdate=!1;Ma.attributes&&x(Ma)}else if(Ta instanceof THREE.ParticleSystem)if(G instanceof THREE.BufferGeometry)(G.verticesNeedUpdate||G.colorsNeedUpdate)&&i(G,f.DYNAMIC_DRAW,
!G.dynamic),G.verticesNeedUpdate=!1,G.colorsNeedUpdate=!1;else{Ma=e(Ta,G);Sa=Ma.attributes&&y(Ma);if(G.verticesNeedUpdate||G.colorsNeedUpdate||Ta.sortParticles||Sa){var Nb=G,ud=f.DYNAMIC_DRAW,Nc=Ta,$a=void 0,Ob=void 0,Pb=void 0,V=void 0,Qb=void 0,dc=void 0,jd=Nb.vertices,vd=jd.length,wd=Nb.colors,Dd=wd.length,lc=Nb.__vertexArray,mc=Nb.__colorArray,Wb=Nb.__sortArray,Ed=Nb.verticesNeedUpdate,Fd=Nb.colorsNeedUpdate,Xb=Nb.__webglCustomAttributesList,jb=void 0,vc=void 0,$=void 0,kb=void 0,oa=void 0,U=
void 0;if(Nc.sortParticles){md.copy(Qc);md.multiply(Nc.matrixWorld);for($a=0;$a<vd;$a++)Pb=jd[$a],Ga.copy(Pb),Ga.applyProjection(md),Wb[$a]=[Ga.z,$a];Wb.sort(t);for($a=0;$a<vd;$a++)Pb=jd[Wb[$a][1]],V=3*$a,lc[V]=Pb.x,lc[V+1]=Pb.y,lc[V+2]=Pb.z;for(Ob=0;Ob<Dd;Ob++)V=3*Ob,dc=wd[Wb[Ob][1]],mc[V]=dc.r,mc[V+1]=dc.g,mc[V+2]=dc.b;if(Xb){jb=0;for(vc=Xb.length;jb<vc;jb++)if(U=Xb[jb],void 0===U.boundTo||"vertices"===U.boundTo)if(V=0,kb=U.value.length,1===U.size)for($=0;$<kb;$++)Qb=Wb[$][1],U.array[$]=U.value[Qb];
else if(2===U.size)for($=0;$<kb;$++)Qb=Wb[$][1],oa=U.value[Qb],U.array[V]=oa.x,U.array[V+1]=oa.y,V+=2;else if(3===U.size)if("c"===U.type)for($=0;$<kb;$++)Qb=Wb[$][1],oa=U.value[Qb],U.array[V]=oa.r,U.array[V+1]=oa.g,U.array[V+2]=oa.b,V+=3;else for($=0;$<kb;$++)Qb=Wb[$][1],oa=U.value[Qb],U.array[V]=oa.x,U.array[V+1]=oa.y,U.array[V+2]=oa.z,V+=3;else if(4===U.size)for($=0;$<kb;$++)Qb=Wb[$][1],oa=U.value[Qb],U.array[V]=oa.x,U.array[V+1]=oa.y,U.array[V+2]=oa.z,U.array[V+3]=oa.w,V+=4}}else{if(Ed)for($a=
0;$a<vd;$a++)Pb=jd[$a],V=3*$a,lc[V]=Pb.x,lc[V+1]=Pb.y,lc[V+2]=Pb.z;if(Fd)for(Ob=0;Ob<Dd;Ob++)dc=wd[Ob],V=3*Ob,mc[V]=dc.r,mc[V+1]=dc.g,mc[V+2]=dc.b;if(Xb){jb=0;for(vc=Xb.length;jb<vc;jb++)if(U=Xb[jb],U.needsUpdate&&(void 0===U.boundTo||"vertices"===U.boundTo))if(kb=U.value.length,V=0,1===U.size)for($=0;$<kb;$++)U.array[$]=U.value[$];else if(2===U.size)for($=0;$<kb;$++)oa=U.value[$],U.array[V]=oa.x,U.array[V+1]=oa.y,V+=2;else if(3===U.size)if("c"===U.type)for($=0;$<kb;$++)oa=U.value[$],U.array[V]=oa.r,
U.array[V+1]=oa.g,U.array[V+2]=oa.b,V+=3;else for($=0;$<kb;$++)oa=U.value[$],U.array[V]=oa.x,U.array[V+1]=oa.y,U.array[V+2]=oa.z,V+=3;else if(4===U.size)for($=0;$<kb;$++)oa=U.value[$],U.array[V]=oa.x,U.array[V+1]=oa.y,U.array[V+2]=oa.z,U.array[V+3]=oa.w,V+=4}}if(Ed||Nc.sortParticles)f.bindBuffer(f.ARRAY_BUFFER,Nb.__webglVertexBuffer),f.bufferData(f.ARRAY_BUFFER,lc,ud);if(Fd||Nc.sortParticles)f.bindBuffer(f.ARRAY_BUFFER,Nb.__webglColorBuffer),f.bufferData(f.ARRAY_BUFFER,mc,ud);if(Xb){jb=0;for(vc=Xb.length;jb<
vc;jb++)if(U=Xb[jb],U.needsUpdate||Nc.sortParticles)f.bindBuffer(f.ARRAY_BUFFER,U.buffer),f.bufferData(f.ARRAY_BUFFER,U.array,ud)}}G.verticesNeedUpdate=!1;G.colorsNeedUpdate=!1;Ma.attributes&&x(Ma)}}};this.initMaterial=function(a,b,c,d){var e,g,h,i;a.addEventListener("dispose",Uc);var j,k,l,p,m;a instanceof THREE.MeshDepthMaterial?m="depth":a instanceof THREE.MeshNormalMaterial?m="normal":a instanceof THREE.MeshBasicMaterial?m="basic":a instanceof THREE.MeshLambertMaterial?m="lambert":a instanceof
THREE.MeshPhongMaterial?m="phong":a instanceof THREE.LineBasicMaterial?m="basic":a instanceof THREE.LineDashedMaterial?m="dashed":a instanceof THREE.ParticleBasicMaterial&&(m="particle_basic");if(m){var n=THREE.ShaderLib[m];a.uniforms=THREE.UniformsUtils.clone(n.uniforms);a.vertexShader=n.vertexShader;a.fragmentShader=n.fragmentShader}var t,u,v;e=h=u=v=n=0;for(g=b.length;e<g;e++)t=b[e],t.onlyShadow||(t instanceof THREE.DirectionalLight&&h++,t instanceof THREE.PointLight&&u++,t instanceof THREE.SpotLight&&
v++,t instanceof THREE.HemisphereLight&&n++);e=h;g=u;h=v;i=n;n=t=0;for(v=b.length;n<v;n++)u=b[n],u.castShadow&&(u instanceof THREE.SpotLight&&t++,u instanceof THREE.DirectionalLight&&!u.shadowCascade&&t++);p=t;nc&&d&&d.useVertexTexture?l=1024:(b=f.getParameter(f.MAX_VERTEX_UNIFORM_VECTORS),b=Math.floor((b-20)/4),void 0!==d&&d instanceof THREE.SkinnedMesh&&(b=Math.min(d.bones.length,b),b<d.bones.length&&console.warn("WebGLRenderer: too many bones - "+d.bones.length+", this GPU supports just "+b+" (try OpenGL instead of ANGLE)")),
l=b);a:{u=a.fragmentShader;v=a.vertexShader;n=a.uniforms;b=a.attributes;t=a.defines;var c={map:!!a.map,envMap:!!a.envMap,lightMap:!!a.lightMap,bumpMap:!!a.bumpMap,normalMap:!!a.normalMap,specularMap:!!a.specularMap,vertexColors:a.vertexColors,fog:c,useFog:a.fog,fogExp:c instanceof THREE.FogExp2,sizeAttenuation:a.sizeAttenuation,skinning:a.skinning,maxBones:l,useVertexTexture:nc&&d&&d.useVertexTexture,boneTextureWidth:d&&d.boneTextureWidth,boneTextureHeight:d&&d.boneTextureHeight,morphTargets:a.morphTargets,
morphNormals:a.morphNormals,maxMorphTargets:this.maxMorphTargets,maxMorphNormals:this.maxMorphNormals,maxDirLights:e,maxPointLights:g,maxSpotLights:h,maxHemiLights:i,maxShadows:p,shadowMapEnabled:this.shadowMapEnabled&&d.receiveShadow,shadowMapType:this.shadowMapType,shadowMapDebug:this.shadowMapDebug,shadowMapCascade:this.shadowMapCascade,alphaTest:a.alphaTest,metal:a.metal,perPixel:a.perPixel,wrapAround:a.wrapAround,doubleSided:a.side===THREE.DoubleSide,flipSided:a.side===THREE.BackSide},s,x,w,
d=[];m?d.push(m):(d.push(u),d.push(v));for(x in t)d.push(x),d.push(t[x]);for(s in c)d.push(s),d.push(c[s]);m=d.join();s=0;for(x=Sa.length;s<x;s++)if(d=Sa[s],d.code===m){d.usedTimes++;k=d.program;break a}s="SHADOWMAP_TYPE_BASIC";c.shadowMapType===THREE.PCFShadowMap?s="SHADOWMAP_TYPE_PCF":c.shadowMapType===THREE.PCFSoftShadowMap&&(s="SHADOWMAP_TYPE_PCF_SOFT");x=[];for(w in t)d=t[w],!1!==d&&(d="#define "+w+" "+d,x.push(d));d=x.join("\n");w=f.createProgram();x=["precision "+fa+" float;",d,Dc?"#define VERTEX_TEXTURES":
"",M.gammaInput?"#define GAMMA_INPUT":"",M.gammaOutput?"#define GAMMA_OUTPUT":"",M.physicallyBasedShading?"#define PHYSICALLY_BASED_SHADING":"","#define MAX_DIR_LIGHTS "+c.maxDirLights,"#define MAX_POINT_LIGHTS "+c.maxPointLights,"#define MAX_SPOT_LIGHTS "+c.maxSpotLights,"#define MAX_HEMI_LIGHTS "+c.maxHemiLights,"#define MAX_SHADOWS "+c.maxShadows,"#define MAX_BONES "+c.maxBones,c.map?"#define USE_MAP":"",c.envMap?"#define USE_ENVMAP":"",c.lightMap?"#define USE_LIGHTMAP":"",c.bumpMap?"#define USE_BUMPMAP":
"",c.normalMap?"#define USE_NORMALMAP":"",c.specularMap?"#define USE_SPECULARMAP":"",c.vertexColors?"#define USE_COLOR":"",c.skinning?"#define USE_SKINNING":"",c.useVertexTexture?"#define BONE_TEXTURE":"",c.boneTextureWidth?"#define N_BONE_PIXEL_X "+c.boneTextureWidth.toFixed(1):"",c.boneTextureHeight?"#define N_BONE_PIXEL_Y "+c.boneTextureHeight.toFixed(1):"",c.morphTargets?"#define USE_MORPHTARGETS":"",c.morphNormals?"#define USE_MORPHNORMALS":"",c.perPixel?"#define PHONG_PER_PIXEL":"",c.wrapAround?
"#define WRAP_AROUND":"",c.doubleSided?"#define DOUBLE_SIDED":"",c.flipSided?"#define FLIP_SIDED":"",c.shadowMapEnabled?"#define USE_SHADOWMAP":"",c.shadowMapEnabled?"#define "+s:"",c.shadowMapDebug?"#define SHADOWMAP_DEBUG":"",c.shadowMapCascade?"#define SHADOWMAP_CASCADE":"",c.sizeAttenuation?"#define USE_SIZEATTENUATION":"","uniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n#ifdef USE_COLOR\nattribute vec3 color;\n#endif\n#ifdef USE_MORPHTARGETS\nattribute vec3 morphTarget0;\nattribute vec3 morphTarget1;\nattribute vec3 morphTarget2;\nattribute vec3 morphTarget3;\n#ifdef USE_MORPHNORMALS\nattribute vec3 morphNormal0;\nattribute vec3 morphNormal1;\nattribute vec3 morphNormal2;\nattribute vec3 morphNormal3;\n#else\nattribute vec3 morphTarget4;\nattribute vec3 morphTarget5;\nattribute vec3 morphTarget6;\nattribute vec3 morphTarget7;\n#endif\n#endif\n#ifdef USE_SKINNING\nattribute vec4 skinIndex;\nattribute vec4 skinWeight;\n#endif\n"].join("\n");
s=["precision "+fa+" float;",c.bumpMap||c.normalMap?"#extension GL_OES_standard_derivatives : enable":"",d,"#define MAX_DIR_LIGHTS "+c.maxDirLights,"#define MAX_POINT_LIGHTS "+c.maxPointLights,"#define MAX_SPOT_LIGHTS "+c.maxSpotLights,"#define MAX_HEMI_LIGHTS "+c.maxHemiLights,"#define MAX_SHADOWS "+c.maxShadows,c.alphaTest?"#define ALPHATEST "+c.alphaTest:"",M.gammaInput?"#define GAMMA_INPUT":"",M.gammaOutput?"#define GAMMA_OUTPUT":"",M.physicallyBasedShading?"#define PHYSICALLY_BASED_SHADING":
"",c.useFog&&c.fog?"#define USE_FOG":"",c.useFog&&c.fogExp?"#define FOG_EXP2":"",c.map?"#define USE_MAP":"",c.envMap?"#define USE_ENVMAP":"",c.lightMap?"#define USE_LIGHTMAP":"",c.bumpMap?"#define USE_BUMPMAP":"",c.normalMap?"#define USE_NORMALMAP":"",c.specularMap?"#define USE_SPECULARMAP":"",c.vertexColors?"#define USE_COLOR":"",c.metal?"#define METAL":"",c.perPixel?"#define PHONG_PER_PIXEL":"",c.wrapAround?"#define WRAP_AROUND":"",c.doubleSided?"#define DOUBLE_SIDED":"",c.flipSided?"#define FLIP_SIDED":
"",c.shadowMapEnabled?"#define USE_SHADOWMAP":"",c.shadowMapEnabled?"#define "+s:"",c.shadowMapDebug?"#define SHADOWMAP_DEBUG":"",c.shadowMapCascade?"#define SHADOWMAP_CASCADE":"","uniform mat4 viewMatrix;\nuniform vec3 cameraPosition;\n"].join("\n");s=B("fragment",s+u);x=B("vertex",x+v);f.attachShader(w,x);f.attachShader(w,s);f.linkProgram(w);f.getProgramParameter(w,f.LINK_STATUS)||console.error("Could not initialise shader\nVALIDATE_STATUS: "+f.getProgramParameter(w,f.VALIDATE_STATUS)+", gl error ["+
f.getError()+"]");f.deleteShader(s);f.deleteShader(x);w.uniforms={};w.attributes={};var y;s="viewMatrix modelViewMatrix projectionMatrix normalMatrix modelMatrix cameraPosition morphTargetInfluences".split(" ");c.useVertexTexture?s.push("boneTexture"):s.push("boneGlobalMatrices");for(y in n)s.push(y);y=s;s=0;for(x=y.length;s<x;s++)n=y[s],w.uniforms[n]=f.getUniformLocation(w,n);s="position normal uv uv2 tangent color skinIndex skinWeight lineDistance".split(" ");for(y=0;y<c.maxMorphTargets;y++)s.push("morphTarget"+
y);for(y=0;y<c.maxMorphNormals;y++)s.push("morphNormal"+y);for(k in b)s.push(k);k=s;y=0;for(b=k.length;y<b;y++)s=k[y],w.attributes[s]=f.getAttribLocation(w,s);w.id=kd++;Sa.push({program:w,code:m,usedTimes:1});M.info.memory.programs=Sa.length;k=w}a.program=k;y=a.program.attributes;if(a.morphTargets){a.numSupportedMorphTargets=0;b="morphTarget";for(k=0;k<this.maxMorphTargets;k++)w=b+k,0<=y[w]&&a.numSupportedMorphTargets++}if(a.morphNormals){a.numSupportedMorphNormals=0;b="morphNormal";for(k=0;k<this.maxMorphNormals;k++)w=
b+k,0<=y[w]&&a.numSupportedMorphNormals++}a.uniformsList=[];for(j in a.uniforms)a.uniformsList.push([a.uniforms[j],j])};this.setFaceCulling=function(a,b){a===THREE.CullFaceNone?f.disable(f.CULL_FACE):(b===THREE.FrontFaceDirectionCW?f.frontFace(f.CW):f.frontFace(f.CCW),a===THREE.CullFaceBack?f.cullFace(f.BACK):a===THREE.CullFaceFront?f.cullFace(f.FRONT):f.cullFace(f.FRONT_AND_BACK),f.enable(f.CULL_FACE))};this.setMaterialFaces=function(a){var b=a.side===THREE.DoubleSide,a=a.side===THREE.BackSide;ga!==
b&&(b?f.disable(f.CULL_FACE):f.enable(f.CULL_FACE),ga=b);za!==a&&(a?f.frontFace(f.CW):f.frontFace(f.CCW),za=a)};this.setDepthTest=function(a){ja!==a&&(a?f.enable(f.DEPTH_TEST):f.disable(f.DEPTH_TEST),ja=a)};this.setDepthWrite=function(a){mb!==a&&(f.depthMask(a),mb=a)};this.setBlending=function(a,b,c,d){a!==ia&&(a===THREE.NoBlending?f.disable(f.BLEND):a===THREE.AdditiveBlending?(f.enable(f.BLEND),f.blendEquation(f.FUNC_ADD),f.blendFunc(f.SRC_ALPHA,f.ONE)):a===THREE.SubtractiveBlending?(f.enable(f.BLEND),
f.blendEquation(f.FUNC_ADD),f.blendFunc(f.ZERO,f.ONE_MINUS_SRC_COLOR)):a===THREE.MultiplyBlending?(f.enable(f.BLEND),f.blendEquation(f.FUNC_ADD),f.blendFunc(f.ZERO,f.SRC_COLOR)):a===THREE.CustomBlending?f.enable(f.BLEND):(f.enable(f.BLEND),f.blendEquationSeparate(f.FUNC_ADD,f.FUNC_ADD),f.blendFuncSeparate(f.SRC_ALPHA,f.ONE_MINUS_SRC_ALPHA,f.ONE,f.ONE_MINUS_SRC_ALPHA)),ia=a);if(a===THREE.CustomBlending){if(b!==ba&&(f.blendEquation(R(b)),ba=b),c!==Ra||d!==lb)f.blendFunc(R(c),R(d)),Ra=c,lb=d}else lb=
Ra=ba=null};this.setTexture=function(a,b){if(a.needsUpdate){a.__webglInit||(a.__webglInit=!0,a.addEventListener("dispose",Sc),a.__webglTexture=f.createTexture(),M.info.memory.textures++);f.activeTexture(f.TEXTURE0+b);f.bindTexture(f.TEXTURE_2D,a.__webglTexture);f.pixelStorei(f.UNPACK_FLIP_Y_WEBGL,a.flipY);f.pixelStorei(f.UNPACK_PREMULTIPLY_ALPHA_WEBGL,a.premultiplyAlpha);f.pixelStorei(f.UNPACK_ALIGNMENT,a.unpackAlignment);var c=a.image,d=0===(c.width&c.width-1)&&0===(c.height&c.height-1),e=R(a.format),
g=R(a.type);W(f.TEXTURE_2D,a,d);var h=a.mipmaps;if(a instanceof THREE.DataTexture)if(0<h.length&&d){for(var i=0,j=h.length;i<j;i++)c=h[i],f.texImage2D(f.TEXTURE_2D,i,e,c.width,c.height,0,e,g,c.data);a.generateMipmaps=!1}else f.texImage2D(f.TEXTURE_2D,0,e,c.width,c.height,0,e,g,c.data);else if(a instanceof THREE.CompressedTexture){i=0;for(j=h.length;i<j;i++)c=h[i],f.compressedTexImage2D(f.TEXTURE_2D,i,e,c.width,c.height,0,c.data)}else if(0<h.length&&d){i=0;for(j=h.length;i<j;i++)c=h[i],f.texImage2D(f.TEXTURE_2D,
i,e,e,g,c);a.generateMipmaps=!1}else f.texImage2D(f.TEXTURE_2D,0,e,e,g,a.image);a.generateMipmaps&&d&&f.generateMipmap(f.TEXTURE_2D);a.needsUpdate=!1;if(a.onUpdate)a.onUpdate()}else f.activeTexture(f.TEXTURE0+b),f.bindTexture(f.TEXTURE_2D,a.__webglTexture)};this.setRenderTarget=function(a){var b=a instanceof THREE.WebGLRenderTargetCube;if(a&&!a.__webglFramebuffer){void 0===a.depthBuffer&&(a.depthBuffer=!0);void 0===a.stencilBuffer&&(a.stencilBuffer=!0);a.addEventListener("dispose",Tc);a.__webglTexture=
f.createTexture();M.info.memory.textures++;var c=0===(a.width&a.width-1)&&0===(a.height&a.height-1),d=R(a.format),e=R(a.type);if(b){a.__webglFramebuffer=[];a.__webglRenderbuffer=[];f.bindTexture(f.TEXTURE_CUBE_MAP,a.__webglTexture);W(f.TEXTURE_CUBE_MAP,a,c);for(var g=0;6>g;g++){a.__webglFramebuffer[g]=f.createFramebuffer();a.__webglRenderbuffer[g]=f.createRenderbuffer();f.texImage2D(f.TEXTURE_CUBE_MAP_POSITIVE_X+g,0,d,a.width,a.height,0,d,e,null);var h=a,i=f.TEXTURE_CUBE_MAP_POSITIVE_X+g;f.bindFramebuffer(f.FRAMEBUFFER,
a.__webglFramebuffer[g]);f.framebufferTexture2D(f.FRAMEBUFFER,f.COLOR_ATTACHMENT0,i,h.__webglTexture,0);E(a.__webglRenderbuffer[g],a)}c&&f.generateMipmap(f.TEXTURE_CUBE_MAP)}else a.__webglFramebuffer=f.createFramebuffer(),a.__webglRenderbuffer=a.shareDepthFrom?a.shareDepthFrom.__webglRenderbuffer:f.createRenderbuffer(),f.bindTexture(f.TEXTURE_2D,a.__webglTexture),W(f.TEXTURE_2D,a,c),f.texImage2D(f.TEXTURE_2D,0,d,a.width,a.height,0,d,e,null),d=f.TEXTURE_2D,f.bindFramebuffer(f.FRAMEBUFFER,a.__webglFramebuffer),
f.framebufferTexture2D(f.FRAMEBUFFER,f.COLOR_ATTACHMENT0,d,a.__webglTexture,0),a.shareDepthFrom?a.depthBuffer&&!a.stencilBuffer?f.framebufferRenderbuffer(f.FRAMEBUFFER,f.DEPTH_ATTACHMENT,f.RENDERBUFFER,a.__webglRenderbuffer):a.depthBuffer&&a.stencilBuffer&&f.framebufferRenderbuffer(f.FRAMEBUFFER,f.DEPTH_STENCIL_ATTACHMENT,f.RENDERBUFFER,a.__webglRenderbuffer):E(a.__webglRenderbuffer,a),c&&f.generateMipmap(f.TEXTURE_2D);b?f.bindTexture(f.TEXTURE_CUBE_MAP,null):f.bindTexture(f.TEXTURE_2D,null);f.bindRenderbuffer(f.RENDERBUFFER,
null);f.bindFramebuffer(f.FRAMEBUFFER,null)}a?(b=b?a.__webglFramebuffer[a.activeCubeFace]:a.__webglFramebuffer,c=a.width,a=a.height,e=d=0):(b=null,c=hc,a=wc,d=fc,e=gc);b!==ec&&(f.bindFramebuffer(f.FRAMEBUFFER,b),f.viewport(d,e,c,a),ec=b);Oc=c;xc=a};this.shadowMapPlugin=new THREE.ShadowMapPlugin;this.addPrePlugin(this.shadowMapPlugin);this.addPostPlugin(new THREE.SpritePlugin);this.addPostPlugin(new THREE.LensFlarePlugin)};THREE.WebGLRenderTarget=function(a,b,c){THREE.EventDispatcher.call(this);this.width=a;this.height=b;c=c||{};this.wrapS=void 0!==c.wrapS?c.wrapS:THREE.ClampToEdgeWrapping;this.wrapT=void 0!==c.wrapT?c.wrapT:THREE.ClampToEdgeWrapping;this.magFilter=void 0!==c.magFilter?c.magFilter:THREE.LinearFilter;this.minFilter=void 0!==c.minFilter?c.minFilter:THREE.LinearMipMapLinearFilter;this.anisotropy=void 0!==c.anisotropy?c.anisotropy:1;this.offset=new THREE.Vector2(0,0);this.repeat=new THREE.Vector2(1,1);
this.format=void 0!==c.format?c.format:THREE.RGBAFormat;this.type=void 0!==c.type?c.type:THREE.UnsignedByteType;this.depthBuffer=void 0!==c.depthBuffer?c.depthBuffer:!0;this.stencilBuffer=void 0!==c.stencilBuffer?c.stencilBuffer:!0;this.generateMipmaps=!0;this.shareDepthFrom=null};
THREE.WebGLRenderTarget.prototype.clone=function(){var a=new THREE.WebGLRenderTarget(this.width,this.height);a.wrapS=this.wrapS;a.wrapT=this.wrapT;a.magFilter=this.magFilter;a.minFilter=this.minFilter;a.anisotropy=this.anisotropy;a.offset.copy(this.offset);a.repeat.copy(this.repeat);a.format=this.format;a.type=this.type;a.depthBuffer=this.depthBuffer;a.stencilBuffer=this.stencilBuffer;a.generateMipmaps=this.generateMipmaps;a.shareDepthFrom=this.shareDepthFrom;return a};
THREE.WebGLRenderTarget.prototype.dispose=function(){this.dispatchEvent({type:"dispose"})};THREE.WebGLRenderTargetCube=function(a,b,c){THREE.WebGLRenderTarget.call(this,a,b,c);this.activeCubeFace=0};THREE.WebGLRenderTargetCube.prototype=Object.create(THREE.WebGLRenderTarget.prototype);THREE.RenderableVertex=function(){this.positionWorld=new THREE.Vector3;this.positionScreen=new THREE.Vector4;this.visible=!0};THREE.RenderableVertex.prototype.copy=function(a){this.positionWorld.copy(a.positionWorld);this.positionScreen.copy(a.positionScreen)};THREE.RenderableFace3=function(){this.v1=new THREE.RenderableVertex;this.v2=new THREE.RenderableVertex;this.v3=new THREE.RenderableVertex;this.centroidModel=new THREE.Vector3;this.normalModel=new THREE.Vector3;this.normalModelView=new THREE.Vector3;this.vertexNormalsLength=0;this.vertexNormalsModel=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];this.vertexNormalsModelView=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];this.material=this.color=null;this.uvs=[[]];this.z=null};THREE.RenderableFace4=function(){this.v1=new THREE.RenderableVertex;this.v2=new THREE.RenderableVertex;this.v3=new THREE.RenderableVertex;this.v4=new THREE.RenderableVertex;this.centroidModel=new THREE.Vector3;this.normalModel=new THREE.Vector3;this.normalModelView=new THREE.Vector3;this.vertexNormalsLength=0;this.vertexNormalsModel=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];this.vertexNormalsModelView=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];
this.material=this.color=null;this.uvs=[[]];this.z=null};THREE.RenderableObject=function(){this.z=this.object=null};THREE.RenderableParticle=function(){this.rotation=this.z=this.y=this.x=this.object=null;this.scale=new THREE.Vector2;this.material=null};THREE.RenderableLine=function(){this.z=null;this.v1=new THREE.RenderableVertex;this.v2=new THREE.RenderableVertex;this.material=null};THREE.Gyroscope=function(){THREE.Object3D.call(this)};THREE.Gyroscope.prototype=Object.create(THREE.Object3D.prototype);
THREE.Gyroscope.prototype.updateMatrixWorld=function(a){this.matrixAutoUpdate&&this.updateMatrix();if(this.matrixWorldNeedsUpdate||a)this.parent?(this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorld.decompose(this.translationWorld,this.rotationWorld,this.scaleWorld),this.matrix.decompose(this.translationObject,this.rotationObject,this.scaleObject),this.matrixWorld.compose(this.translationWorld,this.rotationObject,this.scaleWorld)):this.matrixWorld.copy(this.matrix),
this.matrixWorldNeedsUpdate=!1,a=!0;for(var b=0,c=this.children.length;b<c;b++)this.children[b].updateMatrixWorld(a)};THREE.Gyroscope.prototype.translationWorld=new THREE.Vector3;THREE.Gyroscope.prototype.translationObject=new THREE.Vector3;THREE.Gyroscope.prototype.rotationWorld=new THREE.Quaternion;THREE.Gyroscope.prototype.rotationObject=new THREE.Quaternion;THREE.Gyroscope.prototype.scaleWorld=new THREE.Vector3;THREE.Gyroscope.prototype.scaleObject=new THREE.Vector3;THREE.CameraHelper=function(a){function b(a,b,d){c(a,d);c(b,d)}function c(a,b){d.geometry.vertices.push(new THREE.Vector3);d.geometry.colors.push(new THREE.Color(b));void 0===d.pointMap[a]&&(d.pointMap[a]=[]);d.pointMap[a].push(d.geometry.vertices.length-1)}THREE.Line.call(this);var d=this;this.geometry=new THREE.Geometry;this.material=new THREE.LineBasicMaterial({color:16777215,vertexColors:THREE.FaceColors});this.type=THREE.LinePieces;this.matrixWorld=a.matrixWorld;this.matrixAutoUpdate=!1;this.pointMap=
{};b("n1","n2",16755200);b("n2","n4",16755200);b("n4","n3",16755200);b("n3","n1",16755200);b("f1","f2",16755200);b("f2","f4",16755200);b("f4","f3",16755200);b("f3","f1",16755200);b("n1","f1",16755200);b("n2","f2",16755200);b("n3","f3",16755200);b("n4","f4",16755200);b("p","n1",16711680);b("p","n2",16711680);b("p","n3",16711680);b("p","n4",16711680);b("u1","u2",43775);b("u2","u3",43775);b("u3","u1",43775);b("c","t",16777215);b("p","c",3355443);b("cn1","cn2",3355443);b("cn3","cn4",3355443);b("cf1",
"cf2",3355443);b("cf3","cf4",3355443);this.camera=a;this.update(a)};THREE.CameraHelper.prototype=Object.create(THREE.Line.prototype);
THREE.CameraHelper.prototype.update=function(){function a(a,d,e,g){THREE.CameraHelper.__v.set(d,e,g);THREE.CameraHelper.__projector.unprojectVector(THREE.CameraHelper.__v,THREE.CameraHelper.__c);a=b.pointMap[a];if(void 0!==a){d=0;for(e=a.length;d<e;d++)b.geometry.vertices[a[d]].copy(THREE.CameraHelper.__v)}}var b=this;THREE.CameraHelper.__c.projectionMatrix.copy(this.camera.projectionMatrix);a("c",0,0,-1);a("t",0,0,1);a("n1",-1,-1,-1);a("n2",1,-1,-1);a("n3",-1,1,-1);a("n4",1,1,-1);a("f1",-1,-1,1);
a("f2",1,-1,1);a("f3",-1,1,1);a("f4",1,1,1);a("u1",0.7,1.1,-1);a("u2",-0.7,1.1,-1);a("u3",0,2,-1);a("cf1",-1,0,1);a("cf2",1,0,1);a("cf3",0,-1,1);a("cf4",0,1,1);a("cn1",-1,0,-1);a("cn2",1,0,-1);a("cn3",0,-1,-1);a("cn4",0,1,-1);this.geometry.verticesNeedUpdate=!0};THREE.CameraHelper.__projector=new THREE.Projector;THREE.CameraHelper.__v=new THREE.Vector3;THREE.CameraHelper.__c=new THREE.Camera;THREE.DirectionalLightHelper=function(a,b){THREE.Object3D.call(this);this.light=a;this.position=a.position;this.direction=new THREE.Vector3;this.direction.subVectors(a.target.position,a.position);var c=THREE.Math.clamp(a.intensity,0,1);this.color=a.color.clone();this.color.multiplyScalar(c);var c=this.color.getHex(),d=new THREE.SphereGeometry(b,16,8),e=new THREE.AsteriskGeometry(1.25*b,2.25*b),g=new THREE.MeshBasicMaterial({color:c,fog:!1}),h=new THREE.LineBasicMaterial({color:c,fog:!1});this.lightSphere=
new THREE.Mesh(d,g);this.lightRays=new THREE.Line(e,h,THREE.LinePieces);this.add(this.lightSphere);this.add(this.lightRays);this.lightSphere.properties.isGizmo=!0;this.lightSphere.properties.gizmoSubject=a;this.lightSphere.properties.gizmoRoot=this;this.targetSphere=null;void 0!==a.target.properties.targetInverse&&(d=new THREE.SphereGeometry(b,8,4),e=new THREE.MeshBasicMaterial({color:c,wireframe:!0,fog:!1}),this.targetSphere=new THREE.Mesh(d,e),this.targetSphere.position=a.target.position,this.targetSphere.properties.isGizmo=
!0,this.targetSphere.properties.gizmoSubject=a.target,this.targetSphere.properties.gizmoRoot=this.targetSphere,c=new THREE.LineDashedMaterial({color:c,dashSize:4,gapSize:4,opacity:0.75,transparent:!0,fog:!1}),d=new THREE.Geometry,d.vertices.push(this.position.clone()),d.vertices.push(this.targetSphere.position.clone()),d.computeLineDistances(),this.targetLine=new THREE.Line(d,c),this.targetLine.properties.isGizmo=!0);this.properties.isGizmo=!0};THREE.DirectionalLightHelper.prototype=Object.create(THREE.Object3D.prototype);
THREE.DirectionalLightHelper.prototype.update=function(){this.direction.subVectors(this.light.target.position,this.light.position);var a=THREE.Math.clamp(this.light.intensity,0,1);this.color.copy(this.light.color);this.color.multiplyScalar(a);this.lightSphere.material.color.copy(this.color);this.lightRays.material.color.copy(this.color);null!==this.targetSphere&&(this.targetSphere.material.color.copy(this.color),this.targetLine.material.color.copy(this.color),this.targetLine.geometry.vertices[0].copy(this.light.position),
this.targetLine.geometry.vertices[1].copy(this.light.target.position),this.targetLine.geometry.computeLineDistances(),this.targetLine.geometry.verticesNeedUpdate=!0)};THREE.HemisphereLightHelper=function(a,b,c){THREE.Object3D.call(this);this.light=a;this.position=a.position;var d=THREE.Math.clamp(a.intensity,0,1);this.color=a.color.clone();this.color.multiplyScalar(d);var e=this.color.getHex();this.groundColor=a.groundColor.clone();this.groundColor.multiplyScalar(d);for(var d=this.groundColor.getHex(),g=new THREE.SphereGeometry(b,16,8,0,2*Math.PI,0,0.5*Math.PI),h=new THREE.SphereGeometry(b,16,8,0,2*Math.PI,0.5*Math.PI,Math.PI),j=new THREE.MeshBasicMaterial({color:e,
fog:!1}),i=new THREE.MeshBasicMaterial({color:d,fog:!1}),k=0,n=g.faces.length;k<n;k++)g.faces[k].materialIndex=0;k=0;for(n=h.faces.length;k<n;k++)h.faces[k].materialIndex=1;THREE.GeometryUtils.merge(g,h);this.lightSphere=new THREE.Mesh(g,new THREE.MeshFaceMaterial([j,i]));this.lightArrow=new THREE.ArrowHelper(new THREE.Vector3(0,1,0),new THREE.Vector3(0,1.1*(b+c),0),c,e);this.lightArrow.rotation.x=Math.PI;this.lightArrowGround=new THREE.ArrowHelper(new THREE.Vector3(0,1,0),new THREE.Vector3(0,-1.1*
(b+c),0),c,d);b=new THREE.Object3D;b.rotation.x=0.5*-Math.PI;b.add(this.lightSphere);b.add(this.lightArrow);b.add(this.lightArrowGround);this.add(b);this.lightSphere.properties.isGizmo=!0;this.lightSphere.properties.gizmoSubject=a;this.lightSphere.properties.gizmoRoot=this;this.properties.isGizmo=!0;this.target=new THREE.Vector3;this.lookAt(this.target)};THREE.HemisphereLightHelper.prototype=Object.create(THREE.Object3D.prototype);
THREE.HemisphereLightHelper.prototype.update=function(){var a=THREE.Math.clamp(this.light.intensity,0,1);this.color.copy(this.light.color);this.color.multiplyScalar(a);this.groundColor.copy(this.light.groundColor);this.groundColor.multiplyScalar(a);this.lightSphere.material.materials[0].color.copy(this.color);this.lightSphere.material.materials[1].color.copy(this.groundColor);this.lightArrow.setColor(this.color.getHex());this.lightArrowGround.setColor(this.groundColor.getHex());this.lookAt(this.target)};THREE.PointLightHelper=function(a,b){THREE.Object3D.call(this);this.light=a;this.position=a.position;var c=THREE.Math.clamp(a.intensity,0,1);this.color=a.color.clone();this.color.multiplyScalar(c);var d=this.color.getHex(),c=new THREE.SphereGeometry(b,16,8),e=new THREE.AsteriskGeometry(1.25*b,2.25*b),g=new THREE.IcosahedronGeometry(1,2),h=new THREE.MeshBasicMaterial({color:d,fog:!1}),j=new THREE.LineBasicMaterial({color:d,fog:!1}),d=new THREE.MeshBasicMaterial({color:d,fog:!1,wireframe:!0,opacity:0.1,
transparent:!0});this.lightSphere=new THREE.Mesh(c,h);this.lightRays=new THREE.Line(e,j,THREE.LinePieces);this.lightDistance=new THREE.Mesh(g,d);c=a.distance;0===c?this.lightDistance.visible=!1:this.lightDistance.scale.set(c,c,c);this.add(this.lightSphere);this.add(this.lightRays);this.add(this.lightDistance);this.lightSphere.properties.isGizmo=!0;this.lightSphere.properties.gizmoSubject=a;this.lightSphere.properties.gizmoRoot=this;this.properties.isGizmo=!0};THREE.PointLightHelper.prototype=Object.create(THREE.Object3D.prototype);
THREE.PointLightHelper.prototype.update=function(){var a=THREE.Math.clamp(this.light.intensity,0,1);this.color.copy(this.light.color);this.color.multiplyScalar(a);this.lightSphere.material.color.copy(this.color);this.lightRays.material.color.copy(this.color);this.lightDistance.material.color.copy(this.color);a=this.light.distance;0===a?this.lightDistance.visible=!1:(this.lightDistance.visible=!0,this.lightDistance.scale.set(a,a,a))};THREE.SpotLightHelper=function(a,b){THREE.Object3D.call(this);this.light=a;this.position=a.position;this.direction=new THREE.Vector3;this.direction.subVectors(a.target.position,a.position);var c=THREE.Math.clamp(a.intensity,0,1);this.color=a.color.clone();this.color.multiplyScalar(c);var c=this.color.getHex(),d=new THREE.SphereGeometry(b,16,8),e=new THREE.AsteriskGeometry(1.25*b,2.25*b),g=new THREE.CylinderGeometry(1E-4,1,1,8,1,!0),h=new THREE.Matrix4;h.rotateX(-Math.PI/2);h.translate(new THREE.Vector3(0,
-0.5,0));g.applyMatrix(h);var j=new THREE.MeshBasicMaterial({color:c,fog:!1}),h=new THREE.LineBasicMaterial({color:c,fog:!1}),i=new THREE.MeshBasicMaterial({color:c,fog:!1,wireframe:!0,opacity:0.3,transparent:!0});this.lightSphere=new THREE.Mesh(d,j);this.lightCone=new THREE.Mesh(g,i);d=a.distance?a.distance:1E4;g=2*d*Math.tan(0.5*a.angle);this.lightCone.scale.set(g,g,d);this.lightRays=new THREE.Line(e,h,THREE.LinePieces);this.gyroscope=new THREE.Gyroscope;this.gyroscope.add(this.lightSphere);this.gyroscope.add(this.lightRays);
this.add(this.gyroscope);this.add(this.lightCone);this.lookAt(a.target.position);this.lightSphere.properties.isGizmo=!0;this.lightSphere.properties.gizmoSubject=a;this.lightSphere.properties.gizmoRoot=this;this.targetSphere=null;void 0!==a.target.properties.targetInverse&&(e=new THREE.SphereGeometry(b,8,4),h=new THREE.MeshBasicMaterial({color:c,wireframe:!0,fog:!1}),this.targetSphere=new THREE.Mesh(e,h),this.targetSphere.position=a.target.position,this.targetSphere.properties.isGizmo=!0,this.targetSphere.properties.gizmoSubject=
a.target,this.targetSphere.properties.gizmoRoot=this.targetSphere,c=new THREE.LineDashedMaterial({color:c,dashSize:4,gapSize:4,opacity:0.75,transparent:!0,fog:!1}),e=new THREE.Geometry,e.vertices.push(this.position.clone()),e.vertices.push(this.targetSphere.position.clone()),e.computeLineDistances(),this.targetLine=new THREE.Line(e,c),this.targetLine.properties.isGizmo=!0);this.properties.isGizmo=!0};THREE.SpotLightHelper.prototype=Object.create(THREE.Object3D.prototype);
THREE.SpotLightHelper.prototype.update=function(){this.direction.subVectors(this.light.target.position,this.light.position);this.lookAt(this.light.target.position);var a=this.light.distance?this.light.distance:1E4,b=2*a*Math.tan(0.5*this.light.angle);this.lightCone.scale.set(b,b,a);a=THREE.Math.clamp(this.light.intensity,0,1);this.color.copy(this.light.color);this.color.multiplyScalar(a);this.lightSphere.material.color.copy(this.color);this.lightRays.material.color.copy(this.color);this.lightCone.material.color.copy(this.color);
null!==this.targetSphere&&(this.targetSphere.material.color.copy(this.color),this.targetLine.material.color.copy(this.color),this.targetLine.geometry.vertices[0].copy(this.light.position),this.targetLine.geometry.vertices[1].copy(this.light.target.position),this.targetLine.geometry.computeLineDistances(),this.targetLine.geometry.verticesNeedUpdate=!0)};THREE.LensFlare=function(a,b,c,d,e){THREE.Object3D.call(this);this.lensFlares=[];this.positionScreen=new THREE.Vector3;this.customUpdateCallback=void 0;void 0!==a&&this.add(a,b,c,d,e)};THREE.LensFlare.prototype=Object.create(THREE.Object3D.prototype);
THREE.LensFlare.prototype.add=function(a,b,c,d,e,g){void 0===b&&(b=-1);void 0===c&&(c=0);void 0===g&&(g=1);void 0===e&&(e=new THREE.Color(16777215));void 0===d&&(d=THREE.NormalBlending);c=Math.min(c,Math.max(0,c));this.lensFlares.push({texture:a,size:b,distance:c,x:0,y:0,z:0,scale:1,rotation:1,opacity:g,color:e,blending:d})};
THREE.LensFlare.prototype.updateLensFlares=function(){var a,b=this.lensFlares.length,c,d=2*-this.positionScreen.x,e=2*-this.positionScreen.y;for(a=0;a<b;a++)c=this.lensFlares[a],c.x=this.positionScreen.x+d*c.distance,c.y=this.positionScreen.y+e*c.distance,c.wantedRotation=0.25*c.x*Math.PI,c.rotation+=0.25*(c.wantedRotation-c.rotation)};THREE.ImmediateRenderObject=function(){THREE.Object3D.call(this);this.render=function(){}};THREE.ImmediateRenderObject.prototype=Object.create(THREE.Object3D.prototype);THREE.LensFlarePlugin=function(){function a(a,c){var d=b.createProgram(),e=b.createShader(b.FRAGMENT_SHADER),g=b.createShader(b.VERTEX_SHADER),h="precision "+c+" float;\n";b.shaderSource(e,h+a.fragmentShader);b.shaderSource(g,h+a.vertexShader);b.compileShader(e);b.compileShader(g);b.attachShader(d,e);b.attachShader(d,g);b.linkProgram(d);return d}var b,c,d,e,g,h,j,i,k,n,p,t,u;this.init=function(v){b=v.context;c=v;d=v.getPrecision();e=new Float32Array(16);g=new Uint16Array(6);v=0;e[v++]=-1;e[v++]=-1;
e[v++]=0;e[v++]=0;e[v++]=1;e[v++]=-1;e[v++]=1;e[v++]=0;e[v++]=1;e[v++]=1;e[v++]=1;e[v++]=1;e[v++]=-1;e[v++]=1;e[v++]=0;e[v++]=1;v=0;g[v++]=0;g[v++]=1;g[v++]=2;g[v++]=0;g[v++]=2;g[v++]=3;h=b.createBuffer();j=b.createBuffer();b.bindBuffer(b.ARRAY_BUFFER,h);b.bufferData(b.ARRAY_BUFFER,e,b.STATIC_DRAW);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,j);b.bufferData(b.ELEMENT_ARRAY_BUFFER,g,b.STATIC_DRAW);i=b.createTexture();k=b.createTexture();b.bindTexture(b.TEXTURE_2D,i);b.texImage2D(b.TEXTURE_2D,0,b.RGB,16,16,
0,b.RGB,b.UNSIGNED_BYTE,null);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.NEAREST);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.NEAREST);b.bindTexture(b.TEXTURE_2D,k);b.texImage2D(b.TEXTURE_2D,0,b.RGBA,16,16,0,b.RGBA,b.UNSIGNED_BYTE,null);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE);
b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.NEAREST);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.NEAREST);0>=b.getParameter(b.MAX_VERTEX_TEXTURE_IMAGE_UNITS)?(n=!1,p=a(THREE.ShaderFlares.lensFlare,d)):(n=!0,p=a(THREE.ShaderFlares.lensFlareVertexTexture,d));t={};u={};t.vertex=b.getAttribLocation(p,"position");t.uv=b.getAttribLocation(p,"uv");u.renderType=b.getUniformLocation(p,"renderType");u.map=b.getUniformLocation(p,"map");u.occlusionMap=b.getUniformLocation(p,"occlusionMap");u.opacity=
b.getUniformLocation(p,"opacity");u.color=b.getUniformLocation(p,"color");u.scale=b.getUniformLocation(p,"scale");u.rotation=b.getUniformLocation(p,"rotation");u.screenPosition=b.getUniformLocation(p,"screenPosition")};this.render=function(a,d,e,g){var a=a.__webglFlares,x=a.length;if(x){var A=new THREE.Vector3,s=g/e,C=0.5*e,I=0.5*g,D=16/g,w=new THREE.Vector2(D*s,D),P=new THREE.Vector3(1,1,0),N=new THREE.Vector2(1,1),F=u,D=t;b.useProgram(p);b.enableVertexAttribArray(t.vertex);b.enableVertexAttribArray(t.uv);
b.uniform1i(F.occlusionMap,0);b.uniform1i(F.map,1);b.bindBuffer(b.ARRAY_BUFFER,h);b.vertexAttribPointer(D.vertex,2,b.FLOAT,!1,16,0);b.vertexAttribPointer(D.uv,2,b.FLOAT,!1,16,8);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,j);b.disable(b.CULL_FACE);b.depthMask(!1);var X,B,W,E,Q;for(X=0;X<x;X++)if(D=16/g,w.set(D*s,D),E=a[X],A.set(E.matrixWorld.elements[12],E.matrixWorld.elements[13],E.matrixWorld.elements[14]),A.applyMatrix4(d.matrixWorldInverse),A.applyProjection(d.projectionMatrix),P.copy(A),N.x=P.x*C+C,
N.y=P.y*I+I,n||0<N.x&&N.x<e&&0<N.y&&N.y<g){b.activeTexture(b.TEXTURE1);b.bindTexture(b.TEXTURE_2D,i);b.copyTexImage2D(b.TEXTURE_2D,0,b.RGB,N.x-8,N.y-8,16,16,0);b.uniform1i(F.renderType,0);b.uniform2f(F.scale,w.x,w.y);b.uniform3f(F.screenPosition,P.x,P.y,P.z);b.disable(b.BLEND);b.enable(b.DEPTH_TEST);b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0);b.activeTexture(b.TEXTURE0);b.bindTexture(b.TEXTURE_2D,k);b.copyTexImage2D(b.TEXTURE_2D,0,b.RGBA,N.x-8,N.y-8,16,16,0);b.uniform1i(F.renderType,1);b.disable(b.DEPTH_TEST);
b.activeTexture(b.TEXTURE1);b.bindTexture(b.TEXTURE_2D,i);b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0);E.positionScreen.copy(P);E.customUpdateCallback?E.customUpdateCallback(E):E.updateLensFlares();b.uniform1i(F.renderType,2);b.enable(b.BLEND);B=0;for(W=E.lensFlares.length;B<W;B++)Q=E.lensFlares[B],0.001<Q.opacity&&0.001<Q.scale&&(P.x=Q.x,P.y=Q.y,P.z=Q.z,D=Q.size*Q.scale/g,w.x=D*s,w.y=D,b.uniform3f(F.screenPosition,P.x,P.y,P.z),b.uniform2f(F.scale,w.x,w.y),b.uniform1f(F.rotation,Q.rotation),b.uniform1f(F.opacity,
Q.opacity),b.uniform3f(F.color,Q.color.r,Q.color.g,Q.color.b),c.setBlending(Q.blending,Q.blendEquation,Q.blendSrc,Q.blendDst),c.setTexture(Q.texture,1),b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0))}b.enable(b.CULL_FACE);b.enable(b.DEPTH_TEST);b.depthMask(!0)}}};THREE.ShadowMapPlugin=function(){var a,b,c,d,e,g,h=new THREE.Frustum,j=new THREE.Matrix4,i=new THREE.Vector3,k=new THREE.Vector3,n=new THREE.Vector3;this.init=function(h){a=h.context;b=h;var h=THREE.ShaderLib.depthRGBA,i=THREE.UniformsUtils.clone(h.uniforms);c=new THREE.ShaderMaterial({fragmentShader:h.fragmentShader,vertexShader:h.vertexShader,uniforms:i});d=new THREE.ShaderMaterial({fragmentShader:h.fragmentShader,vertexShader:h.vertexShader,uniforms:i,morphTargets:!0});e=new THREE.ShaderMaterial({fragmentShader:h.fragmentShader,
vertexShader:h.vertexShader,uniforms:i,skinning:!0});g=new THREE.ShaderMaterial({fragmentShader:h.fragmentShader,vertexShader:h.vertexShader,uniforms:i,morphTargets:!0,skinning:!0});c._shadowPass=!0;d._shadowPass=!0;e._shadowPass=!0;g._shadowPass=!0};this.render=function(a,c){b.shadowMapEnabled&&b.shadowMapAutoUpdate&&this.update(a,c)};this.update=function(p,t){var u,v,m,l,y,x,A,s,C,I=[];l=0;a.clearColor(1,1,1,1);a.disable(a.BLEND);a.enable(a.CULL_FACE);a.frontFace(a.CCW);b.shadowMapCullFace===THREE.CullFaceFront?
a.cullFace(a.FRONT):a.cullFace(a.BACK);b.setDepthTest(!0);u=0;for(v=p.__lights.length;u<v;u++)if(m=p.__lights[u],m.castShadow)if(m instanceof THREE.DirectionalLight&&m.shadowCascade)for(y=0;y<m.shadowCascadeCount;y++){var D;if(m.shadowCascadeArray[y])D=m.shadowCascadeArray[y];else{C=m;A=y;D=new THREE.DirectionalLight;D.isVirtual=!0;D.onlyShadow=!0;D.castShadow=!0;D.shadowCameraNear=C.shadowCameraNear;D.shadowCameraFar=C.shadowCameraFar;D.shadowCameraLeft=C.shadowCameraLeft;D.shadowCameraRight=C.shadowCameraRight;
D.shadowCameraBottom=C.shadowCameraBottom;D.shadowCameraTop=C.shadowCameraTop;D.shadowCameraVisible=C.shadowCameraVisible;D.shadowDarkness=C.shadowDarkness;D.shadowBias=C.shadowCascadeBias[A];D.shadowMapWidth=C.shadowCascadeWidth[A];D.shadowMapHeight=C.shadowCascadeHeight[A];D.pointsWorld=[];D.pointsFrustum=[];s=D.pointsWorld;x=D.pointsFrustum;for(var w=0;8>w;w++)s[w]=new THREE.Vector3,x[w]=new THREE.Vector3;s=C.shadowCascadeNearZ[A];C=C.shadowCascadeFarZ[A];x[0].set(-1,-1,s);x[1].set(1,-1,s);x[2].set(-1,
1,s);x[3].set(1,1,s);x[4].set(-1,-1,C);x[5].set(1,-1,C);x[6].set(-1,1,C);x[7].set(1,1,C);D.originalCamera=t;x=new THREE.Gyroscope;x.position=m.shadowCascadeOffset;x.add(D);x.add(D.target);t.add(x);m.shadowCascadeArray[y]=D;console.log("Created virtualLight",D)}A=m;s=y;C=A.shadowCascadeArray[s];C.position.copy(A.position);C.target.position.copy(A.target.position);C.lookAt(C.target);C.shadowCameraVisible=A.shadowCameraVisible;C.shadowDarkness=A.shadowDarkness;C.shadowBias=A.shadowCascadeBias[s];x=A.shadowCascadeNearZ[s];
A=A.shadowCascadeFarZ[s];C=C.pointsFrustum;C[0].z=x;C[1].z=x;C[2].z=x;C[3].z=x;C[4].z=A;C[5].z=A;C[6].z=A;C[7].z=A;I[l]=D;l++}else I[l]=m,l++;u=0;for(v=I.length;u<v;u++){m=I[u];m.shadowMap||(y=THREE.LinearFilter,b.shadowMapType===THREE.PCFSoftShadowMap&&(y=THREE.NearestFilter),m.shadowMap=new THREE.WebGLRenderTarget(m.shadowMapWidth,m.shadowMapHeight,{minFilter:y,magFilter:y,format:THREE.RGBAFormat}),m.shadowMapSize=new THREE.Vector2(m.shadowMapWidth,m.shadowMapHeight),m.shadowMatrix=new THREE.Matrix4);
if(!m.shadowCamera){if(m instanceof THREE.SpotLight)m.shadowCamera=new THREE.PerspectiveCamera(m.shadowCameraFov,m.shadowMapWidth/m.shadowMapHeight,m.shadowCameraNear,m.shadowCameraFar);else if(m instanceof THREE.DirectionalLight)m.shadowCamera=new THREE.OrthographicCamera(m.shadowCameraLeft,m.shadowCameraRight,m.shadowCameraTop,m.shadowCameraBottom,m.shadowCameraNear,m.shadowCameraFar);else{console.error("Unsupported light type for shadow");continue}p.add(m.shadowCamera);b.autoUpdateScene&&p.updateMatrixWorld()}m.shadowCameraVisible&&
!m.cameraHelper&&(m.cameraHelper=new THREE.CameraHelper(m.shadowCamera),m.shadowCamera.add(m.cameraHelper));if(m.isVirtual&&D.originalCamera==t){y=t;l=m.shadowCamera;x=m.pointsFrustum;C=m.pointsWorld;i.set(Infinity,Infinity,Infinity);k.set(-Infinity,-Infinity,-Infinity);for(A=0;8>A;A++)s=C[A],s.copy(x[A]),THREE.ShadowMapPlugin.__projector.unprojectVector(s,y),s.applyMatrix4(l.matrixWorldInverse),s.x<i.x&&(i.x=s.x),s.x>k.x&&(k.x=s.x),s.y<i.y&&(i.y=s.y),s.y>k.y&&(k.y=s.y),s.z<i.z&&(i.z=s.z),s.z>k.z&&
(k.z=s.z);l.left=i.x;l.right=k.x;l.top=k.y;l.bottom=i.y;l.updateProjectionMatrix()}l=m.shadowMap;x=m.shadowMatrix;y=m.shadowCamera;y.position.getPositionFromMatrix(m.matrixWorld);n.getPositionFromMatrix(m.target.matrixWorld);y.lookAt(n);y.updateMatrixWorld();y.matrixWorldInverse.getInverse(y.matrixWorld);m.cameraHelper&&(m.cameraHelper.visible=m.shadowCameraVisible);m.shadowCameraVisible&&m.cameraHelper.update();x.set(0.5,0,0,0.5,0,0.5,0,0.5,0,0,0.5,0.5,0,0,0,1);x.multiply(y.projectionMatrix);x.multiply(y.matrixWorldInverse);
j.multiplyMatrices(y.projectionMatrix,y.matrixWorldInverse);h.setFromMatrix(j);b.setRenderTarget(l);b.clear();C=p.__webglObjects;m=0;for(l=C.length;m<l;m++)if(A=C[m],x=A.object,A.render=!1,x.visible&&x.castShadow&&(!(x instanceof THREE.Mesh||x instanceof THREE.ParticleSystem)||!x.frustumCulled||h.intersectsObject(x)))x._modelViewMatrix.multiplyMatrices(y.matrixWorldInverse,x.matrixWorld),A.render=!0;m=0;for(l=C.length;m<l;m++)A=C[m],A.render&&(x=A.object,A=A.buffer,w=x.material instanceof THREE.MeshFaceMaterial?
x.material.materials[0]:x.material,s=0<x.geometry.morphTargets.length&&w.morphTargets,w=x instanceof THREE.SkinnedMesh&&w.skinning,s=x.customDepthMaterial?x.customDepthMaterial:w?s?g:e:s?d:c,A instanceof THREE.BufferGeometry?b.renderBufferDirect(y,p.__lights,null,s,A,x):b.renderBuffer(y,p.__lights,null,s,A,x));C=p.__webglObjectsImmediate;m=0;for(l=C.length;m<l;m++)A=C[m],x=A.object,x.visible&&x.castShadow&&(x._modelViewMatrix.multiplyMatrices(y.matrixWorldInverse,x.matrixWorld),b.renderImmediateObject(y,
p.__lights,null,c,x))}u=b.getClearColor();v=b.getClearAlpha();a.clearColor(u.r,u.g,u.b,v);a.enable(a.BLEND);b.shadowMapCullFace===THREE.CullFaceFront&&a.cullFace(a.BACK)}};THREE.ShadowMapPlugin.__projector=new THREE.Projector;THREE.SpritePlugin=function(){function a(a,b){return a.z!==b.z?b.z-a.z:b.id-a.id}var b,c,d,e,g,h,j,i,k,n;this.init=function(a){b=a.context;c=a;d=a.getPrecision();e=new Float32Array(16);g=new Uint16Array(6);a=0;e[a++]=-1;e[a++]=-1;e[a++]=0;e[a++]=0;e[a++]=1;e[a++]=-1;e[a++]=1;e[a++]=0;e[a++]=1;e[a++]=1;e[a++]=1;e[a++]=1;e[a++]=-1;e[a++]=1;e[a++]=0;e[a++]=1;a=0;g[a++]=0;g[a++]=1;g[a++]=2;g[a++]=0;g[a++]=2;g[a++]=3;h=b.createBuffer();j=b.createBuffer();b.bindBuffer(b.ARRAY_BUFFER,h);b.bufferData(b.ARRAY_BUFFER,
e,b.STATIC_DRAW);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,j);b.bufferData(b.ELEMENT_ARRAY_BUFFER,g,b.STATIC_DRAW);var a=THREE.ShaderSprite.sprite,t=b.createProgram(),u=b.createShader(b.FRAGMENT_SHADER),v=b.createShader(b.VERTEX_SHADER),m="precision "+d+" float;\n";b.shaderSource(u,m+a.fragmentShader);b.shaderSource(v,m+a.vertexShader);b.compileShader(u);b.compileShader(v);b.attachShader(t,u);b.attachShader(t,v);b.linkProgram(t);i=t;k={};n={};k.position=b.getAttribLocation(i,"position");k.uv=b.getAttribLocation(i,
"uv");n.uvOffset=b.getUniformLocation(i,"uvOffset");n.uvScale=b.getUniformLocation(i,"uvScale");n.rotation=b.getUniformLocation(i,"rotation");n.scale=b.getUniformLocation(i,"scale");n.alignment=b.getUniformLocation(i,"alignment");n.color=b.getUniformLocation(i,"color");n.map=b.getUniformLocation(i,"map");n.opacity=b.getUniformLocation(i,"opacity");n.useScreenCoordinates=b.getUniformLocation(i,"useScreenCoordinates");n.sizeAttenuation=b.getUniformLocation(i,"sizeAttenuation");n.screenPosition=b.getUniformLocation(i,
"screenPosition");n.modelViewMatrix=b.getUniformLocation(i,"modelViewMatrix");n.projectionMatrix=b.getUniformLocation(i,"projectionMatrix");n.fogType=b.getUniformLocation(i,"fogType");n.fogDensity=b.getUniformLocation(i,"fogDensity");n.fogNear=b.getUniformLocation(i,"fogNear");n.fogFar=b.getUniformLocation(i,"fogFar");n.fogColor=b.getUniformLocation(i,"fogColor");n.alphaTest=b.getUniformLocation(i,"alphaTest")};this.render=function(d,e,g,v){var m=d.__webglSprites,l=m.length;if(l){var y=k,x=n,A=v/
g,g=0.5*g,s=0.5*v;b.useProgram(i);b.enableVertexAttribArray(y.position);b.enableVertexAttribArray(y.uv);b.disable(b.CULL_FACE);b.enable(b.BLEND);b.bindBuffer(b.ARRAY_BUFFER,h);b.vertexAttribPointer(y.position,2,b.FLOAT,!1,16,0);b.vertexAttribPointer(y.uv,2,b.FLOAT,!1,16,8);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,j);b.uniformMatrix4fv(x.projectionMatrix,!1,e.projectionMatrix.elements);b.activeTexture(b.TEXTURE0);b.uniform1i(x.map,0);var C=y=0,I=d.fog;I?(b.uniform3f(x.fogColor,I.color.r,I.color.g,I.color.b),
I instanceof THREE.Fog?(b.uniform1f(x.fogNear,I.near),b.uniform1f(x.fogFar,I.far),b.uniform1i(x.fogType,1),C=y=1):I instanceof THREE.FogExp2&&(b.uniform1f(x.fogDensity,I.density),b.uniform1i(x.fogType,2),C=y=2)):(b.uniform1i(x.fogType,0),C=y=0);for(var D,w,P=[],I=0;I<l;I++)D=m[I],w=D.material,D.visible&&0!==w.opacity&&(w.useScreenCoordinates?D.z=-D.position.z:(D._modelViewMatrix.multiplyMatrices(e.matrixWorldInverse,D.matrixWorld),D.z=-D._modelViewMatrix.elements[14]));m.sort(a);for(I=0;I<l;I++)D=
m[I],w=D.material,D.visible&&0!==w.opacity&&(w.map&&w.map.image&&w.map.image.width)&&(b.uniform1f(x.alphaTest,w.alphaTest),!0===w.useScreenCoordinates?(b.uniform1i(x.useScreenCoordinates,1),b.uniform3f(x.screenPosition,(D.position.x*c.devicePixelRatio-g)/g,(s-D.position.y*c.devicePixelRatio)/s,Math.max(0,Math.min(1,D.position.z))),P[0]=c.devicePixelRatio,P[1]=c.devicePixelRatio):(b.uniform1i(x.useScreenCoordinates,0),b.uniform1i(x.sizeAttenuation,w.sizeAttenuation?1:0),b.uniformMatrix4fv(x.modelViewMatrix,
!1,D._modelViewMatrix.elements),P[0]=1,P[1]=1),e=d.fog&&w.fog?C:0,y!==e&&(b.uniform1i(x.fogType,e),y=e),e=1/(w.scaleByViewport?v:1),P[0]*=e*A*D.scale.x,P[1]*=e*D.scale.y,b.uniform2f(x.uvScale,w.uvScale.x,w.uvScale.y),b.uniform2f(x.uvOffset,w.uvOffset.x,w.uvOffset.y),b.uniform2f(x.alignment,w.alignment.x,w.alignment.y),b.uniform1f(x.opacity,w.opacity),b.uniform3f(x.color,w.color.r,w.color.g,w.color.b),b.uniform1f(x.rotation,D.rotation),b.uniform2fv(x.scale,P),c.setBlending(w.blending,w.blendEquation,
w.blendSrc,w.blendDst),c.setDepthTest(w.depthTest),c.setDepthWrite(w.depthWrite),c.setTexture(w.map,0),b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0));b.enable(b.CULL_FACE)}}};THREE.SkySpherePlugin=function(a){function b(){e.bindBuffer(e.ARRAY_BUFFER,h.vertexPositionBuffer);e.vertexAttribPointer(h.vertexPositionAttribute,h.vertexPositionBuffer.itemSize,e.FLOAT,!1,0,0);e.bindBuffer(e.ARRAY_BUFFER,h.vertexUVBuffer);e.vertexAttribPointer(h.textureUVAttribute,h.vertexUVBuffer.itemSize,e.FLOAT,!1,0,0)}function c(a,b){for(var d in b)try{a[d]=b[d].constructor==Object?c(a[d],b[d]):b[d]}catch(e){a[d]=b[d]}return a}function d(a,b){var c=e.createShader(b);e.shaderSource(c,a);e.compileShader(c);
if(!e.getShaderParameter(c,e.COMPILE_STATUS))throw e.getShaderInfoLog(c);return c}var a=a||{},a=c(a,{mode:"sphereImage",staticImage:{imageSrc:"textures/skymap/sky00.jpg"},sphereImage:{imageSrc:"textures/skymap/apocalyptic_room.jpg",detail:3,radiusIfCameraHasNoFar:1E3,materialOptions:{}},onLoad:function(){}}),e,g,h,j,i=!1;this.init=function(b){if(!b instanceof THREE.WebGLRenderer)throw Error("SkySphere only works with WebGL");e=b.context;g=b;b.getPrecision();switch(a.mode){case "test":g.autoClear=
!1;break;case "staticImage":this.createProgramForMode(a.mode);g.autoClear=!1;j=e.createTexture();j.image=new Image;j.image.onload=function(){var b=j;e.bindTexture(e.TEXTURE_2D,b);e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,b.image);e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST);e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST);e.bindTexture(e.TEXTURE_2D,null);i=!0;a.onLoad()};j.image.src=a.staticImage.imageSrc;this.initStaticImage();break;case "sphereImage":this.initSphereImage(b);
break;default:throw Error("SkySphere has no '"+a.mode+"' mode");}};this.createProgramForMode=function(b){if(void 0!==this.shaders[b]){var c=this.shaders[a.mode].vertex,g=this.shaders[a.mode].fragment,b=e.createProgram(),c=d(c,e.VERTEX_SHADER),g=d(g,e.FRAGMENT_SHADER);e.attachShader(b,c);e.attachShader(b,g);e.linkProgram(b);if(!e.getProgramParameter(b,e.LINK_STATUS))throw e.getProgramInfoLog(b);h=b;e.useProgram(h)}else throw Error("No GLSL shaders for mode '"+b+"'");};this.render=function(b,c,d,g){e.useProgram(h);
switch(a.mode){case "test":this.renderTest(b,c,d,g);break;case "staticImage":i&&this.renderStaticImage(b,c,d,g);break;case "sphereImage":this.renderSphereImage(b,c,d,g);break;default:throw Error("SkySphere has no '"+a.mode+"' mode");}};this.initStaticImage=function(){h.vertexPositionBuffer=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,h.vertexPositionBuffer);var a=[-1,-1,1,1,-1,1,-1,-1,1,-1,1,1];e.bufferData(e.ARRAY_BUFFER,new Float32Array(a),e.STATIC_DRAW);h.vertexPositionBuffer.itemSize=2;h.vertexPositionBuffer.numItems=
a.length/h.vertexPositionBuffer.itemSize;h.vertexUVBuffer=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,h.vertexUVBuffer);a=[0,1,1,0,0,0,0,1,1,1,1,0];e.bufferData(e.ARRAY_BUFFER,new Float32Array(a),e.STATIC_DRAW);h.vertexUVBuffer.itemSize=2;h.vertexUVBuffer.numItems=a.length/h.vertexUVBuffer.itemSize;h.vertexPositionAttribute=e.getAttribLocation(h,"aPosition");e.enableVertexAttribArray(h.vertexPositionAttribute);h.textureUVAttribute=e.getAttribLocation(h,"aTextureUV");e.enableVertexAttribArray(h.textureUVAttribute);
h.samplerUniform=e.getUniformLocation(h,"uSampler");b()};this.renderStaticImage=function(){b();e.activeTexture(e.TEXTURE0);e.bindTexture(e.TEXTURE_2D,j);e.uniform1i(h.samplerUniform,0);e.bindBuffer(e.ARRAY_BUFFER,h.vertexPositionBuffer);e.drawArrays(e.TRIANGLES,0,h.vertexPositionBuffer.numItems)};var k,n=!1;this.initSphereImage=function(){};this.renderSphereImage=function(b,c){if(!n){n=!0;var d=c.far||a.sphereImage.radiusIfCameraHasNoFar,e=a.sphereImage.detail,g=a.sphereImage.materialOptions||{};
g.map||(g.map=THREE.ImageUtils.loadTexture(a.sphereImage.imageSrc,new THREE.UVMapping,a.onLoad));k=new THREE.Mesh(new THREE.SphereGeometry(d,8*e,6*e),new THREE.MeshBasicMaterial(g));k.scale.x=-1;k.frustumCulled=!1;b.add(k)}k.position=c.matrixWorld.getPosition();k.updateMatrixWorld()};this.renderTest=function(){var a=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,a);e.bufferData(e.ARRAY_BUFFER,new Float32Array([-0.5,-0.5,0.5,-0.5,0,0.5]),e.STATIC_DRAW);var b=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,
b);e.bufferData(e.ARRAY_BUFFER,new Float32Array([1,0,0,1,0,1,0,1,0,0,1,1]),e.STATIC_DRAW);b.itemSize=4;b.numItems=3;h.vertexPosAttrib=e.getAttribLocation(h,"aPosition");e.enableVertexAttribArray(h.vertexPosAttrib);h.vertexColorAttrib=e.getAttribLocation(h,"aColor");e.enableVertexAttribArray(h.vertexColorAttrib);e.bindBuffer(e.ARRAY_BUFFER,a);e.vertexAttribPointer(h.vertexPosAttrib,2,e.FLOAT,!1,0,0);e.bindBuffer(e.ARRAY_BUFFER,b);e.vertexAttribPointer(h.vertexColorAttrib,b.itemSize,e.FLOAT,!1,0,0);
e.drawArrays(e.TRIANGLES,0,3)};this.shaders={test:{vertex:"attribute vec2 aPosition;\nattribute vec4 aColor;\nvarying   vec4 vColor;\nvoid main(){\n  gl_Position = vec4(aPosition, 1.0, 1.0);\n  vColor = aColor;\n}",fragment:"precision mediump float;\nvarying   vec4 vColor;\nvoid main(){\n  gl_FragColor = vColor;\n}"},staticImage:{vertex:"attribute vec2 aPosition;\nattribute vec2 aTextureUV;\nvarying   vec2 vTextureUV;\nvoid main(){\n  gl_Position = vec4(aPosition, 1.0, 1.0);\n  vTextureUV = aTextureUV;\n}",
fragment:"precision mediump   float;\nuniform   sampler2D uSampler;\nvarying   vec2      vTextureUV;\nvoid main(){\n  gl_FragColor = texture2D(uSampler, vTextureUV);\n}"}}};THREE.ShaderFlares={lensFlareVertexTexture:{vertexShader:"uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.5 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.1, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.1, 0.5 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility = (       visibility.r / 9.0 ) *\n( 1.0 - visibility.g / 9.0 ) *\n(       visibility.b / 9.0 ) *\n( 1.0 - visibility.a / 9.0 );\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
fragmentShader:"uniform lowp int renderType;\nuniform sampler2D map;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * vVisibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"},lensFlare:{vertexShader:"uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
fragmentShader:"precision mediump float;\nuniform lowp int renderType;\nuniform sampler2D map;\nuniform sampler2D occlusionMap;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nfloat visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a +\ntexture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a +\ntexture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a +\ntexture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\nvisibility = ( 1.0 - visibility / 4.0 );\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * visibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"}};THREE.ShaderSprite={sprite:{vertexShader:"uniform int useScreenCoordinates;\nuniform int sizeAttenuation;\nuniform vec3 screenPosition;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 alignment;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uvOffset + uv * uvScale;\nvec2 alignedPosition = position + alignment;\nvec2 rotatedPosition;\nrotatedPosition.x = ( cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y ) * scale.x;\nrotatedPosition.y = ( sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y ) * scale.y;\nvec4 finalPosition;\nif( useScreenCoordinates != 0 ) {\nfinalPosition = vec4( screenPosition.xy + rotatedPosition, screenPosition.z, 1.0 );\n} else {\nfinalPosition = projectionMatrix * modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\nfinalPosition.xy += rotatedPosition * ( sizeAttenuation == 1 ? 1.0 : finalPosition.z );\n}\ngl_Position = finalPosition;\n}",
fragmentShader:"uniform vec3 color;\nuniform sampler2D map;\nuniform float opacity;\nuniform int fogType;\nuniform vec3 fogColor;\nuniform float fogDensity;\nuniform float fogNear;\nuniform float fogFar;\nuniform float alphaTest;\nvarying vec2 vUV;\nvoid main() {\nvec4 texture = texture2D( map, vUV );\nif ( texture.a < alphaTest ) discard;\ngl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\nif ( fogType > 0 ) {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat fogFactor = 0.0;\nif ( fogType == 1 ) {\nfogFactor = smoothstep( fogNear, fogFar, depth );\n} else {\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n}\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n}\n}"}};
