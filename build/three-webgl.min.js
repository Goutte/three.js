// three.js - http://github.com/mrdoob/three.js
'use strict';var THREE=THREE||{REVISION:"56dev"};self.console=self.console||{info:function(){},log:function(){},debug:function(){},warn:function(){},error:function(){}};self.Int32Array=self.Int32Array||Array;self.Float32Array=self.Float32Array||Array;String.prototype.startsWith=String.prototype.startsWith||function(a){return this.slice(0,a.length)===a};String.prototype.endsWith=String.prototype.endsWith||function(a){var a=String(a),b=this.lastIndexOf(a);return(-1<b&&b)===this.length-a.length};
String.prototype.trim=String.prototype.trim||function(){return this.replace(/^\s+|\s+$/g,"")};THREE.extend=function(a,b){var a=a||{},c;for(c in b)a[c]="object"===typeof b[c]?THREE.extend(a[c],b[c]):b[c];return a};
(function(){for(var a=0,b=["ms","moz","webkit","o"],c=0;c<b.length&&!window.requestAnimationFrame;++c)window.requestAnimationFrame=window[b[c]+"RequestAnimationFrame"],window.cancelAnimationFrame=window[b[c]+"CancelAnimationFrame"]||window[b[c]+"CancelRequestAnimationFrame"];void 0===window.requestAnimationFrame&&(window.requestAnimationFrame=function(b){var c=Date.now(),g=Math.max(0,16-(c-a)),h=window.setTimeout(function(){b(c+g)},g);a=c+g;return h});window.cancelAnimationFrame=window.cancelAnimationFrame||
function(a){window.clearTimeout(a)}})();THREE.CullFaceNone=0;THREE.CullFaceBack=1;THREE.CullFaceFront=2;THREE.CullFaceFrontBack=3;THREE.FrontFaceDirectionCW=0;THREE.FrontFaceDirectionCCW=1;THREE.BasicShadowMap=0;THREE.PCFShadowMap=1;THREE.PCFSoftShadowMap=2;THREE.FrontSide=0;THREE.BackSide=1;THREE.DoubleSide=2;THREE.NoShading=0;THREE.FlatShading=1;THREE.SmoothShading=2;THREE.NoColors=0;THREE.FaceColors=1;THREE.VertexColors=2;THREE.NoBlending=0;THREE.NormalBlending=1;THREE.AdditiveBlending=2;
THREE.SubtractiveBlending=3;THREE.MultiplyBlending=4;THREE.CustomBlending=5;THREE.AddEquation=100;THREE.SubtractEquation=101;THREE.ReverseSubtractEquation=102;THREE.ZeroFactor=200;THREE.OneFactor=201;THREE.SrcColorFactor=202;THREE.OneMinusSrcColorFactor=203;THREE.SrcAlphaFactor=204;THREE.OneMinusSrcAlphaFactor=205;THREE.DstAlphaFactor=206;THREE.OneMinusDstAlphaFactor=207;THREE.DstColorFactor=208;THREE.OneMinusDstColorFactor=209;THREE.SrcAlphaSaturateFactor=210;THREE.MultiplyOperation=0;
THREE.MixOperation=1;THREE.AddOperation=2;THREE.UVMapping=function(){};THREE.CubeReflectionMapping=function(){};THREE.CubeRefractionMapping=function(){};THREE.SphericalReflectionMapping=function(){};THREE.SphericalRefractionMapping=function(){};THREE.RepeatWrapping=1E3;THREE.ClampToEdgeWrapping=1001;THREE.MirroredRepeatWrapping=1002;THREE.NearestFilter=1003;THREE.NearestMipMapNearestFilter=1004;THREE.NearestMipMapLinearFilter=1005;THREE.LinearFilter=1006;THREE.LinearMipMapNearestFilter=1007;
THREE.LinearMipMapLinearFilter=1008;THREE.UnsignedByteType=1009;THREE.ByteType=1010;THREE.ShortType=1011;THREE.UnsignedShortType=1012;THREE.IntType=1013;THREE.UnsignedIntType=1014;THREE.FloatType=1015;THREE.UnsignedShort4444Type=1016;THREE.UnsignedShort5551Type=1017;THREE.UnsignedShort565Type=1018;THREE.AlphaFormat=1019;THREE.RGBFormat=1020;THREE.RGBAFormat=1021;THREE.LuminanceFormat=1022;THREE.LuminanceAlphaFormat=1023;THREE.RGB_S3TC_DXT1_Format=2001;THREE.RGBA_S3TC_DXT1_Format=2002;
THREE.RGBA_S3TC_DXT3_Format=2003;THREE.RGBA_S3TC_DXT5_Format=2004;THREE.Color=function(a){void 0!==a&&this.set(a);return this};
THREE.extend(THREE.Color.prototype,{r:1,g:1,b:1,set:function(a){switch(typeof a){case "number":this.setHex(a);break;case "string":this.setStyle(a)}},setHex:function(a){a=Math.floor(a);this.r=(a>>16&255)/255;this.g=(a>>8&255)/255;this.b=(a&255)/255;return this},setRGB:function(a,b,c){this.r=a;this.g=b;this.b=c;return this},setHSV:function(a,b,c){var d,e,g;0===c?this.r=this.g=this.b=0:(d=Math.floor(6*a),e=6*a-d,a=c*(1-b),g=c*(1-b*e),b=c*(1-b*(1-e)),0===d?(this.r=c,this.g=b,this.b=a):1===d?(this.r=g,
this.g=c,this.b=a):2===d?(this.r=a,this.g=c,this.b=b):3===d?(this.r=a,this.g=g,this.b=c):4===d?(this.r=b,this.g=a,this.b=c):5===d&&(this.r=c,this.g=a,this.b=g));return this},setStyle:function(a){if(/^rgb\((\d+),(\d+),(\d+)\)$/i.test(a))return a=/^rgb\((\d+),(\d+),(\d+)\)$/i.exec(a),this.r=Math.min(255,parseInt(a[1],10))/255,this.g=Math.min(255,parseInt(a[2],10))/255,this.b=Math.min(255,parseInt(a[3],10))/255,this;if(/^rgb\((\d+)\%,(\d+)\%,(\d+)\%\)$/i.test(a))return a=/^rgb\((\d+)\%,(\d+)\%,(\d+)\%\)$/i.exec(a),
this.r=Math.min(100,parseInt(a[1],10))/100,this.g=Math.min(100,parseInt(a[2],10))/100,this.b=Math.min(100,parseInt(a[3],10))/100,this;if(/^\#([0-9a-f]{6})$/i.test(a))return a=/^\#([0-9a-f]{6})$/i.exec(a),this.setHex(parseInt(a[1],16)),this;if(/^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.test(a))return a=/^\#([0-9a-f])([0-9a-f])([0-9a-f])$/i.exec(a),this.setHex(parseInt(a[1]+a[1]+a[2]+a[2]+a[3]+a[3],16)),this;if(/^(\w+)$/i.test(a))return this.setHex(THREE.ColorKeywords[a]),this},copy:function(a){this.r=a.r;
this.g=a.g;this.b=a.b;return this},copyGammaToLinear:function(a){this.r=a.r*a.r;this.g=a.g*a.g;this.b=a.b*a.b;return this},copyLinearToGamma:function(a){this.r=Math.sqrt(a.r);this.g=Math.sqrt(a.g);this.b=Math.sqrt(a.b);return this},convertGammaToLinear:function(){var a=this.r,b=this.g,c=this.b;this.r=a*a;this.g=b*b;this.b=c*c;return this},convertLinearToGamma:function(){this.r=Math.sqrt(this.r);this.g=Math.sqrt(this.g);this.b=Math.sqrt(this.b);return this},getHex:function(){return 255*this.r<<16^
255*this.g<<8^255*this.b<<0},getHexString:function(){return("000000"+this.getHex().toString(16)).slice(-6)},getStyle:function(){return"rgb("+(255*this.r|0)+","+(255*this.g|0)+","+(255*this.b|0)+")"},getHSV:function(a){var b=this.r,c=this.g,d=this.b,e=Math.max(Math.max(b,c),d),g=Math.min(Math.min(b,c),d);if(g===e)g=b=0;else{var h=e-g,g=h/e,b=(b===e?(c-d)/h:c===e?2+(d-b)/h:4+(b-c)/h)/6;0>b&&(b+=1);1<b&&(b-=1)}void 0===a&&(a={h:0,s:0,v:0});a.h=b;a.s=g;a.v=e;return a},add:function(a){this.r+=a.r;this.g+=
a.g;this.b+=a.b;return this},addColors:function(a,b){this.r=a.r+b.r;this.g=a.g+b.g;this.b=a.b+b.b;return this},addScalar:function(a){this.r+=a;this.g+=a;this.b+=a;return this},multiply:function(a){this.r*=a.r;this.g*=a.g;this.b*=a.b;return this},multiplyScalar:function(a){this.r*=a;this.g*=a;this.b*=a;return this},lerp:function(a,b){this.r+=(a.r-this.r)*b;this.g+=(a.g-this.g)*b;this.b+=(a.b-this.b)*b;return this},clone:function(){return(new THREE.Color).setRGB(this.r,this.g,this.b)}});
THREE.ColorKeywords={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,
darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,
grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,
lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,
palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,
tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};THREE.Quaternion=function(a,b,c,d){this.x=a||0;this.y=b||0;this.z=c||0;this.w=void 0!==d?d:1};
THREE.extend(THREE.Quaternion.prototype,{set:function(a,b,c,d){this.x=a;this.y=b;this.z=c;this.w=d;return this},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;this.w=a.w;return this},setFromEuler:function(a,b){var c=Math.cos(a.x/2),d=Math.cos(a.y/2),e=Math.cos(a.z/2),g=Math.sin(a.x/2),h=Math.sin(a.y/2),i=Math.sin(a.z/2);void 0===b||"XYZ"===b?(this.x=g*d*e+c*h*i,this.y=c*h*e-g*d*i,this.z=c*d*i+g*h*e,this.w=c*d*e-g*h*i):"YXZ"===b?(this.x=g*d*e+c*h*i,this.y=c*h*e-g*d*i,this.z=c*d*i-g*h*e,this.w=c*
d*e+g*h*i):"ZXY"===b?(this.x=g*d*e-c*h*i,this.y=c*h*e+g*d*i,this.z=c*d*i+g*h*e,this.w=c*d*e-g*h*i):"ZYX"===b?(this.x=g*d*e-c*h*i,this.y=c*h*e+g*d*i,this.z=c*d*i-g*h*e,this.w=c*d*e+g*h*i):"YZX"===b?(this.x=g*d*e+c*h*i,this.y=c*h*e+g*d*i,this.z=c*d*i-g*h*e,this.w=c*d*e-g*h*i):"XZY"===b&&(this.x=g*d*e-c*h*i,this.y=c*h*e-g*d*i,this.z=c*d*i+g*h*e,this.w=c*d*e+g*h*i);return this},setFromAxisAngle:function(a,b){var c=b/2,d=Math.sin(c);this.x=a.x*d;this.y=a.y*d;this.z=a.z*d;this.w=Math.cos(c);return this},
setFromRotationMatrix:function(a){var b=a.elements,c=b[0],a=b[4],d=b[8],e=b[1],g=b[5],h=b[9],i=b[2],j=b[6],b=b[10],k=c+g+b;0<k?(c=0.5/Math.sqrt(k+1),this.w=0.25/c,this.x=(j-h)*c,this.y=(d-i)*c,this.z=(e-a)*c):c>g&&c>b?(c=2*Math.sqrt(1+c-g-b),this.w=(j-h)/c,this.x=0.25*c,this.y=(a+e)/c,this.z=(d+i)/c):g>b?(c=2*Math.sqrt(1+g-c-b),this.w=(d-i)/c,this.x=(a+e)/c,this.y=0.25*c,this.z=(h+j)/c):(c=2*Math.sqrt(1+b-c-g),this.w=(e-a)/c,this.x=(d+i)/c,this.y=(h+j)/c,this.z=0.25*c);return this},inverse:function(){this.conjugate().normalize();
return this},conjugate:function(){this.x*=-1;this.y*=-1;this.z*=-1;return this},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w)},normalize:function(){var a=this.length();0===a?(this.z=this.y=this.x=0,this.w=1):(a=1/a,this.x*=a,this.y*=a,this.z*=a,this.w*=a);return this},multiply:function(a,b){return void 0!==b?(console.warn("DEPRECATED: Quaternion's .multiply() now only accepts one argument. Use .multiplyQuaternions( a, b ) instead."),
this.multiplyQuaternions(a,b)):this.multiplyQuaternions(this,a)},multiplyQuaternions:function(a,b){var c=a.x,d=a.y,e=a.z,g=a.w,h=b.x,i=b.y,j=b.z,k=b.w;this.x=c*k+g*h+d*j-e*i;this.y=d*k+g*i+e*h-c*j;this.z=e*k+g*j+c*i-d*h;this.w=g*k-c*h-d*i-e*j;return this},multiplyVector3:function(a){console.warn("DEPRECATED: Quaternion's .multiplyVector3() has been removed. Use is now vector.applyQuaternion( quaternion ) instead.");return a.applyQuaternion(this)},slerp:function(a,b){var c=this.x,d=this.y,e=this.z,
g=this.w,h=g*a.w+c*a.x+d*a.y+e*a.z;0>h?(this.w=-a.w,this.x=-a.x,this.y=-a.y,this.z=-a.z,h=-h):this.copy(a);if(1<=h)return this.w=g,this.x=c,this.y=d,this.z=e,this;var i=Math.acos(h),j=Math.sqrt(1-h*h);if(0.001>Math.abs(j))return this.w=0.5*(g+this.w),this.x=0.5*(c+this.x),this.y=0.5*(d+this.y),this.z=0.5*(e+this.z),this;h=Math.sin((1-b)*i)/j;i=Math.sin(b*i)/j;this.w=g*h+this.w*i;this.x=c*h+this.x*i;this.y=d*h+this.y*i;this.z=e*h+this.z*i;return this},equals:function(a){return a.x===this.x&&a.y===
this.y&&a.z===this.z&&a.w===this.w},clone:function(){return new THREE.Quaternion(this.x,this.y,this.z,this.w)}});THREE.Quaternion.slerp=function(a,b,c,d){return c.copy(a).slerp(b,d)};THREE.Vector2=function(a,b){this.x=a||0;this.y=b||0};
THREE.extend(THREE.Vector2.prototype,{set:function(a,b){this.x=a;this.y=b;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;default:throw Error("index is out of range: "+a);}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;default:throw Error("index is out of range: "+a);}},copy:function(a){this.x=a.x;this.y=a.y;return this},add:function(a,b){if(void 0!==
b)return console.warn("DEPRECATED: Vector2's .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;return this},addScalar:function(a){this.x+=a;this.y+=a;return this},sub:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector2's .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,b);this.x-=a.x;this.y-=a.y;return this},
subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;return this},divideScalar:function(a){0!==a?(this.x/=a,this.y/=a):this.set(0,0);return this},min:function(a){this.x>a.x&&(this.x=a.x);this.y>a.y&&(this.y=a.y);return this},max:function(a){this.x<a.x&&(this.x=a.x);this.y<a.y&&(this.y=a.y);return this},clamp:function(a,b){this.x<a.x?this.x=a.x:this.x>b.x&&(this.x=b.x);this.y<a.y?this.y=a.y:this.y>b.y&&(this.y=b.y);return this},negate:function(){return this.multiplyScalar(-1)},
dot:function(a){return this.x*a.x+this.y*a.y},lengthSq:function(){return this.x*this.x+this.y*this.y},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y)},normalize:function(){return this.divideScalar(this.length())},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-a.x,a=this.y-a.y;return b*b+a*a},setLength:function(a){var b=this.length();0!==b&&a!==b&&this.multiplyScalar(a/b);return this},lerp:function(a,b){this.x+=(a.x-this.x)*
b;this.y+=(a.y-this.y)*b;return this},equals:function(a){return a.x===this.x&&a.y===this.y},toArray:function(){return[this.x,this.y]},clone:function(){return new THREE.Vector2(this.x,this.y)}});THREE.Vector3=function(a,b,c){this.x=a||0;this.y=b||0;this.z=c||0};
THREE.extend(THREE.Vector3.prototype,{set:function(a,b,c){this.x=a;this.y=b;this.z=c;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;default:throw Error("index is out of range: "+a);}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;case 2:return this.z;default:throw Error("index is out of range: "+
a);}},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;return this},add:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector3's .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;this.z+=a.z;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;return this},addVectors:function(a,b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;return this},sub:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector3's .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),
this.subVectors(a,b);this.x-=a.x;this.y-=a.y;this.z-=a.z;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;return this},multiply:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector3's .multiply() now only accepts one argument. Use .multiplyVectors( a, b ) instead."),this.multiplyVectors(a,b);this.x*=a.x;this.y*=a.y;this.z*=a.z;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=a;return this},multiplyVectors:function(a,b){this.x=a.x*
b.x;this.y=a.y*b.y;this.z=a.z*b.z;return this},applyMatrix3:function(a){var b=this.x,c=this.y,d=this.z,a=a.elements;this.x=a[0]*b+a[3]*c+a[6]*d;this.y=a[1]*b+a[4]*c+a[7]*d;this.z=a[2]*b+a[5]*c+a[8]*d;return this},applyMatrix4:function(a){var b=this.x,c=this.y,d=this.z,a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d+a[12];this.y=a[1]*b+a[5]*c+a[9]*d+a[13];this.z=a[2]*b+a[6]*c+a[10]*d+a[14];return this},applyProjection:function(a){var b=this.x,c=this.y,d=this.z,a=a.elements,e=1/(a[3]*b+a[7]*c+a[11]*d+a[15]);
this.x=(a[0]*b+a[4]*c+a[8]*d+a[12])*e;this.y=(a[1]*b+a[5]*c+a[9]*d+a[13])*e;this.z=(a[2]*b+a[6]*c+a[10]*d+a[14])*e;return this},applyQuaternion:function(a){var b=this.x,c=this.y,d=this.z,e=a.x,g=a.y,h=a.z,a=a.w,i=a*b+g*d-h*c,j=a*c+h*b-e*d,k=a*d+e*c-g*b,b=-e*b-g*c-h*d;this.x=i*a+b*-e+j*-h-k*-g;this.y=j*a+b*-g+k*-e-i*-h;this.z=k*a+b*-h+i*-g-j*-e;return this},applyEuler:function(){var a=new THREE.Quaternion;return function(b,c){var d=a.setFromEuler(b,c);this.applyQuaternion(d);return this}}(),applyAxisAngle:function(){var a=
new THREE.Quaternion;return function(b,c){var d=a.setFromAxisAngle(b,c);this.applyQuaternion(d);return this}}(),transformDirection:function(a){var b=this.x,c=this.y,d=this.z,a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d;this.y=a[1]*b+a[5]*c+a[9]*d;this.z=a[2]*b+a[6]*c+a[10]*d;this.normalize();return this},divide:function(a){this.x/=a.x;this.y/=a.y;this.z/=a.z;return this},divideScalar:function(a){0!==a?(this.x/=a,this.y/=a,this.z/=a):this.z=this.y=this.x=0;return this},min:function(a){this.x>a.x&&(this.x=
a.x);this.y>a.y&&(this.y=a.y);this.z>a.z&&(this.z=a.z);return this},max:function(a){this.x<a.x&&(this.x=a.x);this.y<a.y&&(this.y=a.y);this.z<a.z&&(this.z=a.z);return this},clamp:function(a,b){this.x<a.x?this.x=a.x:this.x>b.x&&(this.x=b.x);this.y<a.y?this.y=a.y:this.y>b.y&&(this.y=b.y);this.z<a.z?this.z=a.z:this.z>b.z&&(this.z=b.z);return this},negate:function(){return this.multiplyScalar(-1)},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z},lengthSq:function(){return this.x*this.x+this.y*
this.y+this.z*this.z},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+this.z*this.z)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)},normalize:function(){return this.divideScalar(this.length())},setLength:function(a){var b=this.length();0!==b&&a!==b&&this.multiplyScalar(a/b);return this},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;return this},cross:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector3's .cross() now only accepts one argument. Use .crossVectors( a, b ) instead."),
this.crossVectors(a,b);var c=this.x,d=this.y,e=this.z;this.x=d*a.z-e*a.y;this.y=e*a.x-c*a.z;this.z=c*a.y-d*a.x;return this},crossVectors:function(a,b){this.x=a.y*b.z-a.z*b.y;this.y=a.z*b.x-a.x*b.z;this.z=a.x*b.y-a.y*b.x;return this},angleTo:function(a){return Math.acos(this.dot(a)/this.length()/a.length())},distanceTo:function(a){return Math.sqrt(this.distanceToSquared(a))},distanceToSquared:function(a){var b=this.x-a.x,c=this.y-a.y,a=this.z-a.z;return b*b+c*c+a*a},getPositionFromMatrix:function(a){this.x=
a.elements[12];this.y=a.elements[13];this.z=a.elements[14];return this},setEulerFromRotationMatrix:function(a,b){function c(a){return Math.min(Math.max(a,-1),1)}var d=a.elements,e=d[0],g=d[4],h=d[8],i=d[1],j=d[5],k=d[9],n=d[2],m=d[6],d=d[10];void 0===b||"XYZ"===b?(this.y=Math.asin(c(h)),0.99999>Math.abs(h)?(this.x=Math.atan2(-k,d),this.z=Math.atan2(-g,e)):(this.x=Math.atan2(m,j),this.z=0)):"YXZ"===b?(this.x=Math.asin(-c(k)),0.99999>Math.abs(k)?(this.y=Math.atan2(h,d),this.z=Math.atan2(i,j)):(this.y=
Math.atan2(-n,e),this.z=0)):"ZXY"===b?(this.x=Math.asin(c(m)),0.99999>Math.abs(m)?(this.y=Math.atan2(-n,d),this.z=Math.atan2(-g,j)):(this.y=0,this.z=Math.atan2(i,e))):"ZYX"===b?(this.y=Math.asin(-c(n)),0.99999>Math.abs(n)?(this.x=Math.atan2(m,d),this.z=Math.atan2(i,e)):(this.x=0,this.z=Math.atan2(-g,j))):"YZX"===b?(this.z=Math.asin(c(i)),0.99999>Math.abs(i)?(this.x=Math.atan2(-k,j),this.y=Math.atan2(-n,e)):(this.x=0,this.y=Math.atan2(h,d))):"XZY"===b&&(this.z=Math.asin(-c(g)),0.99999>Math.abs(g)?
(this.x=Math.atan2(m,j),this.y=Math.atan2(h,e)):(this.x=Math.atan2(-k,d),this.y=0));return this},setEulerFromQuaternion:function(a,b){function c(a){return Math.min(Math.max(a,-1),1)}var d=a.x*a.x,e=a.y*a.y,g=a.z*a.z,h=a.w*a.w;void 0===b||"XYZ"===b?(this.x=Math.atan2(2*(a.x*a.w-a.y*a.z),h-d-e+g),this.y=Math.asin(c(2*(a.x*a.z+a.y*a.w))),this.z=Math.atan2(2*(a.z*a.w-a.x*a.y),h+d-e-g)):"YXZ"===b?(this.x=Math.asin(c(2*(a.x*a.w-a.y*a.z))),this.y=Math.atan2(2*(a.x*a.z+a.y*a.w),h-d-e+g),this.z=Math.atan2(2*
(a.x*a.y+a.z*a.w),h-d+e-g)):"ZXY"===b?(this.x=Math.asin(c(2*(a.x*a.w+a.y*a.z))),this.y=Math.atan2(2*(a.y*a.w-a.z*a.x),h-d-e+g),this.z=Math.atan2(2*(a.z*a.w-a.x*a.y),h-d+e-g)):"ZYX"===b?(this.x=Math.atan2(2*(a.x*a.w+a.z*a.y),h-d-e+g),this.y=Math.asin(c(2*(a.y*a.w-a.x*a.z))),this.z=Math.atan2(2*(a.x*a.y+a.z*a.w),h+d-e-g)):"YZX"===b?(this.x=Math.atan2(2*(a.x*a.w-a.z*a.y),h-d+e-g),this.y=Math.atan2(2*(a.y*a.w-a.x*a.z),h+d-e-g),this.z=Math.asin(c(2*(a.x*a.y+a.z*a.w)))):"XZY"===b&&(this.x=Math.atan2(2*
(a.x*a.w+a.y*a.z),h-d+e-g),this.y=Math.atan2(2*(a.x*a.z+a.y*a.w),h+d-e-g),this.z=Math.asin(c(2*(a.z*a.w-a.x*a.y))));return this},getScaleFromMatrix:function(a){var b=this.set(a.elements[0],a.elements[1],a.elements[2]).length(),c=this.set(a.elements[4],a.elements[5],a.elements[6]).length(),a=this.set(a.elements[8],a.elements[9],a.elements[10]).length();this.x=b;this.y=c;this.z=a;return this},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z},toArray:function(){return[this.x,this.y,
this.z]},clone:function(){return new THREE.Vector3(this.x,this.y,this.z)}});THREE.Vector4=function(a,b,c,d){this.x=a||0;this.y=b||0;this.z=c||0;this.w=void 0!==d?d:1};
THREE.extend(THREE.Vector4.prototype,{set:function(a,b,c,d){this.x=a;this.y=b;this.z=c;this.w=d;return this},setX:function(a){this.x=a;return this},setY:function(a){this.y=a;return this},setZ:function(a){this.z=a;return this},setW:function(a){this.w=a;return this},setComponent:function(a,b){switch(a){case 0:this.x=b;break;case 1:this.y=b;break;case 2:this.z=b;break;case 3:this.w=b;break;default:throw Error("index is out of range: "+a);}},getComponent:function(a){switch(a){case 0:return this.x;case 1:return this.y;
case 2:return this.z;case 3:return this.w;default:throw Error("index is out of range: "+a);}},copy:function(a){this.x=a.x;this.y=a.y;this.z=a.z;this.w=void 0!==a.w?a.w:1;return this},add:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector4's .add() now only accepts one argument. Use .addVectors( a, b ) instead."),this.addVectors(a,b);this.x+=a.x;this.y+=a.y;this.z+=a.z;this.w+=a.w;return this},addScalar:function(a){this.x+=a;this.y+=a;this.z+=a;this.w+=a;return this},addVectors:function(a,
b){this.x=a.x+b.x;this.y=a.y+b.y;this.z=a.z+b.z;this.w=a.w+b.w;return this},sub:function(a,b){if(void 0!==b)return console.warn("DEPRECATED: Vector4's .sub() now only accepts one argument. Use .subVectors( a, b ) instead."),this.subVectors(a,b);this.x-=a.x;this.y-=a.y;this.z-=a.z;this.w-=a.w;return this},subVectors:function(a,b){this.x=a.x-b.x;this.y=a.y-b.y;this.z=a.z-b.z;this.w=a.w-b.w;return this},multiplyScalar:function(a){this.x*=a;this.y*=a;this.z*=a;this.w*=a;return this},applyMatrix4:function(a){var b=
this.x,c=this.y,d=this.z,e=this.w,a=a.elements;this.x=a[0]*b+a[4]*c+a[8]*d+a[12]*e;this.y=a[1]*b+a[5]*c+a[9]*d+a[13]*e;this.z=a[2]*b+a[6]*c+a[10]*d+a[14]*e;this.w=a[3]*b+a[7]*c+a[11]*d+a[15]*e;return this},divideScalar:function(a){0!==a?(this.x/=a,this.y/=a,this.z/=a,this.w/=a):(this.z=this.y=this.x=0,this.w=1);return this},setAxisAngleFromQuaternion:function(a){this.w=2*Math.acos(a.w);var b=Math.sqrt(1-a.w*a.w);1E-4>b?(this.x=1,this.z=this.y=0):(this.x=a.x/b,this.y=a.y/b,this.z=a.z/b);return this},
setAxisAngleFromRotationMatrix:function(a){var b,c,d,a=a.elements,e=a[0];d=a[4];var g=a[8],h=a[1],i=a[5],j=a[9];c=a[2];b=a[6];var k=a[10];if(0.01>Math.abs(d-h)&&0.01>Math.abs(g-c)&&0.01>Math.abs(j-b)){if(0.1>Math.abs(d+h)&&0.1>Math.abs(g+c)&&0.1>Math.abs(j+b)&&0.1>Math.abs(e+i+k-3))return this.set(1,0,0,0),this;a=Math.PI;e=(e+1)/2;i=(i+1)/2;k=(k+1)/2;d=(d+h)/4;g=(g+c)/4;j=(j+b)/4;e>i&&e>k?0.01>e?(b=0,d=c=0.707106781):(b=Math.sqrt(e),c=d/b,d=g/b):i>k?0.01>i?(b=0.707106781,c=0,d=0.707106781):(c=Math.sqrt(i),
b=d/c,d=j/c):0.01>k?(c=b=0.707106781,d=0):(d=Math.sqrt(k),b=g/d,c=j/d);this.set(b,c,d,a);return this}a=Math.sqrt((b-j)*(b-j)+(g-c)*(g-c)+(h-d)*(h-d));0.001>Math.abs(a)&&(a=1);this.x=(b-j)/a;this.y=(g-c)/a;this.z=(h-d)/a;this.w=Math.acos((e+i+k-1)/2);return this},min:function(a){this.x>a.x&&(this.x=a.x);this.y>a.y&&(this.y=a.y);this.z>a.z&&(this.z=a.z);this.w>a.w&&(this.w=a.w);return this},max:function(a){this.x<a.x&&(this.x=a.x);this.y<a.y&&(this.y=a.y);this.z<a.z&&(this.z=a.z);this.w<a.w&&(this.w=
a.w);return this},clamp:function(a,b){this.x<a.x?this.x=a.x:this.x>b.x&&(this.x=b.x);this.y<a.y?this.y=a.y:this.y>b.y&&(this.y=b.y);this.z<a.z?this.z=a.z:this.z>b.z&&(this.z=b.z);this.w<a.w?this.w=a.w:this.w>b.w&&(this.w=b.w);return this},negate:function(){return this.multiplyScalar(-1)},dot:function(a){return this.x*a.x+this.y*a.y+this.z*a.z+this.w*a.w},lengthSq:function(){return this.x*this.x+this.y*this.y+this.z*this.z+this.w*this.w},length:function(){return Math.sqrt(this.x*this.x+this.y*this.y+
this.z*this.z+this.w*this.w)},lengthManhattan:function(){return Math.abs(this.x)+Math.abs(this.y)+Math.abs(this.z)+Math.abs(this.w)},normalize:function(){return this.divideScalar(this.length())},setLength:function(a){var b=this.length();0!==b&&a!==b&&this.multiplyScalar(a/b);return this},lerp:function(a,b){this.x+=(a.x-this.x)*b;this.y+=(a.y-this.y)*b;this.z+=(a.z-this.z)*b;this.w+=(a.w-this.w)*b;return this},equals:function(a){return a.x===this.x&&a.y===this.y&&a.z===this.z&&a.w===this.w},toArray:function(){return[this.x,
this.y,this.z,this.w]},clone:function(){return new THREE.Vector4(this.x,this.y,this.z,this.w)}});THREE.Matrix3=function(a,b,c,d,e,g,h,i,j){this.elements=new Float32Array(9);this.set(void 0!==a?a:1,b||0,c||0,d||0,void 0!==e?e:1,g||0,h||0,i||0,void 0!==j?j:1)};
THREE.extend(THREE.Matrix3.prototype,{set:function(a,b,c,d,e,g,h,i,j){var k=this.elements;k[0]=a;k[3]=b;k[6]=c;k[1]=d;k[4]=e;k[7]=g;k[2]=h;k[5]=i;k[8]=j;return this},identity:function(){this.set(1,0,0,0,1,0,0,0,1);return this},copy:function(a){a=a.elements;this.set(a[0],a[3],a[6],a[1],a[4],a[7],a[2],a[5],a[8]);return this},multiplyVector3:function(a){console.warn("DEPRECATED: Matrix3's .multiplyVector3() has been removed. Use vector.applyMatrix3( matrix ) instead.");return a.applyMatrix3(this)},multiplyVector3Array:function(){var a=
new THREE.Vector3;return function(b){for(var c=0,d=b.length;c<d;c+=3)a.x=b[c],a.y=b[c+1],a.z=b[c+2],a.applyMatrix3(this),b[c]=a.x,b[c+1]=a.y,b[c+2]=a.z;return b}}(),multiplyScalar:function(a){var b=this.elements;b[0]*=a;b[3]*=a;b[6]*=a;b[1]*=a;b[4]*=a;b[7]*=a;b[2]*=a;b[5]*=a;b[8]*=a;return this},determinant:function(){var a=this.elements,b=a[0],c=a[1],d=a[2],e=a[3],g=a[4],h=a[5],i=a[6],j=a[7],a=a[8];return b*g*a-b*h*j-c*e*a+c*h*i+d*e*j-d*g*i},getInverse:function(a,b){var c=a.elements,d=this.elements;
d[0]=c[10]*c[5]-c[6]*c[9];d[1]=-c[10]*c[1]+c[2]*c[9];d[2]=c[6]*c[1]-c[2]*c[5];d[3]=-c[10]*c[4]+c[6]*c[8];d[4]=c[10]*c[0]-c[2]*c[8];d[5]=-c[6]*c[0]+c[2]*c[4];d[6]=c[9]*c[4]-c[5]*c[8];d[7]=-c[9]*c[0]+c[1]*c[8];d[8]=c[5]*c[0]-c[1]*c[4];c=c[0]*d[0]+c[1]*d[3]+c[2]*d[6];if(0===c){if(b)throw Error("Matrix3.getInverse(): can't invert matrix, determinant is 0");console.warn("Matrix3.getInverse(): can't invert matrix, determinant is 0");this.identity();return this}this.multiplyScalar(1/c);return this},transpose:function(){var a,
b=this.elements;a=b[1];b[1]=b[3];b[3]=a;a=b[2];b[2]=b[6];b[6]=a;a=b[5];b[5]=b[7];b[7]=a;return this},getNormalMatrix:function(a){this.getInverse(a).transpose();return this},transposeIntoArray:function(a){var b=this.elements;a[0]=b[0];a[1]=b[3];a[2]=b[6];a[3]=b[1];a[4]=b[4];a[5]=b[7];a[6]=b[2];a[7]=b[5];a[8]=b[8];return this},clone:function(){var a=this.elements;return new THREE.Matrix3(a[0],a[3],a[6],a[1],a[4],a[7],a[2],a[5],a[8])}});THREE.Matrix4=function(a,b,c,d,e,g,h,i,j,k,n,m,u,v,p,l){var t=this.elements=new Float32Array(16);t[0]=void 0!==a?a:1;t[4]=b||0;t[8]=c||0;t[12]=d||0;t[1]=e||0;t[5]=void 0!==g?g:1;t[9]=h||0;t[13]=i||0;t[2]=j||0;t[6]=k||0;t[10]=void 0!==n?n:1;t[14]=m||0;t[3]=u||0;t[7]=v||0;t[11]=p||0;t[15]=void 0!==l?l:1};
THREE.extend(THREE.Matrix4.prototype,{set:function(a,b,c,d,e,g,h,i,j,k,n,m,u,v,p,l){var t=this.elements;t[0]=a;t[4]=b;t[8]=c;t[12]=d;t[1]=e;t[5]=g;t[9]=h;t[13]=i;t[2]=j;t[6]=k;t[10]=n;t[14]=m;t[3]=u;t[7]=v;t[11]=p;t[15]=l;return this},identity:function(){this.set(1,0,0,0,0,1,0,0,0,0,1,0,0,0,0,1);return this},copy:function(a){a=a.elements;this.set(a[0],a[4],a[8],a[12],a[1],a[5],a[9],a[13],a[2],a[6],a[10],a[14],a[3],a[7],a[11],a[15]);return this},setRotationFromEuler:function(a,b){var c=this.elements,
d=a.x,e=a.y,g=a.z,h=Math.cos(d),d=Math.sin(d),i=Math.cos(e),e=Math.sin(e),j=Math.cos(g),g=Math.sin(g);if(void 0===b||"XYZ"===b){var k=h*j,n=h*g,m=d*j,u=d*g;c[0]=i*j;c[4]=-i*g;c[8]=e;c[1]=n+m*e;c[5]=k-u*e;c[9]=-d*i;c[2]=u-k*e;c[6]=m+n*e;c[10]=h*i}else"YXZ"===b?(k=i*j,n=i*g,m=e*j,u=e*g,c[0]=k+u*d,c[4]=m*d-n,c[8]=h*e,c[1]=h*g,c[5]=h*j,c[9]=-d,c[2]=n*d-m,c[6]=u+k*d,c[10]=h*i):"ZXY"===b?(k=i*j,n=i*g,m=e*j,u=e*g,c[0]=k-u*d,c[4]=-h*g,c[8]=m+n*d,c[1]=n+m*d,c[5]=h*j,c[9]=u-k*d,c[2]=-h*e,c[6]=d,c[10]=h*i):
"ZYX"===b?(k=h*j,n=h*g,m=d*j,u=d*g,c[0]=i*j,c[4]=m*e-n,c[8]=k*e+u,c[1]=i*g,c[5]=u*e+k,c[9]=n*e-m,c[2]=-e,c[6]=d*i,c[10]=h*i):"YZX"===b?(k=h*i,n=h*e,m=d*i,u=d*e,c[0]=i*j,c[4]=u-k*g,c[8]=m*g+n,c[1]=g,c[5]=h*j,c[9]=-d*j,c[2]=-e*j,c[6]=n*g+m,c[10]=k-u*g):"XZY"===b&&(k=h*i,n=h*e,m=d*i,u=d*e,c[0]=i*j,c[4]=-g,c[8]=e*j,c[1]=k*g+u,c[5]=h*j,c[9]=n*g-m,c[2]=m*g-n,c[6]=d*j,c[10]=u*g+k);return this},setRotationFromQuaternion:function(a){var b=this.elements,c=a.x,d=a.y,e=a.z,g=a.w,h=c+c,i=d+d,j=e+e,a=c*h,k=c*i,
c=c*j,n=d*i,d=d*j,e=e*j,h=g*h,i=g*i,g=g*j;b[0]=1-(n+e);b[4]=k-g;b[8]=c+i;b[1]=k+g;b[5]=1-(a+e);b[9]=d-h;b[2]=c-i;b[6]=d+h;b[10]=1-(a+n);return this},lookAt:function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(d,e,g){var h=this.elements;c.subVectors(d,e).normalize();0===c.length()&&(c.z=1);a.crossVectors(g,c).normalize();0===a.length()&&(c.x+=1E-4,a.crossVectors(g,c).normalize());b.crossVectors(c,a);h[0]=a.x;h[4]=b.x;h[8]=c.x;h[1]=a.y;h[5]=b.y;h[9]=c.y;h[2]=a.z;
h[6]=b.z;h[10]=c.z;return this}}(),multiply:function(a,b){return void 0!==b?(console.warn("DEPRECATED: Matrix4's .multiply() now only accepts one argument. Use .multiplyMatrices( a, b ) instead."),this.multiplyMatrices(a,b)):this.multiplyMatrices(this,a)},multiplyMatrices:function(a,b){var c=a.elements,d=b.elements,e=this.elements,g=c[0],h=c[4],i=c[8],j=c[12],k=c[1],n=c[5],m=c[9],u=c[13],v=c[2],p=c[6],l=c[10],t=c[14],x=c[3],w=c[7],A=c[11],c=c[15],r=d[0],N=d[4],E=d[8],C=d[12],y=d[1],R=d[5],I=d[9],
F=d[13],X=d[2],B=d[6],P=d[10],D=d[14],S=d[3],Q=d[7],la=d[11],d=d[15];e[0]=g*r+h*y+i*X+j*S;e[4]=g*N+h*R+i*B+j*Q;e[8]=g*E+h*I+i*P+j*la;e[12]=g*C+h*F+i*D+j*d;e[1]=k*r+n*y+m*X+u*S;e[5]=k*N+n*R+m*B+u*Q;e[9]=k*E+n*I+m*P+u*la;e[13]=k*C+n*F+m*D+u*d;e[2]=v*r+p*y+l*X+t*S;e[6]=v*N+p*R+l*B+t*Q;e[10]=v*E+p*I+l*P+t*la;e[14]=v*C+p*F+l*D+t*d;e[3]=x*r+w*y+A*X+c*S;e[7]=x*N+w*R+A*B+c*Q;e[11]=x*E+w*I+A*P+c*la;e[15]=x*C+w*F+A*D+c*d;return this},multiplyToArray:function(a,b,c){var d=this.elements;this.multiplyMatrices(a,
b);c[0]=d[0];c[1]=d[1];c[2]=d[2];c[3]=d[3];c[4]=d[4];c[5]=d[5];c[6]=d[6];c[7]=d[7];c[8]=d[8];c[9]=d[9];c[10]=d[10];c[11]=d[11];c[12]=d[12];c[13]=d[13];c[14]=d[14];c[15]=d[15];return this},multiplyScalar:function(a){var b=this.elements;b[0]*=a;b[4]*=a;b[8]*=a;b[12]*=a;b[1]*=a;b[5]*=a;b[9]*=a;b[13]*=a;b[2]*=a;b[6]*=a;b[10]*=a;b[14]*=a;b[3]*=a;b[7]*=a;b[11]*=a;b[15]*=a;return this},multiplyVector3:function(a){console.warn("DEPRECATED: Matrix4's .multiplyVector3() has been removed. Use vector.applyMatrix4( matrix ) or vector.applyProjection( matrix ) instead.");
return a.applyProjection(this)},multiplyVector4:function(a){console.warn("DEPRECATED: Matrix4's .multiplyVector4() has been removed. Use vector.applyMatrix4( matrix ) instead.");return a.applyMatrix4(this)},multiplyVector3Array:function(){var a=new THREE.Vector3;return function(b){for(var c=0,d=b.length;c<d;c+=3)a.x=b[c],a.y=b[c+1],a.z=b[c+2],a.applyProjection(this),b[c]=a.x,b[c+1]=a.y,b[c+2]=a.z;return b}}(),rotateAxis:function(a){var b=this.elements,c=a.x,d=a.y,e=a.z;a.x=c*b[0]+d*b[4]+e*b[8];a.y=
c*b[1]+d*b[5]+e*b[9];a.z=c*b[2]+d*b[6]+e*b[10];a.normalize();return a},crossVector:function(a){var b=this.elements,c=new THREE.Vector4;c.x=b[0]*a.x+b[4]*a.y+b[8]*a.z+b[12]*a.w;c.y=b[1]*a.x+b[5]*a.y+b[9]*a.z+b[13]*a.w;c.z=b[2]*a.x+b[6]*a.y+b[10]*a.z+b[14]*a.w;c.w=a.w?b[3]*a.x+b[7]*a.y+b[11]*a.z+b[15]*a.w:1;return c},determinant:function(){var a=this.elements,b=a[0],c=a[4],d=a[8],e=a[12],g=a[1],h=a[5],i=a[9],j=a[13],k=a[2],n=a[6],m=a[10],u=a[14];return a[3]*(+e*i*n-d*j*n-e*h*m+c*j*m+d*h*u-c*i*u)+a[7]*
(+b*i*u-b*j*m+e*g*m-d*g*u+d*j*k-e*i*k)+a[11]*(+b*j*n-b*h*u-e*g*n+c*g*u+e*h*k-c*j*k)+a[15]*(-d*h*k-b*i*n+b*h*m+d*g*n-c*g*m+c*i*k)},transpose:function(){var a=this.elements,b;b=a[1];a[1]=a[4];a[4]=b;b=a[2];a[2]=a[8];a[8]=b;b=a[6];a[6]=a[9];a[9]=b;b=a[3];a[3]=a[12];a[12]=b;b=a[7];a[7]=a[13];a[13]=b;b=a[11];a[11]=a[14];a[14]=b;return this},flattenToArray:function(a){var b=this.elements;a[0]=b[0];a[1]=b[1];a[2]=b[2];a[3]=b[3];a[4]=b[4];a[5]=b[5];a[6]=b[6];a[7]=b[7];a[8]=b[8];a[9]=b[9];a[10]=b[10];a[11]=
b[11];a[12]=b[12];a[13]=b[13];a[14]=b[14];a[15]=b[15];return a},flattenToArrayOffset:function(a,b){var c=this.elements;a[b]=c[0];a[b+1]=c[1];a[b+2]=c[2];a[b+3]=c[3];a[b+4]=c[4];a[b+5]=c[5];a[b+6]=c[6];a[b+7]=c[7];a[b+8]=c[8];a[b+9]=c[9];a[b+10]=c[10];a[b+11]=c[11];a[b+12]=c[12];a[b+13]=c[13];a[b+14]=c[14];a[b+15]=c[15];return a},getPosition:function(){var a=new THREE.Vector3;return function(){var b=this.elements;return a.set(b[12],b[13],b[14])}}(),setPosition:function(a){var b=this.elements;b[12]=
a.x;b[13]=a.y;b[14]=a.z;return this},getInverse:function(a,b){var c=this.elements,d=a.elements,e=d[0],g=d[4],h=d[8],i=d[12],j=d[1],k=d[5],n=d[9],m=d[13],u=d[2],v=d[6],p=d[10],l=d[14],t=d[3],x=d[7],w=d[11],A=d[15];c[0]=n*l*x-m*p*x+m*v*w-k*l*w-n*v*A+k*p*A;c[4]=i*p*x-h*l*x-i*v*w+g*l*w+h*v*A-g*p*A;c[8]=h*m*x-i*n*x+i*k*w-g*m*w-h*k*A+g*n*A;c[12]=i*n*v-h*m*v-i*k*p+g*m*p+h*k*l-g*n*l;c[1]=m*p*t-n*l*t-m*u*w+j*l*w+n*u*A-j*p*A;c[5]=h*l*t-i*p*t+i*u*w-e*l*w-h*u*A+e*p*A;c[9]=i*n*t-h*m*t-i*j*w+e*m*w+h*j*A-e*n*A;
c[13]=h*m*u-i*n*u+i*j*p-e*m*p-h*j*l+e*n*l;c[2]=k*l*t-m*v*t+m*u*x-j*l*x-k*u*A+j*v*A;c[6]=i*v*t-g*l*t-i*u*x+e*l*x+g*u*A-e*v*A;c[10]=g*m*t-i*k*t+i*j*x-e*m*x-g*j*A+e*k*A;c[14]=i*k*u-g*m*u-i*j*v+e*m*v+g*j*l-e*k*l;c[3]=n*v*t-k*p*t-n*u*x+j*p*x+k*u*w-j*v*w;c[7]=g*p*t-h*v*t+h*u*x-e*p*x-g*u*w+e*v*w;c[11]=h*k*t-g*n*t-h*j*x+e*n*x+g*j*w-e*k*w;c[15]=g*n*u-h*k*u+h*j*v-e*n*v-g*j*p+e*k*p;c=d[0]*c[0]+d[1]*c[4]+d[2]*c[8]+d[3]*c[12];if(0==c){if(b)throw Error("Matrix4.getInverse(): can't invert matrix, determinant is 0");
console.warn("Matrix4.getInverse(): can't invert matrix, determinant is 0");this.identity();return this}this.multiplyScalar(1/c);return this},compose:function(){var a=new THREE.Matrix4,b=new THREE.Matrix4;return function(c,d,e){var g=this.elements;a.identity();a.setRotationFromQuaternion(d);b.makeScale(e.x,e.y,e.z);this.multiplyMatrices(a,b);g[12]=c.x;g[13]=c.y;g[14]=c.z;return this}}(),decompose:function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3,d=new THREE.Matrix4;return function(e,
g,h){var i=this.elements;a.set(i[0],i[1],i[2]);b.set(i[4],i[5],i[6]);c.set(i[8],i[9],i[10]);e=e instanceof THREE.Vector3?e:new THREE.Vector3;g=g instanceof THREE.Quaternion?g:new THREE.Quaternion;h=h instanceof THREE.Vector3?h:new THREE.Vector3;h.x=a.length();h.y=b.length();h.z=c.length();e.x=i[12];e.y=i[13];e.z=i[14];d.copy(this);d.elements[0]/=h.x;d.elements[1]/=h.x;d.elements[2]/=h.x;d.elements[4]/=h.y;d.elements[5]/=h.y;d.elements[6]/=h.y;d.elements[8]/=h.z;d.elements[9]/=h.z;d.elements[10]/=
h.z;g.setFromRotationMatrix(d);return[e,g,h]}}(),extractPosition:function(a){var b=this.elements,a=a.elements;b[12]=a[12];b[13]=a[13];b[14]=a[14];return this},extractRotation:function(){var a=new THREE.Vector3;return function(b){var c=this.elements,b=b.elements,d=1/a.set(b[0],b[1],b[2]).length(),e=1/a.set(b[4],b[5],b[6]).length(),g=1/a.set(b[8],b[9],b[10]).length();c[0]=b[0]*d;c[1]=b[1]*d;c[2]=b[2]*d;c[4]=b[4]*e;c[5]=b[5]*e;c[6]=b[6]*e;c[8]=b[8]*g;c[9]=b[9]*g;c[10]=b[10]*g;return this}}(),translate:function(a){var b=
this.elements,c=a.x,d=a.y,a=a.z;b[12]=b[0]*c+b[4]*d+b[8]*a+b[12];b[13]=b[1]*c+b[5]*d+b[9]*a+b[13];b[14]=b[2]*c+b[6]*d+b[10]*a+b[14];b[15]=b[3]*c+b[7]*d+b[11]*a+b[15];return this},rotateX:function(a){var b=this.elements,c=b[4],d=b[5],e=b[6],g=b[7],h=b[8],i=b[9],j=b[10],k=b[11],n=Math.cos(a),a=Math.sin(a);b[4]=n*c+a*h;b[5]=n*d+a*i;b[6]=n*e+a*j;b[7]=n*g+a*k;b[8]=n*h-a*c;b[9]=n*i-a*d;b[10]=n*j-a*e;b[11]=n*k-a*g;return this},rotateY:function(a){var b=this.elements,c=b[0],d=b[1],e=b[2],g=b[3],h=b[8],i=
b[9],j=b[10],k=b[11],n=Math.cos(a),a=Math.sin(a);b[0]=n*c-a*h;b[1]=n*d-a*i;b[2]=n*e-a*j;b[3]=n*g-a*k;b[8]=n*h+a*c;b[9]=n*i+a*d;b[10]=n*j+a*e;b[11]=n*k+a*g;return this},rotateZ:function(a){var b=this.elements,c=b[0],d=b[1],e=b[2],g=b[3],h=b[4],i=b[5],j=b[6],k=b[7],n=Math.cos(a),a=Math.sin(a);b[0]=n*c+a*h;b[1]=n*d+a*i;b[2]=n*e+a*j;b[3]=n*g+a*k;b[4]=n*h-a*c;b[5]=n*i-a*d;b[6]=n*j-a*e;b[7]=n*k-a*g;return this},rotateByAxis:function(a,b){var c=this.elements;if(1===a.x&&0===a.y&&0===a.z)return this.rotateX(b);
if(0===a.x&&1===a.y&&0===a.z)return this.rotateY(b);if(0===a.x&&0===a.y&&1===a.z)return this.rotateZ(b);var d=a.x,e=a.y,g=a.z,h=Math.sqrt(d*d+e*e+g*g),d=d/h,e=e/h,g=g/h,h=d*d,i=e*e,j=g*g,k=Math.cos(b),n=Math.sin(b),m=1-k,u=d*e*m,v=d*g*m,m=e*g*m,d=d*n,p=e*n,n=g*n,g=h+(1-h)*k,h=u+n,e=v-p,u=u-n,i=i+(1-i)*k,n=m+d,v=v+p,m=m-d,j=j+(1-j)*k,k=c[0],d=c[1],p=c[2],l=c[3],t=c[4],x=c[5],w=c[6],A=c[7],r=c[8],N=c[9],E=c[10],C=c[11];c[0]=g*k+h*t+e*r;c[1]=g*d+h*x+e*N;c[2]=g*p+h*w+e*E;c[3]=g*l+h*A+e*C;c[4]=u*k+i*t+
n*r;c[5]=u*d+i*x+n*N;c[6]=u*p+i*w+n*E;c[7]=u*l+i*A+n*C;c[8]=v*k+m*t+j*r;c[9]=v*d+m*x+j*N;c[10]=v*p+m*w+j*E;c[11]=v*l+m*A+j*C;return this},scale:function(a){var b=this.elements,c=a.x,d=a.y,a=a.z;b[0]*=c;b[4]*=d;b[8]*=a;b[1]*=c;b[5]*=d;b[9]*=a;b[2]*=c;b[6]*=d;b[10]*=a;b[3]*=c;b[7]*=d;b[11]*=a;return this},getMaxScaleOnAxis:function(){var a=this.elements;return Math.sqrt(Math.max(a[0]*a[0]+a[1]*a[1]+a[2]*a[2],Math.max(a[4]*a[4]+a[5]*a[5]+a[6]*a[6],a[8]*a[8]+a[9]*a[9]+a[10]*a[10])))},makeTranslation:function(a,
b,c){this.set(1,0,0,a,0,1,0,b,0,0,1,c,0,0,0,1);return this},makeRotationX:function(a){var b=Math.cos(a),a=Math.sin(a);this.set(1,0,0,0,0,b,-a,0,0,a,b,0,0,0,0,1);return this},makeRotationY:function(a){var b=Math.cos(a),a=Math.sin(a);this.set(b,0,a,0,0,1,0,0,-a,0,b,0,0,0,0,1);return this},makeRotationZ:function(a){var b=Math.cos(a),a=Math.sin(a);this.set(b,-a,0,0,a,b,0,0,0,0,1,0,0,0,0,1);return this},makeRotationAxis:function(a,b){var c=Math.cos(b),d=Math.sin(b),e=1-c,g=a.x,h=a.y,i=a.z,j=e*g,k=e*h;
this.set(j*g+c,j*h-d*i,j*i+d*h,0,j*h+d*i,k*h+c,k*i-d*g,0,j*i-d*h,k*i+d*g,e*i*i+c,0,0,0,0,1);return this},makeScale:function(a,b,c){this.set(a,0,0,0,0,b,0,0,0,0,c,0,0,0,0,1);return this},makeFrustum:function(a,b,c,d,e,g){var h=this.elements;h[0]=2*e/(b-a);h[4]=0;h[8]=(b+a)/(b-a);h[12]=0;h[1]=0;h[5]=2*e/(d-c);h[9]=(d+c)/(d-c);h[13]=0;h[2]=0;h[6]=0;h[10]=-(g+e)/(g-e);h[14]=-2*g*e/(g-e);h[3]=0;h[7]=0;h[11]=-1;h[15]=0;return this},makePerspective:function(a,b,c,d){var a=c*Math.tan(THREE.Math.degToRad(0.5*
a)),e=-a;return this.makeFrustum(e*b,a*b,e,a,c,d)},makeOrthographic:function(a,b,c,d,e,g){var h=this.elements,i=b-a,j=c-d,k=g-e;h[0]=2/i;h[4]=0;h[8]=0;h[12]=-((b+a)/i);h[1]=0;h[5]=2/j;h[9]=0;h[13]=-((c+d)/j);h[2]=0;h[6]=0;h[10]=-2/k;h[14]=-((g+e)/k);h[3]=0;h[7]=0;h[11]=0;h[15]=1;return this},clone:function(){var a=this.elements;return new THREE.Matrix4(a[0],a[4],a[8],a[12],a[1],a[5],a[9],a[13],a[2],a[6],a[10],a[14],a[3],a[7],a[11],a[15])}});THREE.Frustum=function(a,b,c,d,e,g){this.planes=[void 0!==a?a:new THREE.Plane,void 0!==b?b:new THREE.Plane,void 0!==c?c:new THREE.Plane,void 0!==d?d:new THREE.Plane,void 0!==e?e:new THREE.Plane,void 0!==g?g:new THREE.Plane]};
THREE.extend(THREE.Frustum.prototype,{set:function(a,b,c,d,e,g){var h=this.planes;h[0].copy(a);h[1].copy(b);h[2].copy(c);h[3].copy(d);h[4].copy(e);h[5].copy(g);return this},copy:function(a){for(var b=this.planes,c=0;6>c;c++)b[c].copy(a.planes[c]);return this},setFromMatrix:function(a){var b=this.planes,c=a.elements,a=c[0],d=c[1],e=c[2],g=c[3],h=c[4],i=c[5],j=c[6],k=c[7],n=c[8],m=c[9],u=c[10],v=c[11],p=c[12],l=c[13],t=c[14],c=c[15];b[0].setComponents(g-a,k-h,v-n,c-p).normalize();b[1].setComponents(g+
a,k+h,v+n,c+p).normalize();b[2].setComponents(g+d,k+i,v+m,c+l).normalize();b[3].setComponents(g-d,k-i,v-m,c-l).normalize();b[4].setComponents(g-e,k-j,v-u,c-t).normalize();b[5].setComponents(g+e,k+j,v+u,c+t).normalize();return this},intersectsObject:function(){var a=new THREE.Vector3;return function(b){var c=b.matrixWorld,d=this.planes,b=-b.geometry.boundingSphere.radius*c.getMaxScaleOnAxis();a.getPositionFromMatrix(c);for(c=0;6>c;c++)if(d[c].distanceToPoint(a)<b)return!1;return!0}}(),intersectsSphere:function(a){for(var b=
this.planes,c=a.center,a=-a.radius,d=0;6>d;d++)if(b[d].distanceToPoint(c)<a)return!1;return!0},containsPoint:function(a){for(var b=this.planes,c=0;6>c;c++)if(0>b[c].distanceToPoint(a))return!1;return!0},clone:function(){return(new THREE.Frustum).copy(this)}});THREE.Math={clamp:function(a,b,c){return a<b?b:a>c?c:a},clampBottom:function(a,b){return a<b?b:a},mapLinear:function(a,b,c,d,e){return d+(a-b)*(e-d)/(c-b)},random16:function(){return(65280*Math.random()+255*Math.random())/65535},randInt:function(a,b){return a+Math.floor(Math.random()*(b-a+1))},randFloat:function(a,b){return a+Math.random()*(b-a)},randFloatSpread:function(a){return a*(0.5-Math.random())},sign:function(a){return 0>a?-1:0<a?1:0},degToRad:function(){var a=Math.PI/180;return function(b){return b*
a}}(),radToDeg:function(){var a=180/Math.PI;return function(b){return b*a}}()};THREE.Vertex=function(a){console.warn("THREE.Vertex has been DEPRECATED. Use THREE.Vector3 instead.");return a};THREE.UV=function(a,b){console.warn("THREE.UV has been DEPRECATED. Use THREE.Vector2 instead.");return new THREE.Vector2(a,b)};THREE.Spline=function(a){function b(a,b,c,d,e,g,h){a=0.5*(c-a);d=0.5*(d-b);return(2*(b-c)+a+d)*h+(-3*(b-c)-2*a-d)*g+a*e+b}this.points=a;var c=[],d={x:0,y:0,z:0},e,g,h,i,j,k,n,m,u;this.initFromArray=function(a){this.points=[];for(var b=0;b<a.length;b++)this.points[b]={x:a[b][0],y:a[b][1],z:a[b][2]}};this.getPoint=function(a){e=(this.points.length-1)*a;g=Math.floor(e);h=e-g;c[0]=0===g?g:g-1;c[1]=g;c[2]=g>this.points.length-2?this.points.length-1:g+1;c[3]=g>this.points.length-3?this.points.length-1:
g+2;k=this.points[c[0]];n=this.points[c[1]];m=this.points[c[2]];u=this.points[c[3]];i=h*h;j=h*i;d.x=b(k.x,n.x,m.x,u.x,h,i,j);d.y=b(k.y,n.y,m.y,u.y,h,i,j);d.z=b(k.z,n.z,m.z,u.z,h,i,j);return d};this.getControlPointsArray=function(){var a,b,c=this.points.length,d=[];for(a=0;a<c;a++)b=this.points[a],d[a]=[b.x,b.y,b.z];return d};this.getLength=function(a){var b,c,d,e=b=b=0,g=new THREE.Vector3,h=new THREE.Vector3,j=[],k=0;j[0]=0;a||(a=100);c=this.points.length*a;g.copy(this.points[0]);for(a=1;a<c;a++)b=
a/c,d=this.getPoint(b),h.copy(d),k+=h.distanceTo(g),g.copy(d),b*=this.points.length-1,b=Math.floor(b),b!=e&&(j[b]=k,e=b);j[j.length]=k;return{chunks:j,total:k}};this.reparametrizeByArcLength=function(a){var b,c,d,e,g,h,j=[],k=new THREE.Vector3,i=this.getLength();j.push(k.copy(this.points[0]).clone());for(b=1;b<this.points.length;b++){c=i.chunks[b]-i.chunks[b-1];h=Math.ceil(a*c/i.total);e=(b-1)/(this.points.length-1);g=b/(this.points.length-1);for(c=1;c<h-1;c++)d=e+c*(1/h)*(g-e),d=this.getPoint(d),
j.push(k.copy(d).clone());j.push(k.copy(this.points[b]).clone())}this.points=j}};THREE.Box2=function(a,b){this.min=void 0!==a?a:new THREE.Vector2(Infinity,Infinity);this.max=void 0!==b?b:new THREE.Vector2(-Infinity,-Infinity)};
THREE.extend(THREE.Box2.prototype,{set:function(a,b){this.min.copy(a);this.max.copy(b);return this},setFromPoints:function(a){if(0<a.length){var b=a[0];this.min.copy(b);this.max.copy(b);for(var c=1,d=a.length;c<d;c++)b=a[c],b.x<this.min.x?this.min.x=b.x:b.x>this.max.x&&(this.max.x=b.x),b.y<this.min.y?this.min.y=b.y:b.y>this.max.y&&(this.max.y=b.y)}else this.makeEmpty();return this},setFromCenterAndSize:function(){var a=new THREE.Vector2;return function(b,c){var d=a.copy(c).multiplyScalar(0.5);this.min.copy(b).sub(d);
this.max.copy(b).add(d);return this}}(),copy:function(a){this.min.copy(a.min);this.max.copy(a.max);return this},makeEmpty:function(){this.min.x=this.min.y=Infinity;this.max.x=this.max.y=-Infinity;return this},empty:function(){return this.max.x<this.min.x||this.max.y<this.min.y},center:function(a){return(a||new THREE.Vector2).addVectors(this.min,this.max).multiplyScalar(0.5)},size:function(a){return(a||new THREE.Vector2).subVectors(this.max,this.min)},expandByPoint:function(a){this.min.min(a);this.max.max(a);
return this},expandByVector:function(a){this.min.sub(a);this.max.add(a);return this},expandByScalar:function(a){this.min.addScalar(-a);this.max.addScalar(a);return this},containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y?!1:!0},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y?!0:!1},getParameter:function(a){return new THREE.Vector2((a.x-this.min.x)/(this.max.x-this.min.x),(a.y-this.min.y)/
(this.max.y-this.min.y))},isIntersectionBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>this.max.y?!1:!0},clampPoint:function(a,b){return(b||new THREE.Vector2).copy(a).clamp(this.min,this.max)},distanceToPoint:function(){var a=new THREE.Vector2;return function(b){return a.copy(b).clamp(this.min,this.max).sub(b).length()}}(),intersect:function(a){this.min.max(a.min);this.max.min(a.max);return this},union:function(a){this.min.min(a.min);this.max.max(a.max);
return this},translate:function(a){this.min.add(a);this.max.add(a);return this},equals:function(a){return a.min.equals(this.min)&&a.max.equals(this.max)},clone:function(){return(new THREE.Box2).copy(this)}});THREE.Box3=function(a,b){this.min=void 0!==a?a:new THREE.Vector3(Infinity,Infinity,Infinity);this.max=void 0!==b?b:new THREE.Vector3(-Infinity,-Infinity,-Infinity)};
THREE.extend(THREE.Box3.prototype,{set:function(a,b){this.min.copy(a);this.max.copy(b);return this},setFromPoints:function(a){if(0<a.length){var b=a[0];this.min.copy(b);this.max.copy(b);for(var c=1,d=a.length;c<d;c++)b=a[c],b.x<this.min.x?this.min.x=b.x:b.x>this.max.x&&(this.max.x=b.x),b.y<this.min.y?this.min.y=b.y:b.y>this.max.y&&(this.max.y=b.y),b.z<this.min.z?this.min.z=b.z:b.z>this.max.z&&(this.max.z=b.z)}else this.makeEmpty();return this},setFromCenterAndSize:function(){var a=new THREE.Vector3;
return function(b,c){var d=a.copy(c).multiplyScalar(0.5);this.min.copy(b).sub(d);this.max.copy(b).add(d);return this}}(),copy:function(a){this.min.copy(a.min);this.max.copy(a.max);return this},makeEmpty:function(){this.min.x=this.min.y=this.min.z=Infinity;this.max.x=this.max.y=this.max.z=-Infinity;return this},empty:function(){return this.max.x<this.min.x||this.max.y<this.min.y||this.max.z<this.min.z},center:function(a){return(a||new THREE.Vector3).addVectors(this.min,this.max).multiplyScalar(0.5)},
size:function(a){return(a||new THREE.Vector3).subVectors(this.max,this.min)},expandByPoint:function(a){this.min.min(a);this.max.max(a);return this},expandByVector:function(a){this.min.sub(a);this.max.add(a);return this},expandByScalar:function(a){this.min.addScalar(-a);this.max.addScalar(a);return this},containsPoint:function(a){return a.x<this.min.x||a.x>this.max.x||a.y<this.min.y||a.y>this.max.y||a.z<this.min.z||a.z>this.max.z?!1:!0},containsBox:function(a){return this.min.x<=a.min.x&&a.max.x<=
this.max.x&&this.min.y<=a.min.y&&a.max.y<=this.max.y&&this.min.z<=a.min.z&&a.max.z<=this.max.z?!0:!1},getParameter:function(a){return new THREE.Vector3((a.x-this.min.x)/(this.max.x-this.min.x),(a.y-this.min.y)/(this.max.y-this.min.y),(a.z-this.min.z)/(this.max.z-this.min.z))},isIntersectionBox:function(a){return a.max.x<this.min.x||a.min.x>this.max.x||a.max.y<this.min.y||a.min.y>this.max.y||a.max.z<this.min.z||a.min.z>this.max.z?!1:!0},clampPoint:function(a,b){return(b||new THREE.Vector3).copy(a).clamp(this.min,
this.max)},distanceToPoint:function(){var a=new THREE.Vector3;return function(b){return a.copy(b).clamp(this.min,this.max).sub(b).length()}}(),getBoundingSphere:function(){var a=new THREE.Vector3;return function(b){b=b||new THREE.Sphere;b.center=this.center();b.radius=0.5*this.size(a).length();return b}}(),intersect:function(a){this.min.max(a.min);this.max.min(a.max);return this},union:function(a){this.min.min(a.min);this.max.max(a.max);return this},transform:function(){var a=[new THREE.Vector3,new THREE.Vector3,
new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];return function(b){a[0].set(this.min.x,this.min.y,this.min.z).applyMatrix4(b);a[1].set(this.min.x,this.min.y,this.max.z).applyMatrix4(b);a[2].set(this.min.x,this.max.y,this.min.z).applyMatrix4(b);a[3].set(this.min.x,this.max.y,this.max.z).applyMatrix4(b);a[4].set(this.max.x,this.min.y,this.min.z).applyMatrix4(b);a[5].set(this.max.x,this.min.y,this.max.z).applyMatrix4(b);a[6].set(this.max.x,
this.max.y,this.min.z).applyMatrix4(b);a[7].set(this.max.x,this.max.y,this.max.z).applyMatrix4(b);this.makeEmpty();this.setFromPoints(a);return this}}(),translate:function(a){this.min.add(a);this.max.add(a);return this},equals:function(a){return a.min.equals(this.min)&&a.max.equals(this.max)},clone:function(){return(new THREE.Box3).copy(this)}});THREE.Triangle=function(a,b,c){this.a=void 0!==a?a:new THREE.Vector3;this.b=void 0!==b?b:new THREE.Vector3;this.c=void 0!==c?c:new THREE.Vector3};THREE.Triangle.normal=function(){var a=new THREE.Vector3;return function(b,c,d,e){e=e||new THREE.Vector3;e.subVectors(d,c);a.subVectors(b,c);e.cross(a);b=e.lengthSq();return 0<b?e.multiplyScalar(1/Math.sqrt(b)):e.set(0,0,0)}}();
THREE.Triangle.barycoordFromPoint=function(){var a=new THREE.Vector3,b=new THREE.Vector3,c=new THREE.Vector3;return function(d,e,g,h,i){a.subVectors(h,e);b.subVectors(g,e);c.subVectors(d,e);var d=a.dot(a),e=a.dot(b),g=a.dot(c),j=b.dot(b),h=b.dot(c),k=d*j-e*e,i=i||new THREE.Vector3;if(0==k)return i.set(-2,-1,-1);k=1/k;j=(j*g-e*h)*k;d=(d*h-e*g)*k;return i.set(1-j-d,d,j)}}();
THREE.Triangle.containsPoint=function(){var a=new THREE.Vector3;return function(b,c,d,e){b=THREE.Triangle.barycoordFromPoint(b,c,d,e,a);return 0<=b.x&&0<=b.y&&1>=b.x+b.y}}();
THREE.extend(THREE.Triangle.prototype,{constructor:THREE.Triangle,set:function(a,b,c){this.a.copy(a);this.b.copy(b);this.c.copy(c);return this},setFromPointsAndIndices:function(a,b,c,d){this.a.copy(a[b]);this.b.copy(a[c]);this.c.copy(a[d]);return this},copy:function(a){this.a.copy(a.a);this.b.copy(a.b);this.c.copy(a.c);return this},area:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(){a.subVectors(this.c,this.b);b.subVectors(this.a,this.b);return 0.5*a.cross(b).length()}}(),
midpoint:function(a){return(a||new THREE.Vector3).addVectors(this.a,this.b).add(this.c).multiplyScalar(1/3)},normal:function(a){return THREE.Triangle.normal(this.a,this.b,this.c,a)},plane:function(a){return(a||new THREE.Plane).setFromCoplanarPoints(this.a,this.b,this.c)},barycoordFromPoint:function(a,b){return THREE.Triangle.barycoordFromPoint(a,this.a,this.b,this.c,b)},containsPoint:function(a){return THREE.Triangle.containsPoint(a,this.a,this.b,this.c)},equals:function(a){return a.a.equals(this.a)&&
a.b.equals(this.b)&&a.c.equals(this.c)},clone:function(){return(new THREE.Triangle).copy(this)}});THREE.Sphere=function(a,b){this.center=void 0!==a?a:new THREE.Vector3;this.radius=void 0!==b?b:0};
THREE.extend(THREE.Sphere.prototype,{set:function(a,b){this.center.copy(a);this.radius=b;return this},setFromCenterAndPoints:function(a,b){for(var c=0,d=0,e=b.length;d<e;d++)var g=a.distanceToSquared(b[d]),c=Math.max(c,g);this.center=a;this.radius=Math.sqrt(c);return this},copy:function(a){this.center.copy(a.center);this.radius=a.radius;return this},empty:function(){return 0>=this.radius},containsPoint:function(a){return a.distanceToSquared(this.center)<=this.radius*this.radius},distanceToPoint:function(a){return a.distanceTo(this.center)-
this.radius},intersectsSphere:function(a){var b=this.radius+a.radius;return a.center.distanceToSquared(this.center)<=b*b},clampPoint:function(a,b){var c=this.center.distanceToSquared(a),d=b||new THREE.Vector3;d.copy(a);c>this.radius*this.radius&&(d.sub(this.center).normalize(),d.multiplyScalar(this.radius).add(this.center));return d},getBoundingBox:function(a){a=a||new THREE.Box3;a.set(this.center,this.center);a.expandByScalar(this.radius);return a},transform:function(a){this.center.applyMatrix4(a);
this.radius*=a.getMaxScaleOnAxis();return this},translate:function(a){this.center.add(a);return this},equals:function(a){return a.center.equals(this.center)&&a.radius===this.radius},clone:function(){return(new THREE.Sphere).copy(this)}});THREE.Plane=function(a,b){this.normal=void 0!==a?a:new THREE.Vector3(1,0,0);this.constant=void 0!==b?b:0};
THREE.extend(THREE.Plane.prototype,{set:function(a,b){this.normal.copy(a);this.constant=b;return this},setComponents:function(a,b,c,d){this.normal.set(a,b,c);this.constant=d;return this},setFromNormalAndCoplanarPoint:function(a,b){this.normal.copy(a);this.constant=-b.dot(this.normal);return this},setFromCoplanarPoints:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c,d,e){d=a.subVectors(e,d).cross(b.subVectors(c,d)).normalize();this.setFromNormalAndCoplanarPoint(d,c);return this}}(),
copy:function(a){this.normal.copy(a.normal);this.constant=a.constant;return this},normalize:function(){var a=1/this.normal.length();this.normal.multiplyScalar(a);this.constant*=a;return this},negate:function(){this.constant*=-1;this.normal.negate();return this},distanceToPoint:function(a){return this.normal.dot(a)+this.constant},distanceToSphere:function(a){return this.distanceToPoint(a.center)-a.radius},projectPoint:function(a,b){return this.orthoPoint(a,b).sub(a).negate()},orthoPoint:function(a,
b){var c=this.distanceToPoint(a);return(b||new THREE.Vector3).copy(this.normal).multiplyScalar(c)},isIntersectionLine:function(a,b){var c=this.distanceToPoint(a),d=this.distanceToPoint(b);return 0>c&&0<d||0>d&&0<c},intersectLine:function(){var a=new THREE.Vector3;return function(b,c,d){var d=d||new THREE.Vector3,c=a.subVectors(c,b),e=this.normal.dot(c);if(0==e){if(0==this.distanceToPoint(b))return d.copy(b)}else return e=-(b.dot(this.normal)+this.constant)/e,0>e||1<e?void 0:d.copy(c).multiplyScalar(e).add(b)}}(),
coplanarPoint:function(a){return(a||new THREE.Vector3).copy(this.normal).multiplyScalar(-this.constant)},transform:function(){var a=new THREE.Vector3,b=new THREE.Vector3;return function(c,d){var d=d||(new THREE.Matrix3).getInverse(c).transpose(),e=a.copy(this.normal).applyMatrix3(d),g=this.coplanarPoint(b);g.applyMatrix4(c);this.setFromNormalAndCoplanarPoint(e,g);return this}}(),translate:function(a){this.constant-=a.dot(this.normal);return this},equals:function(a){return a.normal.equals(this.normal)&&
a.constant==this.constant},clone:function(){return(new THREE.Plane).copy(this)}});THREE.Clock=function(a){this.autoStart=void 0!==a?a:!0;this.elapsedTime=this.oldTime=this.startTime=0;this.running=!1};
THREE.extend(THREE.Clock.prototype,{start:function(){this.oldTime=this.startTime=void 0!==window.performance&&void 0!==window.performance.now?window.performance.now():Date.now();this.running=!0},stop:function(){this.getElapsedTime();this.running=!1},getElapsedTime:function(){this.getDelta();return this.elapsedTime},getDelta:function(){var a=0;this.autoStart&&!this.running&&this.start();if(this.running){var b=void 0!==window.performance&&void 0!==window.performance.now?window.performance.now():Date.now(),
a=0.001*(b-this.oldTime);this.oldTime=b;this.elapsedTime+=a}return a}});THREE.EventDispatcher=function(){var a={};this.addEventListener=function(b,c){void 0===a[b]&&(a[b]=[]);-1===a[b].indexOf(c)&&a[b].push(c)};this.removeEventListener=function(b,c){var d=a[b].indexOf(c);-1!==d&&a[b].splice(d,1)};this.dispatchEvent=function(b){var c=a[b.type];if(void 0!==c){b.target=this;for(var d=0,e=c.length;d<e;d++)c[d].call(this,b)}}};(function(a){a.Raycaster=function(b,c,d,e){this.ray=new a.Ray(b,c);0<this.ray.direction.lengthSq()&&this.ray.direction.normalize();this.near=d||0;this.far=e||Infinity};var b=new a.Sphere,c=new a.Ray,d=new a.Plane,e=new a.Vector3,g=new a.Matrix4,h=function(a,b){return a.distance-b.distance},i=function(h,j,i){if(h instanceof a.Particle){j=j.ray.distanceToPoint(h.matrixWorld.getPosition());if(j>h.scale.x)return i;i.push({distance:j,point:h.position,face:null,object:h})}else if(h instanceof a.Mesh){b.set(h.matrixWorld.getPosition(),
h.geometry.boundingSphere.radius*h.matrixWorld.getMaxScaleOnAxis());if(!j.ray.isIntersectionSphere(b))return i;var u=h.geometry,v=u.vertices,p=h.material instanceof a.MeshFaceMaterial,l=!0===p?h.material.materials:null,t=h.material.side,x,w,A,r=j.precision;h.matrixRotationWorld.extractRotation(h.matrixWorld);g.getInverse(h.matrixWorld);c.copy(j.ray).transform(g);for(var N=0,E=u.faces.length;N<E;N++){var C=u.faces[N],t=!0===p?l[C.materialIndex]:h.material;if(void 0!==t){d.setFromNormalAndCoplanarPoint(C.normal,
v[C.a]);var y=c.distanceToPlane(d);if(!(Math.abs(y)<r)&&!(0>y)){t=t.side;if(t!==a.DoubleSide&&(x=c.direction.dot(d.normal),!(t===a.FrontSide?0>x:0<x)))continue;if(!(y<j.near||y>j.far)){e=c.at(y,e);if(C instanceof a.Face3){if(t=v[C.a],x=v[C.b],w=v[C.c],!a.Triangle.containsPoint(e,t,x,w))continue}else if(C instanceof a.Face4){if(t=v[C.a],x=v[C.b],w=v[C.c],A=v[C.d],!a.Triangle.containsPoint(e,t,x,A)&&!a.Triangle.containsPoint(e,x,w,A))continue}else throw Error("face type not supported");i.push({distance:y,
point:j.ray.at(y),face:C,faceIndex:N,object:h})}}}}}},j=function(a,b,c){for(var a=a.getDescendants(),d=0,e=a.length;d<e;d++)i(a[d],b,c)};a.Raycaster.prototype.precision=1E-4;a.Raycaster.prototype.set=function(a,b){this.ray.set(a,b);0<this.ray.direction.length()&&this.ray.direction.normalize()};a.Raycaster.prototype.intersectObject=function(a,b){var c=[];!0===b&&j(a,this,c);i(a,this,c);c.sort(h);return c};a.Raycaster.prototype.intersectObjects=function(a,b){for(var c=[],d=0,e=a.length;d<e;d++)i(a[d],
this,c),!0===b&&j(a[d],this,c);c.sort(h);return c}})(THREE);THREE.Object3D=function(){this.id=THREE.Object3DIdCount++;this.name="";this.properties={};this.parent=void 0;this.children=[];this.up=new THREE.Vector3(0,1,0);this.position=new THREE.Vector3;this.rotation=new THREE.Vector3;this.eulerOrder=THREE.Object3D.defaultEulerOrder;this.scale=new THREE.Vector3(1,1,1);this.renderDepth=null;this.rotationAutoUpdate=!0;this.matrix=new THREE.Matrix4;this.matrixWorld=new THREE.Matrix4;this.matrixRotationWorld=new THREE.Matrix4;this.matrixWorldNeedsUpdate=this.matrixAutoUpdate=
!0;this.quaternion=new THREE.Quaternion;this.useQuaternion=!1;this.visible=!0;this.receiveShadow=this.castShadow=!1;this.frustumCulled=!0;this._vector=new THREE.Vector3};
THREE.Object3D.prototype={constructor:THREE.Object3D,applyMatrix:function(a){this.matrix.multiplyMatrices(a,this.matrix);this.scale.getScaleFromMatrix(this.matrix);a=(new THREE.Matrix4).extractRotation(this.matrix);this.rotation.setEulerFromRotationMatrix(a,this.eulerOrder);this.position.getPositionFromMatrix(this.matrix)},translate:function(a,b){this.matrix.rotateAxis(b);this.position.add(b.multiplyScalar(a))},translateX:function(a){this.translate(a,this._vector.set(1,0,0))},translateY:function(a){this.translate(a,
this._vector.set(0,1,0))},translateZ:function(a){this.translate(a,this._vector.set(0,0,1))},localToWorld:function(a){return a.applyMatrix4(this.matrixWorld)},worldToLocal:function(a){return a.applyMatrix4(THREE.Object3D.__m1.getInverse(this.matrixWorld))},lookAt:function(a){this.matrix.lookAt(a,this.position,this.up);this.rotationAutoUpdate&&(!1===this.useQuaternion?this.rotation.setEulerFromRotationMatrix(this.matrix,this.eulerOrder):this.quaternion.copy(this.matrix.decompose()[1]))},add:function(a){if(a===
this)console.warn("THREE.Object3D.add: An object can't be added as a child of itself.");else if(a instanceof THREE.Object3D){void 0!==a.parent&&a.parent.remove(a);a.parent=this;this.children.push(a);for(var b=this;void 0!==b.parent;)b=b.parent;void 0!==b&&b instanceof THREE.Scene&&b.__addObject(a)}},remove:function(a){var b=this.children.indexOf(a);if(-1!==b){a.parent=void 0;this.children.splice(b,1);for(b=this;void 0!==b.parent;)b=b.parent;void 0!==b&&b instanceof THREE.Scene&&b.__removeObject(a)}},
traverse:function(a){a(this);for(var b=0,c=this.children.length;b<c;b++)this.children[b].traverse(a)},getChildByName:function(a,b){for(var c=0,d=this.children.length;c<d;c++){var e=this.children[c];if(e.name===a||!0===b&&(e=e.getChildByName(a,b),void 0!==e))return e}},getDescendants:function(a){void 0===a&&(a=[]);Array.prototype.push.apply(a,this.children);for(var b=0,c=this.children.length;b<c;b++)this.children[b].getDescendants(a);return a},updateMatrix:function(){this.matrix.setPosition(this.position);
!1===this.useQuaternion?this.matrix.setRotationFromEuler(this.rotation,this.eulerOrder):this.matrix.setRotationFromQuaternion(this.quaternion);(1!==this.scale.x||1!==this.scale.y||1!==this.scale.z)&&this.matrix.scale(this.scale);this.matrixWorldNeedsUpdate=!0},updateMatrixWorld:function(a){!0===this.matrixAutoUpdate&&this.updateMatrix();if(!0===this.matrixWorldNeedsUpdate||!0===a)void 0===this.parent?this.matrixWorld.copy(this.matrix):this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),
this.matrixWorldNeedsUpdate=!1,a=!0;for(var b=0,c=this.children.length;b<c;b++)this.children[b].updateMatrixWorld(a)},clone:function(a){void 0===a&&(a=new THREE.Object3D);a.name=this.name;a.up.copy(this.up);a.position.copy(this.position);a.rotation instanceof THREE.Vector3&&a.rotation.copy(this.rotation);a.eulerOrder=this.eulerOrder;a.scale.copy(this.scale);a.renderDepth=this.renderDepth;a.rotationAutoUpdate=this.rotationAutoUpdate;a.matrix.copy(this.matrix);a.matrixWorld.copy(this.matrixWorld);a.matrixRotationWorld.copy(this.matrixRotationWorld);
a.matrixAutoUpdate=this.matrixAutoUpdate;a.matrixWorldNeedsUpdate=this.matrixWorldNeedsUpdate;a.quaternion.copy(this.quaternion);a.useQuaternion=this.useQuaternion;a.visible=this.visible;a.castShadow=this.castShadow;a.receiveShadow=this.receiveShadow;a.frustumCulled=this.frustumCulled;for(var b=0;b<this.children.length;b++)a.add(this.children[b].clone());return a}};THREE.Object3D.__m1=new THREE.Matrix4;THREE.Object3D.defaultEulerOrder="XYZ";THREE.Object3DIdCount=0;THREE.Projector=function(){function a(){if(g===i){var a=new THREE.RenderableObject;h.push(a);i++;g++;return a}return h[g++]}function b(){if(k===m){var a=new THREE.RenderableVertex;n.push(a);m++;k++;return a}return n[k++]}function c(a,b){return b.z-a.z}function d(a,b){var c=0,d=1,e=a.z+a.w,g=b.z+b.w,h=-a.z+a.w,j=-b.z+b.w;if(0<=e&&0<=g&&0<=h&&0<=j)return!0;if(0>e&&0>g||0>h&&0>j)return!1;0>e?c=Math.max(c,e/(e-g)):0>g&&(d=Math.min(d,e/(e-g)));0>h?c=Math.max(c,h/(h-j)):0>j&&(d=Math.min(d,h/(h-j)));if(d<
c)return!1;a.lerp(b,c);b.lerp(a,1-d);return!0}var e,g,h=[],i=0,j,k,n=[],m=0,u,v,p=[],l=0,t,x=[],w=0,A,r,N=[],E=0,C,y,R=[],I=0,F={objects:[],sprites:[],lights:[],elements:[]},X=new THREE.Vector3,B=new THREE.Vector4,P=new THREE.Box3(new THREE.Vector3(-1,-1,-1),new THREE.Vector3(1,1,1)),D=new THREE.Box3,S=Array(3),Q=Array(4),la=new THREE.Matrix4,sa=new THREE.Matrix4,Ca,Va=new THREE.Matrix4,ab=new THREE.Matrix3,bb=new THREE.Matrix3,Pa=new THREE.Vector3,lb=new THREE.Frustum,M=new THREE.Vector4,La=new THREE.Vector4;
this.projectVector=function(a,b){b.matrixWorldInverse.getInverse(b.matrixWorld);sa.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse);return a.applyProjection(sa)};this.unprojectVector=function(a,b){b.projectionMatrixInverse.getInverse(b.projectionMatrix);sa.multiplyMatrices(b.matrixWorld,b.projectionMatrixInverse);return a.applyProjection(sa)};this.pickingRay=function(a,b){a.z=-1;var c=new THREE.Vector3(a.x,a.y,1);this.unprojectVector(a,b);this.unprojectVector(c,b);c.sub(a).normalize();return new THREE.Raycaster(a,
c)};this.projectScene=function(h,i,m,ub){var Ba=!1,Ka,xa,oa,Z,ca,pa,ga,fa,Ta,Qa,ha,vb,mb;y=r=t=v=0;F.elements.length=0;h.updateMatrixWorld();void 0===i.parent&&i.updateMatrixWorld();la.copy(i.matrixWorldInverse.getInverse(i.matrixWorld));sa.multiplyMatrices(i.projectionMatrix,la);bb.getInverse(la);bb.transpose();lb.setFromMatrix(sa);g=0;F.objects.length=0;F.sprites.length=0;F.lights.length=0;var nb=function(b){for(var c=0,d=b.children.length;c<d;c++){var g=b.children[c];if(!1!==g.visible){if(g instanceof
THREE.Light)F.lights.push(g);else if(g instanceof THREE.Mesh||g instanceof THREE.Line){if(!1===g.frustumCulled||!0===lb.intersectsObject(g))e=a(),e.object=g,null!==g.renderDepth?e.z=g.renderDepth:(X.getPositionFromMatrix(g.matrixWorld),X.applyProjection(sa),e.z=X.z),F.objects.push(e)}else g instanceof THREE.Sprite||g instanceof THREE.Particle?(e=a(),e.object=g,null!==g.renderDepth?e.z=g.renderDepth:(X.getPositionFromMatrix(g.matrixWorld),X.applyProjection(sa),e.z=X.z),F.sprites.push(e)):(e=a(),e.object=
g,null!==g.renderDepth?e.z=g.renderDepth:(X.getPositionFromMatrix(g.matrixWorld),X.applyProjection(sa),e.z=X.z),F.objects.push(e));nb(g)}}};nb(h);!0===m&&F.objects.sort(c);h=0;for(m=F.objects.length;h<m;h++)if(fa=F.objects[h].object,Ca=fa.matrixWorld,k=0,fa instanceof THREE.Mesh){Ta=fa.geometry;oa=Ta.vertices;Qa=Ta.faces;Ta=Ta.faceVertexUvs;ab.getInverse(Ca);ab.transpose();vb=fa.material instanceof THREE.MeshFaceMaterial;mb=!0===vb?fa.material:null;Ka=0;for(xa=oa.length;Ka<xa;Ka++)j=b(),j.positionWorld.copy(oa[Ka]).applyMatrix4(Ca),
j.positionScreen.copy(j.positionWorld).applyMatrix4(sa),j.positionScreen.x/=j.positionScreen.w,j.positionScreen.y/=j.positionScreen.w,j.positionScreen.z/=j.positionScreen.w,j.visible=!(-1>j.positionScreen.x||1<j.positionScreen.x||-1>j.positionScreen.y||1<j.positionScreen.y||-1>j.positionScreen.z||1<j.positionScreen.z);oa=0;for(Ka=Qa.length;oa<Ka;oa++){xa=Qa[oa];var ob=!0===vb?mb.materials[xa.materialIndex]:fa.material;if(void 0!==ob){pa=ob.side;if(xa instanceof THREE.Face3)if(Z=n[xa.a],ca=n[xa.b],
ga=n[xa.c],S[0]=Z.positionScreen,S[1]=ca.positionScreen,S[2]=ga.positionScreen,!0===Z.visible||!0===ca.visible||!0===ga.visible||P.isIntersectionBox(D.setFromPoints(S)))if(Ba=0>(ga.positionScreen.x-Z.positionScreen.x)*(ca.positionScreen.y-Z.positionScreen.y)-(ga.positionScreen.y-Z.positionScreen.y)*(ca.positionScreen.x-Z.positionScreen.x),pa===THREE.DoubleSide||Ba===(pa===THREE.FrontSide))v===l?(ha=new THREE.RenderableFace3,p.push(ha),l++,v++,u=ha):u=p[v++],u.v1.copy(Z),u.v2.copy(ca),u.v3.copy(ga);
else continue;else continue;else if(xa instanceof THREE.Face4)if(Z=n[xa.a],ca=n[xa.b],ga=n[xa.c],ha=n[xa.d],Q[0]=Z.positionScreen,Q[1]=ca.positionScreen,Q[2]=ga.positionScreen,Q[3]=ha.positionScreen,!0===Z.visible||!0===ca.visible||!0===ga.visible||!0===ha.visible||P.isIntersectionBox(D.setFromPoints(Q)))if(Ba=0>(ha.positionScreen.x-Z.positionScreen.x)*(ca.positionScreen.y-Z.positionScreen.y)-(ha.positionScreen.y-Z.positionScreen.y)*(ca.positionScreen.x-Z.positionScreen.x)||0>(ca.positionScreen.x-
ga.positionScreen.x)*(ha.positionScreen.y-ga.positionScreen.y)-(ca.positionScreen.y-ga.positionScreen.y)*(ha.positionScreen.x-ga.positionScreen.x),pa===THREE.DoubleSide||Ba===(pa===THREE.FrontSide)){if(t===w){var Qb=new THREE.RenderableFace4;x.push(Qb);w++;t++;u=Qb}else u=x[t++];u.v1.copy(Z);u.v2.copy(ca);u.v3.copy(ga);u.v4.copy(ha)}else continue;else continue;u.normalModel.copy(xa.normal);!1===Ba&&(pa===THREE.BackSide||pa===THREE.DoubleSide)&&u.normalModel.negate();u.normalModel.applyMatrix3(ab).normalize();
u.normalModelView.copy(u.normalModel).applyMatrix3(bb);u.centroidModel.copy(xa.centroid).applyMatrix4(Ca);ga=xa.vertexNormals;Z=0;for(ca=ga.length;Z<ca;Z++)ha=u.vertexNormalsModel[Z],ha.copy(ga[Z]),!1===Ba&&(pa===THREE.BackSide||pa===THREE.DoubleSide)&&ha.negate(),ha.applyMatrix3(ab).normalize(),u.vertexNormalsModelView[Z].copy(ha).applyMatrix3(bb);u.vertexNormalsLength=ga.length;Z=0;for(ca=Ta.length;Z<ca;Z++)if(ha=Ta[Z][oa],void 0!==ha){pa=0;for(ga=ha.length;pa<ga;pa++)u.uvs[Z][pa]=ha[pa]}u.color=
xa.color;u.material=ob;Pa.copy(u.centroidModel).applyProjection(sa);u.z=Pa.z;F.elements.push(u)}}}else if(fa instanceof THREE.Line){Va.multiplyMatrices(sa,Ca);oa=fa.geometry.vertices;Z=b();Z.positionScreen.copy(oa[0]).applyMatrix4(Va);Qa=fa.type===THREE.LinePieces?2:1;Ka=1;for(xa=oa.length;Ka<xa;Ka++)Z=b(),Z.positionScreen.copy(oa[Ka]).applyMatrix4(Va),0<(Ka+1)%Qa||(ca=n[k-2],M.copy(Z.positionScreen),La.copy(ca.positionScreen),!0===d(M,La)&&(M.multiplyScalar(1/M.w),La.multiplyScalar(1/La.w),r===E?
(Ta=new THREE.RenderableLine,N.push(Ta),E++,r++,A=Ta):A=N[r++],A.v1.positionScreen.copy(M),A.v2.positionScreen.copy(La),A.z=Math.max(M.z,La.z),A.material=fa.material,F.elements.push(A)))}h=0;for(m=F.sprites.length;h<m;h++)fa=F.sprites[h].object,Ca=fa.matrixWorld,fa instanceof THREE.Particle&&(B.set(Ca.elements[12],Ca.elements[13],Ca.elements[14],1),B.applyMatrix4(sa),B.z/=B.w,0<B.z&&1>B.z&&(y===I?(Ba=new THREE.RenderableParticle,R.push(Ba),I++,y++,C=Ba):C=R[y++],C.object=fa,C.x=B.x/B.w,C.y=B.y/B.w,
C.z=B.z,C.rotation=fa.rotation.z,C.scale.x=fa.scale.x*Math.abs(C.x-(B.x+i.projectionMatrix.elements[0])/(B.w+i.projectionMatrix.elements[12])),C.scale.y=fa.scale.y*Math.abs(C.y-(B.y+i.projectionMatrix.elements[5])/(B.w+i.projectionMatrix.elements[13])),C.material=fa.material,F.elements.push(C)));!0===ub&&F.elements.sort(c);return F}};THREE.Face3=function(a,b,c,d,e,g){this.a=a;this.b=b;this.c=c;this.normal=d instanceof THREE.Vector3?d:new THREE.Vector3;this.vertexNormals=d instanceof Array?d:[];this.color=e instanceof THREE.Color?e:new THREE.Color;this.vertexColors=e instanceof Array?e:[];this.vertexTangents=[];this.materialIndex=void 0!==g?g:0;this.centroid=new THREE.Vector3};
THREE.Face3.prototype={constructor:THREE.Face3,clone:function(){var a=new THREE.Face3(this.a,this.b,this.c);a.normal.copy(this.normal);a.color.copy(this.color);a.centroid.copy(this.centroid);a.materialIndex=this.materialIndex;var b,c;b=0;for(c=this.vertexNormals.length;b<c;b++)a.vertexNormals[b]=this.vertexNormals[b].clone();b=0;for(c=this.vertexColors.length;b<c;b++)a.vertexColors[b]=this.vertexColors[b].clone();b=0;for(c=this.vertexTangents.length;b<c;b++)a.vertexTangents[b]=this.vertexTangents[b].clone();
return a}};THREE.Face4=function(a,b,c,d,e,g,h){this.a=a;this.b=b;this.c=c;this.d=d;this.normal=e instanceof THREE.Vector3?e:new THREE.Vector3;this.vertexNormals=e instanceof Array?e:[];this.color=g instanceof THREE.Color?g:new THREE.Color;this.vertexColors=g instanceof Array?g:[];this.vertexTangents=[];this.materialIndex=void 0!==h?h:0;this.centroid=new THREE.Vector3};
THREE.Face4.prototype={constructor:THREE.Face4,clone:function(){var a=new THREE.Face4(this.a,this.b,this.c,this.d);a.normal.copy(this.normal);a.color.copy(this.color);a.centroid.copy(this.centroid);a.materialIndex=this.materialIndex;var b,c;b=0;for(c=this.vertexNormals.length;b<c;b++)a.vertexNormals[b]=this.vertexNormals[b].clone();b=0;for(c=this.vertexColors.length;b<c;b++)a.vertexColors[b]=this.vertexColors[b].clone();b=0;for(c=this.vertexTangents.length;b<c;b++)a.vertexTangents[b]=this.vertexTangents[b].clone();
return a}};THREE.Geometry=function(){THREE.EventDispatcher.call(this);this.id=THREE.GeometryIdCount++;this.name="";this.vertices=[];this.colors=[];this.normals=[];this.faces=[];this.faceUvs=[[]];this.faceVertexUvs=[[]];this.morphTargets=[];this.morphColors=[];this.morphNormals=[];this.skinWeights=[];this.skinIndices=[];this.lineDistances=[];this.boundingSphere=this.boundingBox=null;this.hasTangents=!1;this.dynamic=!0;this.buffersNeedUpdate=this.lineDistancesNeedUpdate=this.colorsNeedUpdate=this.tangentsNeedUpdate=
this.normalsNeedUpdate=this.uvsNeedUpdate=this.elementsNeedUpdate=this.verticesNeedUpdate=!1};
THREE.Geometry.prototype={constructor:THREE.Geometry,applyMatrix:function(a){for(var b=(new THREE.Matrix3).getInverse(a).transpose(),c=0,d=this.vertices.length;c<d;c++)this.vertices[c].applyMatrix4(a);c=0;for(d=this.faces.length;c<d;c++){var e=this.faces[c];e.normal.applyMatrix3(b).normalize();for(var g=0,h=e.vertexNormals.length;g<h;g++)e.vertexNormals[g].applyMatrix3(b).normalize();e.centroid.applyMatrix4(a)}},computeCentroids:function(){var a,b,c;a=0;for(b=this.faces.length;a<b;a++)c=this.faces[a],
c.centroid.set(0,0,0),c instanceof THREE.Face3?(c.centroid.add(this.vertices[c.a]),c.centroid.add(this.vertices[c.b]),c.centroid.add(this.vertices[c.c]),c.centroid.divideScalar(3)):c instanceof THREE.Face4&&(c.centroid.add(this.vertices[c.a]),c.centroid.add(this.vertices[c.b]),c.centroid.add(this.vertices[c.c]),c.centroid.add(this.vertices[c.d]),c.centroid.divideScalar(4))},computeFaceNormals:function(){var a,b,c,d,e,g,h=new THREE.Vector3,i=new THREE.Vector3;a=0;for(b=this.faces.length;a<b;a++)c=
this.faces[a],d=this.vertices[c.a],e=this.vertices[c.b],g=this.vertices[c.c],h.subVectors(g,e),i.subVectors(d,e),h.cross(i),h.normalize(),c.normal.copy(h)},computeVertexNormals:function(a){var b,c,d,e;if(void 0===this.__tmpVertices){e=this.__tmpVertices=Array(this.vertices.length);b=0;for(c=this.vertices.length;b<c;b++)e[b]=new THREE.Vector3;b=0;for(c=this.faces.length;b<c;b++)d=this.faces[b],d instanceof THREE.Face3?d.vertexNormals=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3]:d instanceof
THREE.Face4&&(d.vertexNormals=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3])}else{e=this.__tmpVertices;b=0;for(c=this.vertices.length;b<c;b++)e[b].set(0,0,0)}if(a){var g,h,i,j=new THREE.Vector3,k=new THREE.Vector3,n=new THREE.Vector3,m=new THREE.Vector3,u=new THREE.Vector3;b=0;for(c=this.faces.length;b<c;b++)d=this.faces[b],d instanceof THREE.Face3?(a=this.vertices[d.a],g=this.vertices[d.b],h=this.vertices[d.c],j.subVectors(h,g),k.subVectors(a,g),j.cross(k),e[d.a].add(j),
e[d.b].add(j),e[d.c].add(j)):d instanceof THREE.Face4&&(a=this.vertices[d.a],g=this.vertices[d.b],h=this.vertices[d.c],i=this.vertices[d.d],n.subVectors(i,g),k.subVectors(a,g),n.cross(k),e[d.a].add(n),e[d.b].add(n),e[d.d].add(n),m.subVectors(i,h),u.subVectors(g,h),m.cross(u),e[d.b].add(m),e[d.c].add(m),e[d.d].add(m))}else{b=0;for(c=this.faces.length;b<c;b++)d=this.faces[b],d instanceof THREE.Face3?(e[d.a].add(d.normal),e[d.b].add(d.normal),e[d.c].add(d.normal)):d instanceof THREE.Face4&&(e[d.a].add(d.normal),
e[d.b].add(d.normal),e[d.c].add(d.normal),e[d.d].add(d.normal))}b=0;for(c=this.vertices.length;b<c;b++)e[b].normalize();b=0;for(c=this.faces.length;b<c;b++)d=this.faces[b],d instanceof THREE.Face3?(d.vertexNormals[0].copy(e[d.a]),d.vertexNormals[1].copy(e[d.b]),d.vertexNormals[2].copy(e[d.c])):d instanceof THREE.Face4&&(d.vertexNormals[0].copy(e[d.a]),d.vertexNormals[1].copy(e[d.b]),d.vertexNormals[2].copy(e[d.c]),d.vertexNormals[3].copy(e[d.d]))},computeMorphNormals:function(){var a,b,c,d,e;c=0;
for(d=this.faces.length;c<d;c++){e=this.faces[c];e.__originalFaceNormal?e.__originalFaceNormal.copy(e.normal):e.__originalFaceNormal=e.normal.clone();e.__originalVertexNormals||(e.__originalVertexNormals=[]);a=0;for(b=e.vertexNormals.length;a<b;a++)e.__originalVertexNormals[a]?e.__originalVertexNormals[a].copy(e.vertexNormals[a]):e.__originalVertexNormals[a]=e.vertexNormals[a].clone()}var g=new THREE.Geometry;g.faces=this.faces;a=0;for(b=this.morphTargets.length;a<b;a++){if(!this.morphNormals[a]){this.morphNormals[a]=
{};this.morphNormals[a].faceNormals=[];this.morphNormals[a].vertexNormals=[];var h=this.morphNormals[a].faceNormals,i=this.morphNormals[a].vertexNormals,j,k;c=0;for(d=this.faces.length;c<d;c++)e=this.faces[c],j=new THREE.Vector3,k=e instanceof THREE.Face3?{a:new THREE.Vector3,b:new THREE.Vector3,c:new THREE.Vector3}:{a:new THREE.Vector3,b:new THREE.Vector3,c:new THREE.Vector3,d:new THREE.Vector3},h.push(j),i.push(k)}h=this.morphNormals[a];g.vertices=this.morphTargets[a].vertices;g.computeFaceNormals();
g.computeVertexNormals();c=0;for(d=this.faces.length;c<d;c++)e=this.faces[c],j=h.faceNormals[c],k=h.vertexNormals[c],j.copy(e.normal),e instanceof THREE.Face3?(k.a.copy(e.vertexNormals[0]),k.b.copy(e.vertexNormals[1]),k.c.copy(e.vertexNormals[2])):(k.a.copy(e.vertexNormals[0]),k.b.copy(e.vertexNormals[1]),k.c.copy(e.vertexNormals[2]),k.d.copy(e.vertexNormals[3]))}c=0;for(d=this.faces.length;c<d;c++)e=this.faces[c],e.normal=e.__originalFaceNormal,e.vertexNormals=e.__originalVertexNormals},computeTangents:function(){function a(a,
b,c,d,e,g,y){i=a.vertices[b];j=a.vertices[c];k=a.vertices[d];n=h[e];m=h[g];u=h[y];v=j.x-i.x;p=k.x-i.x;l=j.y-i.y;t=k.y-i.y;x=j.z-i.z;w=k.z-i.z;A=m.x-n.x;r=u.x-n.x;N=m.y-n.y;E=u.y-n.y;C=1/(A*E-r*N);F.set((E*v-N*p)*C,(E*l-N*t)*C,(E*x-N*w)*C);X.set((A*p-r*v)*C,(A*t-r*l)*C,(A*w-r*x)*C);R[b].add(F);R[c].add(F);R[d].add(F);I[b].add(X);I[c].add(X);I[d].add(X)}var b,c,d,e,g,h,i,j,k,n,m,u,v,p,l,t,x,w,A,r,N,E,C,y,R=[],I=[],F=new THREE.Vector3,X=new THREE.Vector3,B=new THREE.Vector3,P=new THREE.Vector3,D=new THREE.Vector3;
b=0;for(c=this.vertices.length;b<c;b++)R[b]=new THREE.Vector3,I[b]=new THREE.Vector3;b=0;for(c=this.faces.length;b<c;b++)g=this.faces[b],h=this.faceVertexUvs[0][b],g instanceof THREE.Face3?a(this,g.a,g.b,g.c,0,1,2):g instanceof THREE.Face4&&(a(this,g.a,g.b,g.d,0,1,3),a(this,g.b,g.c,g.d,1,2,3));var S=["a","b","c","d"];b=0;for(c=this.faces.length;b<c;b++){g=this.faces[b];for(d=0;d<g.vertexNormals.length;d++)D.copy(g.vertexNormals[d]),e=g[S[d]],y=R[e],B.copy(y),B.sub(D.multiplyScalar(D.dot(y))).normalize(),
P.crossVectors(g.vertexNormals[d],y),e=P.dot(I[e]),e=0>e?-1:1,g.vertexTangents[d]=new THREE.Vector4(B.x,B.y,B.z,e)}this.hasTangents=!0},computeLineDistances:function(){for(var a=0,b=this.vertices,c=0,d=b.length;c<d;c++)0<c&&(a+=b[c].distanceTo(b[c-1])),this.lineDistances[c]=a},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);this.boundingBox.setFromPoints(this.vertices)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=new THREE.Sphere);
this.boundingSphere.setFromCenterAndPoints(this.boundingSphere.center,this.vertices)},mergeVertices:function(){var a={},b=[],c=[],d,e=Math.pow(10,4),g,h,i,j,k;this.__tmpVertices=void 0;g=0;for(h=this.vertices.length;g<h;g++)d=this.vertices[g],d=[Math.round(d.x*e),Math.round(d.y*e),Math.round(d.z*e)].join("_"),void 0===a[d]?(a[d]=g,b.push(this.vertices[g]),c[g]=b.length-1):c[g]=c[a[d]];e=[];g=0;for(h=this.faces.length;g<h;g++)if(a=this.faces[g],a instanceof THREE.Face3){a.a=c[a.a];a.b=c[a.b];a.c=c[a.c];
i=[a.a,a.b,a.c];d=-1;for(j=0;3>j;j++)if(i[j]==i[(j+1)%3]){e.push(g);break}}else if(a instanceof THREE.Face4){a.a=c[a.a];a.b=c[a.b];a.c=c[a.c];a.d=c[a.d];i=[a.a,a.b,a.c,a.d];d=-1;for(j=0;4>j;j++)i[j]==i[(j+1)%4]&&(0<=d&&e.push(g),d=j);if(0<=d){i.splice(d,1);var n=new THREE.Face3(i[0],i[1],i[2],a.normal,a.color,a.materialIndex);i=0;for(j=this.faceVertexUvs.length;i<j;i++)(k=this.faceVertexUvs[i][g])&&k.splice(d,1);a.vertexNormals&&0<a.vertexNormals.length&&(n.vertexNormals=a.vertexNormals,n.vertexNormals.splice(d,
1));a.vertexColors&&0<a.vertexColors.length&&(n.vertexColors=a.vertexColors,n.vertexColors.splice(d,1));this.faces[g]=n}}for(g=e.length-1;0<=g;g--){this.faces.splice(g,1);i=0;for(j=this.faceVertexUvs.length;i<j;i++)this.faceVertexUvs[i].splice(g,1)}c=this.vertices.length-b.length;this.vertices=b;return c},clone:function(){for(var a=new THREE.Geometry,b=this.vertices,c=0,d=b.length;c<d;c++)a.vertices.push(b[c].clone());b=this.faces;c=0;for(d=b.length;c<d;c++)a.faces.push(b[c].clone());b=this.faceVertexUvs[0];
c=0;for(d=b.length;c<d;c++){for(var e=b[c],g=[],h=0,i=e.length;h<i;h++)g.push(new THREE.Vector2(e[h].x,e[h].y));a.faceVertexUvs[0].push(g)}return a},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.GeometryIdCount=0;THREE.BufferGeometry=function(){THREE.EventDispatcher.call(this);this.id=THREE.GeometryIdCount++;this.attributes={};this.dynamic=!1;this.offsets=[];this.boundingSphere=this.boundingBox=null;this.hasTangents=!1;this.morphTargets=[]};
THREE.BufferGeometry.prototype={constructor:THREE.BufferGeometry,applyMatrix:function(a){var b,c;this.attributes.position&&(b=this.attributes.position.array);this.attributes.normal&&(c=this.attributes.normal.array);void 0!==b&&(a.multiplyVector3Array(b),this.verticesNeedUpdate=!0);void 0!==c&&(b=new THREE.Matrix3,b.getInverse(a).transpose(),b.multiplyVector3Array(c),this.normalizeNormals(),this.normalsNeedUpdate=!0)},computeBoundingBox:function(){null===this.boundingBox&&(this.boundingBox=new THREE.Box3);
var a=this.attributes.position.array;if(a){var b=this.boundingBox,c,d,e;3<=a.length&&(b.min.x=b.max.x=a[0],b.min.y=b.max.y=a[1],b.min.z=b.max.z=a[2]);for(var g=3,h=a.length;g<h;g+=3)c=a[g],d=a[g+1],e=a[g+2],c<b.min.x?b.min.x=c:c>b.max.x&&(b.max.x=c),d<b.min.y?b.min.y=d:d>b.max.y&&(b.max.y=d),e<b.min.z?b.min.z=e:e>b.max.z&&(b.max.z=e)}if(void 0===a||0===a.length)this.boundingBox.min.set(0,0,0),this.boundingBox.max.set(0,0,0)},computeBoundingSphere:function(){null===this.boundingSphere&&(this.boundingSphere=
new THREE.Sphere);var a=this.attributes.position.array;if(a){for(var b,c=0,d,e,g=0,h=a.length;g<h;g+=3)b=a[g],d=a[g+1],e=a[g+2],b=b*b+d*d+e*e,b>c&&(c=b);this.boundingSphere.radius=Math.sqrt(c)}},computeVertexNormals:function(){if(this.attributes.position){var a,b,c,d;a=this.attributes.position.array.length;if(void 0===this.attributes.normal)this.attributes.normal={itemSize:3,array:new Float32Array(a),numItems:a};else{a=0;for(b=this.attributes.normal.array.length;a<b;a++)this.attributes.normal.array[a]=
0}var e=this.attributes.position.array,g=this.attributes.normal.array,h,i,j,k,n,m,u=new THREE.Vector3,v=new THREE.Vector3,p=new THREE.Vector3,l=new THREE.Vector3,t=new THREE.Vector3;if(this.attributes.index){var x=this.attributes.index.array,w=this.offsets;c=0;for(d=w.length;c<d;++c){b=w[c].start;h=w[c].count;var A=w[c].index;a=b;for(b+=h;a<b;a+=3)h=A+x[a],i=A+x[a+1],j=A+x[a+2],k=e[3*h],n=e[3*h+1],m=e[3*h+2],u.set(k,n,m),k=e[3*i],n=e[3*i+1],m=e[3*i+2],v.set(k,n,m),k=e[3*j],n=e[3*j+1],m=e[3*j+2],p.set(k,
n,m),l.subVectors(p,v),t.subVectors(u,v),l.cross(t),g[3*h]+=l.x,g[3*h+1]+=l.y,g[3*h+2]+=l.z,g[3*i]+=l.x,g[3*i+1]+=l.y,g[3*i+2]+=l.z,g[3*j]+=l.x,g[3*j+1]+=l.y,g[3*j+2]+=l.z}}else{a=0;for(b=e.length;a<b;a+=9)k=e[a],n=e[a+1],m=e[a+2],u.set(k,n,m),k=e[a+3],n=e[a+4],m=e[a+5],v.set(k,n,m),k=e[a+6],n=e[a+7],m=e[a+8],p.set(k,n,m),l.subVectors(p,v),t.subVectors(u,v),l.cross(t),g[a]=l.x,g[a+1]=l.y,g[a+2]=l.z,g[a+3]=l.x,g[a+4]=l.y,g[a+5]=l.z,g[a+6]=l.x,g[a+7]=l.y,g[a+8]=l.z}this.normalizeNormals();this.normalsNeedUpdate=
!0}},normalizeNormals:function(){for(var a=this.attributes.normal.array,b,c,d,e=0,g=a.length;e<g;e+=3)b=a[e],c=a[e+1],d=a[e+2],b=1/Math.sqrt(b*b+c*c+d*d),a[e]*=b,a[e+1]*=b,a[e+2]*=b},computeTangents:function(){function a(a){Ca.x=d[3*a];Ca.y=d[3*a+1];Ca.z=d[3*a+2];Va.copy(Ca);bb=j[a];la.copy(bb);la.sub(Ca.multiplyScalar(Ca.dot(bb))).normalize();sa.crossVectors(Va,bb);Pa=sa.dot(k[a]);ab=0>Pa?-1:1;i[4*a]=la.x;i[4*a+1]=la.y;i[4*a+2]=la.z;i[4*a+3]=ab}if(void 0===this.attributes.index||void 0===this.attributes.position||
void 0===this.attributes.normal||void 0===this.attributes.uv)console.warn("Missing required attributes (index, position, normal or uv) in BufferGeometry.computeTangents()");else{var b=this.attributes.index.array,c=this.attributes.position.array,d=this.attributes.normal.array,e=this.attributes.uv.array,g=c.length/3;if(void 0===this.attributes.tangent){var h=4*g;this.attributes.tangent={itemSize:4,array:new Float32Array(h),numItems:h}}for(var i=this.attributes.tangent.array,j=[],k=[],h=0;h<g;h++)j[h]=
new THREE.Vector3,k[h]=new THREE.Vector3;var n,m,u,v,p,l,t,x,w,A,r,N,E,C,y,g=new THREE.Vector3,h=new THREE.Vector3,R,I,F,X,B,P,D,S=this.offsets;F=0;for(X=S.length;F<X;++F){I=S[F].start;B=S[F].count;var Q=S[F].index;R=I;for(I+=B;R<I;R+=3)B=Q+b[R],P=Q+b[R+1],D=Q+b[R+2],n=c[3*B],m=c[3*B+1],u=c[3*B+2],v=c[3*P],p=c[3*P+1],l=c[3*P+2],t=c[3*D],x=c[3*D+1],w=c[3*D+2],A=e[2*B],r=e[2*B+1],N=e[2*P],E=e[2*P+1],C=e[2*D],y=e[2*D+1],v-=n,n=t-n,p-=m,m=x-m,l-=u,u=w-u,N-=A,A=C-A,E-=r,r=y-r,y=1/(N*r-A*E),g.set((r*v-
E*n)*y,(r*p-E*m)*y,(r*l-E*u)*y),h.set((N*n-A*v)*y,(N*m-A*p)*y,(N*u-A*l)*y),j[B].add(g),j[P].add(g),j[D].add(g),k[B].add(h),k[P].add(h),k[D].add(h)}var la=new THREE.Vector3,sa=new THREE.Vector3,Ca=new THREE.Vector3,Va=new THREE.Vector3,ab,bb,Pa;F=0;for(X=S.length;F<X;++F){I=S[F].start;B=S[F].count;Q=S[F].index;R=I;for(I+=B;R<I;R+=3)B=Q+b[R],P=Q+b[R+1],D=Q+b[R+2],a(B),a(P),a(D)}this.tangentsNeedUpdate=this.hasTangents=!0}},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.Camera=function(){THREE.Object3D.call(this);this.matrixWorldInverse=new THREE.Matrix4;this.projectionMatrix=new THREE.Matrix4;this.projectionMatrixInverse=new THREE.Matrix4};THREE.Camera.prototype=Object.create(THREE.Object3D.prototype);THREE.Camera.prototype.lookAt=function(a){this.matrix.lookAt(this.position,a,this.up);!0===this.rotationAutoUpdate&&(!1===this.useQuaternion?this.rotation.setEulerFromRotationMatrix(this.matrix,this.eulerOrder):this.quaternion.copy(this.matrix.decompose()[1]))};THREE.OrthographicCamera=function(a,b,c,d,e,g){THREE.Camera.call(this);this.left=a;this.right=b;this.top=c;this.bottom=d;this.near=void 0!==e?e:0.1;this.far=void 0!==g?g:2E3;this.updateProjectionMatrix()};THREE.OrthographicCamera.prototype=Object.create(THREE.Camera.prototype);THREE.OrthographicCamera.prototype.updateProjectionMatrix=function(){this.projectionMatrix.makeOrthographic(this.left,this.right,this.top,this.bottom,this.near,this.far)};THREE.PerspectiveCamera=function(a,b,c,d){THREE.Camera.call(this);this.fov=void 0!==a?a:50;this.aspect=void 0!==b?b:1;this.near=void 0!==c?c:0.1;this.far=void 0!==d?d:2E3;this.updateProjectionMatrix()};THREE.PerspectiveCamera.prototype=Object.create(THREE.Camera.prototype);THREE.PerspectiveCamera.prototype.setLens=function(a,b){void 0===b&&(b=24);this.fov=2*THREE.Math.radToDeg(Math.atan(b/(2*a)));this.updateProjectionMatrix()};
THREE.PerspectiveCamera.prototype.setViewOffset=function(a,b,c,d,e,g){this.fullWidth=a;this.fullHeight=b;this.x=c;this.y=d;this.width=e;this.height=g;this.updateProjectionMatrix()};
THREE.PerspectiveCamera.prototype.updateProjectionMatrix=function(){if(this.fullWidth){var a=this.fullWidth/this.fullHeight,b=Math.tan(THREE.Math.degToRad(0.5*this.fov))*this.near,c=-b,d=a*c,a=Math.abs(a*b-d),c=Math.abs(b-c);this.projectionMatrix.makeFrustum(d+this.x*a/this.fullWidth,d+(this.x+this.width)*a/this.fullWidth,b-(this.y+this.height)*c/this.fullHeight,b-this.y*c/this.fullHeight,this.near,this.far)}else this.projectionMatrix.makePerspective(this.fov,this.aspect,this.near,this.far)};THREE.Light=function(a){THREE.Object3D.call(this);this.color=new THREE.Color(a)};THREE.Light.prototype=Object.create(THREE.Object3D.prototype);THREE.AmbientLight=function(a){THREE.Light.call(this,a)};THREE.AmbientLight.prototype=Object.create(THREE.Light.prototype);THREE.DirectionalLight=function(a,b){THREE.Light.call(this,a);this.position=new THREE.Vector3(0,1,0);this.target=new THREE.Object3D;this.intensity=void 0!==b?b:1;this.onlyShadow=this.castShadow=!1;this.shadowCameraNear=50;this.shadowCameraFar=5E3;this.shadowCameraLeft=-500;this.shadowCameraTop=this.shadowCameraRight=500;this.shadowCameraBottom=-500;this.shadowCameraVisible=!1;this.shadowBias=0;this.shadowDarkness=0.5;this.shadowMapHeight=this.shadowMapWidth=512;this.shadowCascade=!1;this.shadowCascadeOffset=
new THREE.Vector3(0,0,-1E3);this.shadowCascadeCount=2;this.shadowCascadeBias=[0,0,0];this.shadowCascadeWidth=[512,512,512];this.shadowCascadeHeight=[512,512,512];this.shadowCascadeNearZ=[-1,0.99,0.998];this.shadowCascadeFarZ=[0.99,0.998,1];this.shadowCascadeArray=[];this.shadowMatrix=this.shadowCamera=this.shadowMapSize=this.shadowMap=null};THREE.DirectionalLight.prototype=Object.create(THREE.Light.prototype);THREE.HemisphereLight=function(a,b,c){THREE.Light.call(this,a);this.groundColor=new THREE.Color(b);this.position=new THREE.Vector3(0,100,0);this.intensity=void 0!==c?c:1};THREE.HemisphereLight.prototype=Object.create(THREE.Light.prototype);THREE.PointLight=function(a,b,c){THREE.Light.call(this,a);this.position=new THREE.Vector3(0,0,0);this.intensity=void 0!==b?b:1;this.distance=void 0!==c?c:0};THREE.PointLight.prototype=Object.create(THREE.Light.prototype);THREE.SpotLight=function(a,b,c,d,e){THREE.Light.call(this,a);this.position=new THREE.Vector3(0,1,0);this.target=new THREE.Object3D;this.intensity=void 0!==b?b:1;this.distance=void 0!==c?c:0;this.angle=void 0!==d?d:Math.PI/2;this.exponent=void 0!==e?e:10;this.onlyShadow=this.castShadow=!1;this.shadowCameraNear=50;this.shadowCameraFar=5E3;this.shadowCameraFov=50;this.shadowCameraVisible=!1;this.shadowBias=0;this.shadowDarkness=0.5;this.shadowMapHeight=this.shadowMapWidth=512;this.shadowMatrix=this.shadowCamera=
this.shadowMapSize=this.shadowMap=null};THREE.SpotLight.prototype=Object.create(THREE.Light.prototype);THREE.Loader=function(a){this.statusDomElement=(this.showStatus=a)?THREE.Loader.prototype.addStatusElement():null;this.onLoadStart=function(){};this.onLoadProgress=function(){};this.onLoadComplete=function(){}};
THREE.Loader.prototype={constructor:THREE.Loader,crossOrigin:"anonymous",addStatusElement:function(){var a=document.createElement("div");a.style.position="absolute";a.style.right="0px";a.style.top="0px";a.style.fontSize="0.8em";a.style.textAlign="left";a.style.background="rgba(0,0,0,0.25)";a.style.color="#fff";a.style.width="120px";a.style.padding="0.5em 0.5em 0.5em 0.5em";a.style.zIndex=1E3;a.innerHTML="Loading ...";return a},updateProgress:function(a){var b="Loaded ",b=a.total?b+((100*a.loaded/
a.total).toFixed(0)+"%"):b+((a.loaded/1E3).toFixed(2)+" KB");this.statusDomElement.innerHTML=b},extractUrlBase:function(a){a=a.split("/");a.pop();return(1>a.length?".":a.join("/"))+"/"},initMaterials:function(a,b){for(var c=[],d=0;d<a.length;++d)c[d]=THREE.Loader.prototype.createMaterial(a[d],b);return c},needsTangents:function(a){for(var b=0,c=a.length;b<c;b++)if(a[b]instanceof THREE.ShaderMaterial)return!0;return!1},createMaterial:function(a,b){function c(a){a=Math.log(a)/Math.LN2;return Math.floor(a)==
a}function d(a){a=Math.log(a)/Math.LN2;return Math.pow(2,Math.round(a))}function e(a,e,g,j,i,k,t){var x=g.toLowerCase().endsWith(".dds"),w=b+"/"+g;if(x){var A=THREE.ImageUtils.loadCompressedTexture(w);a[e]=A}else A=document.createElement("canvas"),a[e]=new THREE.Texture(A);a[e].sourceFile=g;j&&(a[e].repeat.set(j[0],j[1]),1!==j[0]&&(a[e].wrapS=THREE.RepeatWrapping),1!==j[1]&&(a[e].wrapT=THREE.RepeatWrapping));i&&a[e].offset.set(i[0],i[1]);k&&(g={repeat:THREE.RepeatWrapping,mirror:THREE.MirroredRepeatWrapping},
void 0!==g[k[0]]&&(a[e].wrapS=g[k[0]]),void 0!==g[k[1]]&&(a[e].wrapT=g[k[1]]));t&&(a[e].anisotropy=t);if(!x){var r=a[e],a=new Image;a.onload=function(){if(!c(this.width)||!c(this.height)){var a=d(this.width),b=d(this.height);r.image.width=a;r.image.height=b;r.image.getContext("2d").drawImage(this,0,0,a,b)}else r.image=this;r.needsUpdate=!0};a.crossOrigin=h.crossOrigin;a.src=w}}function g(a){return(255*a[0]<<16)+(255*a[1]<<8)+255*a[2]}var h=this,i="MeshLambertMaterial",j={color:15658734,opacity:1,
map:null,lightMap:null,normalMap:null,bumpMap:null,wireframe:!1};if(a.shading){var k=a.shading.toLowerCase();"phong"===k?i="MeshPhongMaterial":"basic"===k&&(i="MeshBasicMaterial")}void 0!==a.blending&&void 0!==THREE[a.blending]&&(j.blending=THREE[a.blending]);if(void 0!==a.transparent||1>a.opacity)j.transparent=a.transparent;void 0!==a.depthTest&&(j.depthTest=a.depthTest);void 0!==a.depthWrite&&(j.depthWrite=a.depthWrite);void 0!==a.visible&&(j.visible=a.visible);void 0!==a.flipSided&&(j.side=THREE.BackSide);
void 0!==a.doubleSided&&(j.side=THREE.DoubleSide);void 0!==a.wireframe&&(j.wireframe=a.wireframe);void 0!==a.vertexColors&&("face"===a.vertexColors?j.vertexColors=THREE.FaceColors:a.vertexColors&&(j.vertexColors=THREE.VertexColors));a.colorDiffuse?j.color=g(a.colorDiffuse):a.DbgColor&&(j.color=a.DbgColor);a.colorSpecular&&(j.specular=g(a.colorSpecular));a.colorAmbient&&(j.ambient=g(a.colorAmbient));a.transparency&&(j.opacity=a.transparency);a.specularCoef&&(j.shininess=a.specularCoef);a.mapDiffuse&&
b&&e(j,"map",a.mapDiffuse,a.mapDiffuseRepeat,a.mapDiffuseOffset,a.mapDiffuseWrap,a.mapDiffuseAnisotropy);a.mapLight&&b&&e(j,"lightMap",a.mapLight,a.mapLightRepeat,a.mapLightOffset,a.mapLightWrap,a.mapLightAnisotropy);a.mapBump&&b&&e(j,"bumpMap",a.mapBump,a.mapBumpRepeat,a.mapBumpOffset,a.mapBumpWrap,a.mapBumpAnisotropy);a.mapNormal&&b&&e(j,"normalMap",a.mapNormal,a.mapNormalRepeat,a.mapNormalOffset,a.mapNormalWrap,a.mapNormalAnisotropy);a.mapSpecular&&b&&e(j,"specularMap",a.mapSpecular,a.mapSpecularRepeat,
a.mapSpecularOffset,a.mapSpecularWrap,a.mapSpecularAnisotropy);a.mapBumpScale&&(j.bumpScale=a.mapBumpScale);a.mapNormal?(i=THREE.ShaderLib.normalmap,k=THREE.UniformsUtils.clone(i.uniforms),k.tNormal.value=j.normalMap,a.mapNormalFactor&&k.uNormalScale.value.set(a.mapNormalFactor,a.mapNormalFactor),j.map&&(k.tDiffuse.value=j.map,k.enableDiffuse.value=!0),j.specularMap&&(k.tSpecular.value=j.specularMap,k.enableSpecular.value=!0),j.lightMap&&(k.tAO.value=j.lightMap,k.enableAO.value=!0),k.uDiffuseColor.value.setHex(j.color),
k.uSpecularColor.value.setHex(j.specular),k.uAmbientColor.value.setHex(j.ambient),k.uShininess.value=j.shininess,void 0!==j.opacity&&(k.uOpacity.value=j.opacity),i=new THREE.ShaderMaterial({fragmentShader:i.fragmentShader,vertexShader:i.vertexShader,uniforms:k,lights:!0,fog:!0}),j.transparent&&(i.transparent=!0)):i=new THREE[i](j);void 0!==a.DbgName&&(i.name=a.DbgName);return i}};THREE.ImageLoader=function(){THREE.EventDispatcher.call(this);this.crossOrigin=null};THREE.ImageLoader.prototype={constructor:THREE.ImageLoader,load:function(a,b){var c=this;void 0===b&&(b=new Image);b.addEventListener("load",function(){c.dispatchEvent({type:"load",content:b})},!1);b.addEventListener("error",function(){c.dispatchEvent({type:"error",message:"Couldn't load URL ["+a+"]"})},!1);c.crossOrigin&&(b.crossOrigin=c.crossOrigin);b.src=a}};THREE.JSONLoader=function(a){THREE.Loader.call(this,a);this.withCredentials=!1};THREE.JSONLoader.prototype=Object.create(THREE.Loader.prototype);THREE.JSONLoader.prototype.load=function(a,b,c){c=c&&"string"===typeof c?c:this.extractUrlBase(a);this.onLoadStart();this.loadAjaxJSON(this,a,b,c)};
THREE.JSONLoader.prototype.loadAjaxJSON=function(a,b,c,d,e){var g=new XMLHttpRequest,h=0;g.onreadystatechange=function(){if(g.readyState===g.DONE)if(200===g.status||0===g.status){if(g.responseText){var i=JSON.parse(g.responseText);a.createModel(i,c,d)}else console.warn("THREE.JSONLoader: ["+b+"] seems to be unreachable or file there is empty");a.onLoadComplete()}else console.error("THREE.JSONLoader: Couldn't load ["+b+"] ["+g.status+"]");else g.readyState===g.LOADING?e&&(0===h&&(h=g.getResponseHeader("Content-Length")),
e({total:h,loaded:g.responseText.length})):g.readyState===g.HEADERS_RECEIVED&&(h=g.getResponseHeader("Content-Length"))};g.open("GET",b,!0);g.withCredentials=this.withCredentials;g.send(null)};
THREE.JSONLoader.prototype.createModel=function(a,b,c){var d=new THREE.Geometry,e=void 0!==a.scale?1/a.scale:1,g,h,i,j,k,n,m,u,v,p,l,t,x,w,A,r=a.faces;p=a.vertices;var N=a.normals,E=a.colors,C=0;for(g=0;g<a.uvs.length;g++)a.uvs[g].length&&C++;for(g=0;g<C;g++)d.faceUvs[g]=[],d.faceVertexUvs[g]=[];j=0;for(k=p.length;j<k;)n=new THREE.Vector3,n.x=p[j++]*e,n.y=p[j++]*e,n.z=p[j++]*e,d.vertices.push(n);j=0;for(k=r.length;j<k;){p=r[j++];n=p&1;i=p&2;g=p&4;h=p&8;u=p&16;m=p&32;l=p&64;p&=128;n?(t=new THREE.Face4,
t.a=r[j++],t.b=r[j++],t.c=r[j++],t.d=r[j++],n=4):(t=new THREE.Face3,t.a=r[j++],t.b=r[j++],t.c=r[j++],n=3);i&&(i=r[j++],t.materialIndex=i);i=d.faces.length;if(g)for(g=0;g<C;g++)x=a.uvs[g],v=r[j++],A=x[2*v],v=x[2*v+1],d.faceUvs[g][i]=new THREE.Vector2(A,v);if(h)for(g=0;g<C;g++){x=a.uvs[g];w=[];for(h=0;h<n;h++)v=r[j++],A=x[2*v],v=x[2*v+1],w[h]=new THREE.Vector2(A,v);d.faceVertexUvs[g][i]=w}u&&(u=3*r[j++],h=new THREE.Vector3,h.x=N[u++],h.y=N[u++],h.z=N[u],t.normal=h);if(m)for(g=0;g<n;g++)u=3*r[j++],h=
new THREE.Vector3,h.x=N[u++],h.y=N[u++],h.z=N[u],t.vertexNormals.push(h);l&&(m=r[j++],m=new THREE.Color(E[m]),t.color=m);if(p)for(g=0;g<n;g++)m=r[j++],m=new THREE.Color(E[m]),t.vertexColors.push(m);d.faces.push(t)}if(a.skinWeights){j=0;for(k=a.skinWeights.length;j<k;j+=2)r=a.skinWeights[j],N=a.skinWeights[j+1],d.skinWeights.push(new THREE.Vector4(r,N,0,0))}if(a.skinIndices){j=0;for(k=a.skinIndices.length;j<k;j+=2)r=a.skinIndices[j],N=a.skinIndices[j+1],d.skinIndices.push(new THREE.Vector4(r,N,0,0))}d.bones=
a.bones;d.animation=a.animation;if(void 0!==a.morphTargets){j=0;for(k=a.morphTargets.length;j<k;j++){d.morphTargets[j]={};d.morphTargets[j].name=a.morphTargets[j].name;d.morphTargets[j].vertices=[];E=d.morphTargets[j].vertices;C=a.morphTargets[j].vertices;r=0;for(N=C.length;r<N;r+=3)p=new THREE.Vector3,p.x=C[r]*e,p.y=C[r+1]*e,p.z=C[r+2]*e,E.push(p)}}if(void 0!==a.morphColors){j=0;for(k=a.morphColors.length;j<k;j++){d.morphColors[j]={};d.morphColors[j].name=a.morphColors[j].name;d.morphColors[j].colors=
[];N=d.morphColors[j].colors;E=a.morphColors[j].colors;e=0;for(r=E.length;e<r;e+=3)C=new THREE.Color(16755200),C.setRGB(E[e],E[e+1],E[e+2]),N.push(C)}}d.computeCentroids();d.computeFaceNormals();a=this.initMaterials(a.materials,c);this.needsTangents(a)&&d.computeTangents();b(d,a)};THREE.SceneLoader=function(){this.onLoadStart=function(){};this.onLoadProgress=function(){};this.onLoadComplete=function(){};this.callbackSync=function(){};this.callbackProgress=function(){};this.geometryHandlerMap={};this.hierarchyHandlerMap={};this.addGeometryHandler("ascii",THREE.JSONLoader)};THREE.SceneLoader.prototype.constructor=THREE.SceneLoader;
THREE.SceneLoader.prototype.load=function(a,b){var c=this,d=new XMLHttpRequest;d.onreadystatechange=function(){if(4===d.readyState)if(200===d.status||0===d.status){var e=JSON.parse(d.responseText);c.parse(e,b,a)}else console.error("THREE.SceneLoader: Couldn't load ["+a+"] ["+d.status+"]")};d.open("GET",a,!0);d.send(null)};THREE.SceneLoader.prototype.addGeometryHandler=function(a,b){this.geometryHandlerMap[a]={loaderClass:b}};
THREE.SceneLoader.prototype.addHierarchyHandler=function(a,b){this.hierarchyHandlerMap[a]={loaderClass:b}};
THREE.SceneLoader.prototype.parse=function(a,b,c){function d(a,b){return"relativeToHTML"==b?a:m+"/"+a}function e(){g(y.scene,I.objects)}function g(a,b){var c,e,h,j,k,m,t;for(t in b)if(void 0===y.objects[t]){var l=b[t],r=null;if(l.type&&l.type in n.hierarchyHandlerMap){if(void 0===l.loading){e={type:1,url:1,material:1,position:1,rotation:1,scale:1,visible:1,children:1,properties:1,skin:1,morph:1,mirroredLoop:1,duration:1};h={};for(var B in l)B in e||(h[B]=l[B]);v=y.materials[l.material];l.loading=
!0;e=n.hierarchyHandlerMap[l.type].loaderObject;e.options?e.load(d(l.url,I.urlBaseType),i(t,a,v,l)):e.load(d(l.url,I.urlBaseType),i(t,a,v,l),h)}}else if(void 0!==l.geometry){if(u=y.geometries[l.geometry]){r=!1;v=y.materials[l.material];r=v instanceof THREE.ShaderMaterial;h=l.position;j=l.rotation;k=l.scale;c=l.matrix;m=l.quaternion;l.material||(v=new THREE.MeshFaceMaterial(y.face_materials[l.geometry]));v instanceof THREE.MeshFaceMaterial&&0===v.materials.length&&(v=new THREE.MeshFaceMaterial(y.face_materials[l.geometry]));
if(v instanceof THREE.MeshFaceMaterial)for(e=0;e<v.materials.length;e++)r=r||v.materials[e]instanceof THREE.ShaderMaterial;r&&u.computeTangents();l.skin?r=new THREE.SkinnedMesh(u,v):l.morph?(r=new THREE.MorphAnimMesh(u,v),void 0!==l.duration&&(r.duration=l.duration),void 0!==l.time&&(r.time=l.time),void 0!==l.mirroredLoop&&(r.mirroredLoop=l.mirroredLoop),v.morphNormals&&u.computeMorphNormals()):r=new THREE.Mesh(u,v);r.name=t;c?(r.matrixAutoUpdate=!1,r.matrix.set(c[0],c[1],c[2],c[3],c[4],c[5],c[6],
c[7],c[8],c[9],c[10],c[11],c[12],c[13],c[14],c[15])):(r.position.set(h[0],h[1],h[2]),m?(r.quaternion.set(m[0],m[1],m[2],m[3]),r.useQuaternion=!0):r.rotation.set(j[0],j[1],j[2]),r.scale.set(k[0],k[1],k[2]));r.visible=l.visible;r.castShadow=l.castShadow;r.receiveShadow=l.receiveShadow;a.add(r);y.objects[t]=r}}else"DirectionalLight"===l.type||"PointLight"===l.type||"AmbientLight"===l.type?(w=void 0!==l.color?l.color:16777215,A=void 0!==l.intensity?l.intensity:1,"DirectionalLight"===l.type?(h=l.direction,
x=new THREE.DirectionalLight(w,A),x.position.set(h[0],h[1],h[2]),l.target&&(R.push({object:x,targetName:l.target}),x.target=null)):"PointLight"===l.type?(h=l.position,e=l.distance,x=new THREE.PointLight(w,A,e),x.position.set(h[0],h[1],h[2])):"AmbientLight"===l.type&&(x=new THREE.AmbientLight(w)),a.add(x),x.name=t,y.lights[t]=x,y.objects[t]=x):"PerspectiveCamera"===l.type||"OrthographicCamera"===l.type?("PerspectiveCamera"===l.type?p=new THREE.PerspectiveCamera(l.fov,l.aspect,l.near,l.far):"OrthographicCamera"===
l.type&&(p=new THREE.OrthographicCamera(l.left,l.right,l.top,l.bottom,l.near,l.far)),h=l.position,p.position.set(h[0],h[1],h[2]),a.add(p),p.name=t,y.cameras[t]=p,y.objects[t]=p):(h=l.position,j=l.rotation,k=l.scale,m=l.quaternion,r=new THREE.Object3D,r.name=t,r.position.set(h[0],h[1],h[2]),m?(r.quaternion.set(m[0],m[1],m[2],m[3]),r.useQuaternion=!0):r.rotation.set(j[0],j[1],j[2]),r.scale.set(k[0],k[1],k[2]),r.visible=void 0!==l.visible?l.visible:!1,a.add(r),y.objects[t]=r,y.empties[t]=r);if(r){if(void 0!==
l.properties)for(var C in l.properties)r.properties[C]=l.properties[C];if(void 0!==l.groups)for(e=0;e<l.groups.length;e++)h=l.groups[e],void 0===y.groups[h]&&(y.groups[h]=[]),y.groups[h].push(t);void 0!==l.children&&g(r,l.children)}}}function h(a){return function(b,c){y.geometries[a]=b;y.face_materials[a]=c;e();r-=1;n.onLoadComplete();k()}}function i(a,b,c,d){return function(g){var g=g.content?g.content:g.dae?g.scene:g,h=d.position,j=d.rotation,i=d.quaternion,l=d.scale;g.position.set(h[0],h[1],h[2]);
i?(g.quaternion.set(i[0],i[1],i[2],i[3]),g.useQuaternion=!0):g.rotation.set(j[0],j[1],j[2]);g.scale.set(l[0],l[1],l[2]);c&&g.traverse(function(a){a.material=c});var m=void 0!==d.visible?d.visible:!0;g.traverse(function(a){a.visible=m});b.add(g);g.name=a;y.objects[a]=g;e();r-=1;n.onLoadComplete();k()}}function j(a){return function(b,c){y.geometries[a]=b;y.face_materials[a]=c}}function k(){n.callbackProgress({totalModels:E,totalTextures:C,loadedModels:E-r,loadedTextures:C-N},y);n.onLoadProgress();if(0===
r&&0===N){for(var a=0;a<R.length;a++){var c=R[a],d=y.objects[c.targetName];d?c.object.target=d:(c.object.target=new THREE.Object3D,y.scene.add(c.object.target));c.object.target.properties.targetInverse=c.object}b(y)}}var n=this,m=THREE.Loader.prototype.extractUrlBase(c),u,v,p,l,t,x,w,A,r,N,E,C,y,R=[],I=a,F;for(F in this.geometryHandlerMap)a=this.geometryHandlerMap[F].loaderClass,this.geometryHandlerMap[F].loaderObject=new a;for(F in this.hierarchyHandlerMap)a=this.hierarchyHandlerMap[F].loaderClass,
this.hierarchyHandlerMap[F].loaderObject=new a;N=r=0;y={scene:new THREE.Scene,geometries:{},face_materials:{},materials:{},textures:{},objects:{},cameras:{},lights:{},fogs:{},empties:{},groups:{}};if(I.transform&&(F=I.transform.position,a=I.transform.rotation,c=I.transform.scale,F&&y.scene.position.set(F[0],F[1],F[2]),a&&y.scene.rotation.set(a[0],a[1],a[2]),c&&y.scene.scale.set(c[0],c[1],c[2]),F||a||c))y.scene.updateMatrix(),y.scene.updateMatrixWorld();F=function(a){return function(){N-=a;k();n.onLoadComplete()}};
for(var X in I.fogs)a=I.fogs[X],"linear"===a.type?l=new THREE.Fog(0,a.near,a.far):"exp2"===a.type&&(l=new THREE.FogExp2(0,a.density)),a=a.color,l.color.setRGB(a[0],a[1],a[2]),y.fogs[X]=l;for(var B in I.geometries)l=I.geometries[B],l.type in this.geometryHandlerMap&&(r+=1,n.onLoadStart());for(var P in I.objects)l=I.objects[P],l.type&&l.type in this.hierarchyHandlerMap&&(r+=1,n.onLoadStart());E=r;for(B in I.geometries)if(l=I.geometries[B],"cube"===l.type)u=new THREE.CubeGeometry(l.width,l.height,l.depth,
l.widthSegments,l.heightSegments,l.depthSegments),y.geometries[B]=u;else if("plane"===l.type)u=new THREE.PlaneGeometry(l.width,l.height,l.widthSegments,l.heightSegments),y.geometries[B]=u;else if("sphere"===l.type)u=new THREE.SphereGeometry(l.radius,l.widthSegments,l.heightSegments),y.geometries[B]=u;else if("cylinder"===l.type)u=new THREE.CylinderGeometry(l.topRad,l.botRad,l.height,l.radSegs,l.heightSegs),y.geometries[B]=u;else if("torus"===l.type)u=new THREE.TorusGeometry(l.radius,l.tube,l.segmentsR,
l.segmentsT),y.geometries[B]=u;else if("icosahedron"===l.type)u=new THREE.IcosahedronGeometry(l.radius,l.subdivisions),y.geometries[B]=u;else if(l.type in this.geometryHandlerMap){P={};for(t in l)"type"!==t&&"url"!==t&&(P[t]=l[t]);this.geometryHandlerMap[l.type].loaderObject.load(d(l.url,I.urlBaseType),h(B),P)}else"embedded"===l.type&&(P=I.embeds[l.id],P.metadata=I.metadata,P&&this.geometryHandlerMap.ascii.loaderObject.createModel(P,j(B),""));for(var D in I.textures)if(B=I.textures[D],B.url instanceof
Array){N+=B.url.length;for(t=0;t<B.url.length;t++)n.onLoadStart()}else N+=1,n.onLoadStart();C=N;for(D in I.textures){B=I.textures[D];void 0!==B.mapping&&void 0!==THREE[B.mapping]&&(B.mapping=new THREE[B.mapping]);if(B.url instanceof Array){P=B.url.length;l=[];for(t=0;t<P;t++)l[t]=d(B.url[t],I.urlBaseType);t=(t=l[0].endsWith(".dds"))?THREE.ImageUtils.loadCompressedTextureCube(l,B.mapping,F(P)):THREE.ImageUtils.loadTextureCube(l,B.mapping,F(P))}else t=B.url.toLowerCase().endsWith(".dds"),P=d(B.url,
I.urlBaseType),l=F(1),t=t?THREE.ImageUtils.loadCompressedTexture(P,B.mapping,l):THREE.ImageUtils.loadTexture(P,B.mapping,l),void 0!==THREE[B.minFilter]&&(t.minFilter=THREE[B.minFilter]),void 0!==THREE[B.magFilter]&&(t.magFilter=THREE[B.magFilter]),B.anisotropy&&(t.anisotropy=B.anisotropy),B.repeat&&(t.repeat.set(B.repeat[0],B.repeat[1]),1!==B.repeat[0]&&(t.wrapS=THREE.RepeatWrapping),1!==B.repeat[1]&&(t.wrapT=THREE.RepeatWrapping)),B.offset&&t.offset.set(B.offset[0],B.offset[1]),B.wrap&&(P={repeat:THREE.RepeatWrapping,
mirror:THREE.MirroredRepeatWrapping},void 0!==P[B.wrap[0]]&&(t.wrapS=P[B.wrap[0]]),void 0!==P[B.wrap[1]]&&(t.wrapT=P[B.wrap[1]]));y.textures[D]=t}var S,Q;for(S in I.materials){D=I.materials[S];for(Q in D.parameters)"envMap"===Q||"map"===Q||"lightMap"===Q||"bumpMap"===Q?D.parameters[Q]=y.textures[D.parameters[Q]]:"shading"===Q?D.parameters[Q]="flat"===D.parameters[Q]?THREE.FlatShading:THREE.SmoothShading:"side"===Q?D.parameters[Q]="double"==D.parameters[Q]?THREE.DoubleSide:"back"==D.parameters[Q]?
THREE.BackSide:THREE.FrontSide:"blending"===Q?D.parameters[Q]=D.parameters[Q]in THREE?THREE[D.parameters[Q]]:THREE.NormalBlending:"combine"===Q?D.parameters[Q]=D.parameters[Q]in THREE?THREE[D.parameters[Q]]:THREE.MultiplyOperation:"vertexColors"===Q?"face"==D.parameters[Q]?D.parameters[Q]=THREE.FaceColors:D.parameters[Q]&&(D.parameters[Q]=THREE.VertexColors):"wrapRGB"===Q&&(F=D.parameters[Q],D.parameters[Q]=new THREE.Vector3(F[0],F[1],F[2]));void 0!==D.parameters.opacity&&1>D.parameters.opacity&&
(D.parameters.transparent=!0);D.parameters.normalMap?(F=THREE.ShaderLib.normalmap,B=THREE.UniformsUtils.clone(F.uniforms),t=D.parameters.color,P=D.parameters.specular,l=D.parameters.ambient,X=D.parameters.shininess,B.tNormal.value=y.textures[D.parameters.normalMap],D.parameters.normalScale&&B.uNormalScale.value.set(D.parameters.normalScale[0],D.parameters.normalScale[1]),D.parameters.map&&(B.tDiffuse.value=D.parameters.map,B.enableDiffuse.value=!0),D.parameters.envMap&&(B.tCube.value=D.parameters.envMap,
B.enableReflection.value=!0,B.uReflectivity.value=D.parameters.reflectivity),D.parameters.lightMap&&(B.tAO.value=D.parameters.lightMap,B.enableAO.value=!0),D.parameters.specularMap&&(B.tSpecular.value=y.textures[D.parameters.specularMap],B.enableSpecular.value=!0),D.parameters.displacementMap&&(B.tDisplacement.value=y.textures[D.parameters.displacementMap],B.enableDisplacement.value=!0,B.uDisplacementBias.value=D.parameters.displacementBias,B.uDisplacementScale.value=D.parameters.displacementScale),
B.uDiffuseColor.value.setHex(t),B.uSpecularColor.value.setHex(P),B.uAmbientColor.value.setHex(l),B.uShininess.value=X,D.parameters.opacity&&(B.uOpacity.value=D.parameters.opacity),v=new THREE.ShaderMaterial({fragmentShader:F.fragmentShader,vertexShader:F.vertexShader,uniforms:B,lights:!0,fog:!0})):v=new THREE[D.type](D.parameters);y.materials[S]=v}for(S in I.materials)if(D=I.materials[S],D.parameters.materials){Q=[];for(t=0;t<D.parameters.materials.length;t++)Q.push(y.materials[D.parameters.materials[t]]);
y.materials[S].materials=Q}e();y.cameras&&I.defaults.camera&&(y.currentCamera=y.cameras[I.defaults.camera]);y.fogs&&I.defaults.fog&&(y.scene.fog=y.fogs[I.defaults.fog]);n.callbackSync(y);k()};THREE.TextureLoader=function(){THREE.EventDispatcher.call(this);this.crossOrigin=null};THREE.TextureLoader.prototype={constructor:THREE.TextureLoader,load:function(a){var b=this,c=new Image;c.addEventListener("load",function(){var a=new THREE.Texture(c);a.needsUpdate=!0;b.dispatchEvent({type:"load",content:a})},!1);c.addEventListener("error",function(){b.dispatchEvent({type:"error",message:"Couldn't load URL ["+a+"]"})},!1);b.crossOrigin&&(c.crossOrigin=b.crossOrigin);c.src=a}};THREE.Material=function(){THREE.EventDispatcher.call(this);this.id=THREE.MaterialIdCount++;this.name="";this.side=THREE.FrontSide;this.opacity=1;this.transparent=!1;this.blending=THREE.NormalBlending;this.blendSrc=THREE.SrcAlphaFactor;this.blendDst=THREE.OneMinusSrcAlphaFactor;this.blendEquation=THREE.AddEquation;this.depthWrite=this.depthTest=!0;this.polygonOffset=!1;this.alphaTest=this.polygonOffsetUnits=this.polygonOffsetFactor=0;this.overdraw=!1;this.needsUpdate=this.visible=!0};
THREE.Material.prototype.setValues=function(a){if(void 0!==a)for(var b in a){var c=a[b];if(void 0===c)console.warn("THREE.Material: '"+b+"' parameter is undefined.");else if(b in this){var d=this[b];d instanceof THREE.Color&&c instanceof THREE.Color?d.copy(c):d instanceof THREE.Color?d.set(c):d instanceof THREE.Vector3&&c instanceof THREE.Vector3?d.copy(c):this[b]=c}}};
THREE.Material.prototype.clone=function(a){void 0===a&&(a=new THREE.Material);a.name=this.name;a.side=this.side;a.opacity=this.opacity;a.transparent=this.transparent;a.blending=this.blending;a.blendSrc=this.blendSrc;a.blendDst=this.blendDst;a.blendEquation=this.blendEquation;a.depthTest=this.depthTest;a.depthWrite=this.depthWrite;a.polygonOffset=this.polygonOffset;a.polygonOffsetFactor=this.polygonOffsetFactor;a.polygonOffsetUnits=this.polygonOffsetUnits;a.alphaTest=this.alphaTest;a.overdraw=this.overdraw;
a.visible=this.visible;return a};THREE.Material.prototype.dispose=function(){this.dispatchEvent({type:"dispose"})};THREE.MaterialIdCount=0;THREE.LineBasicMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.linewidth=1;this.linejoin=this.linecap="round";this.vertexColors=!1;this.fog=!0;this.setValues(a)};THREE.LineBasicMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.LineBasicMaterial.prototype.clone=function(){var a=new THREE.LineBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.linewidth=this.linewidth;a.linecap=this.linecap;a.linejoin=this.linejoin;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};THREE.LineDashedMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.scale=this.linewidth=1;this.dashSize=3;this.gapSize=1;this.vertexColors=!1;this.fog=!0;this.setValues(a)};THREE.LineDashedMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.LineDashedMaterial.prototype.clone=function(){var a=new THREE.LineDashedMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.linewidth=this.linewidth;a.scale=this.scale;a.dashSize=this.dashSize;a.gapSize=this.gapSize;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};THREE.MeshBasicMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.envMap=this.specularMap=this.lightMap=this.map=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=0.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.vertexColors=THREE.NoColors;this.morphTargets=this.skinning=!1;this.setValues(a)};
THREE.MeshBasicMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.MeshBasicMaterial.prototype.clone=function(){var a=new THREE.MeshBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.lightMap=this.lightMap;a.specularMap=this.specularMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;a.wireframeLinejoin=
this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;return a};THREE.MeshLambertMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.ambient=new THREE.Color(16777215);this.emissive=new THREE.Color(0);this.wrapAround=!1;this.wrapRGB=new THREE.Vector3(1,1,1);this.envMap=this.specularMap=this.lightMap=this.map=null;this.combine=THREE.MultiplyOperation;this.reflectivity=1;this.refractionRatio=0.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap=
"round";this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.MeshLambertMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.MeshLambertMaterial.prototype.clone=function(){var a=new THREE.MeshLambertMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.ambient.copy(this.ambient);a.emissive.copy(this.emissive);a.wrapAround=this.wrapAround;a.wrapRGB.copy(this.wrapRGB);a.map=this.map;a.lightMap=this.lightMap;a.specularMap=this.specularMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;
a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;a.wireframeLinejoin=this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;a.morphNormals=this.morphNormals;return a};THREE.MeshPhongMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.ambient=new THREE.Color(16777215);this.emissive=new THREE.Color(0);this.specular=new THREE.Color(1118481);this.shininess=30;this.metal=!1;this.perPixel=!0;this.wrapAround=!1;this.wrapRGB=new THREE.Vector3(1,1,1);this.bumpMap=this.lightMap=this.map=null;this.bumpScale=1;this.normalMap=null;this.normalScale=new THREE.Vector2(1,1);this.envMap=this.specularMap=null;this.combine=THREE.MultiplyOperation;
this.reflectivity=1;this.refractionRatio=0.98;this.fog=!0;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.wireframeLinejoin=this.wireframeLinecap="round";this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.MeshPhongMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.MeshPhongMaterial.prototype.clone=function(){var a=new THREE.MeshPhongMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.ambient.copy(this.ambient);a.emissive.copy(this.emissive);a.specular.copy(this.specular);a.shininess=this.shininess;a.metal=this.metal;a.perPixel=this.perPixel;a.wrapAround=this.wrapAround;a.wrapRGB.copy(this.wrapRGB);a.map=this.map;a.lightMap=this.lightMap;a.bumpMap=this.bumpMap;a.bumpScale=this.bumpScale;a.normalMap=this.normalMap;a.normalScale.copy(this.normalScale);
a.specularMap=this.specularMap;a.envMap=this.envMap;a.combine=this.combine;a.reflectivity=this.reflectivity;a.refractionRatio=this.refractionRatio;a.fog=this.fog;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.wireframeLinecap=this.wireframeLinecap;a.wireframeLinejoin=this.wireframeLinejoin;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=this.morphTargets;a.morphNormals=this.morphNormals;return a};THREE.MeshDepthMaterial=function(a){THREE.Material.call(this);this.wireframe=!1;this.wireframeLinewidth=1;this.setValues(a)};THREE.MeshDepthMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshDepthMaterial.prototype.clone=function(){var a=new THREE.LineBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;return a};THREE.MeshNormalMaterial=function(a){THREE.Material.call(this,a);this.shading=THREE.FlatShading;this.wireframe=!1;this.wireframeLinewidth=1;this.setValues(a)};THREE.MeshNormalMaterial.prototype=Object.create(THREE.Material.prototype);THREE.MeshNormalMaterial.prototype.clone=function(){var a=new THREE.MeshNormalMaterial;THREE.Material.prototype.clone.call(this,a);a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;return a};THREE.MeshFaceMaterial=function(a){this.materials=a instanceof Array?a:[]};THREE.MeshFaceMaterial.prototype.clone=function(){return new THREE.MeshFaceMaterial(this.materials.slice(0))};THREE.ParticleBasicMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.map=null;this.size=1;this.sizeAttenuation=!0;this.vertexColors=!1;this.fog=!0;this.setValues(a)};THREE.ParticleBasicMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.ParticleBasicMaterial.prototype.clone=function(){var a=new THREE.ParticleBasicMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.size=this.size;a.sizeAttenuation=this.sizeAttenuation;a.vertexColors=this.vertexColors;a.fog=this.fog;return a};THREE.ShaderMaterial=function(a){THREE.Material.call(this);this.vertexShader=this.fragmentShader="void main() {}";this.uniforms={};this.defines={};this.attributes=null;this.shading=THREE.SmoothShading;this.wireframe=!1;this.wireframeLinewidth=1;this.lights=this.fog=!1;this.vertexColors=THREE.NoColors;this.morphNormals=this.morphTargets=this.skinning=!1;this.setValues(a)};THREE.ShaderMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.ShaderMaterial.prototype.clone=function(){var a=new THREE.ShaderMaterial;THREE.Material.prototype.clone.call(this,a);a.fragmentShader=this.fragmentShader;a.vertexShader=this.vertexShader;a.uniforms=THREE.UniformsUtils.clone(this.uniforms);a.attributes=this.attributes;a.defines=this.defines;a.shading=this.shading;a.wireframe=this.wireframe;a.wireframeLinewidth=this.wireframeLinewidth;a.fog=this.fog;a.lights=this.lights;a.vertexColors=this.vertexColors;a.skinning=this.skinning;a.morphTargets=
this.morphTargets;a.morphNormals=this.morphNormals;return a};THREE.SpriteMaterial=function(a){THREE.Material.call(this);this.color=new THREE.Color(16777215);this.map=new THREE.Texture;this.useScreenCoordinates=!0;this.depthTest=!this.useScreenCoordinates;this.sizeAttenuation=!this.useScreenCoordinates;this.scaleByViewport=!this.sizeAttenuation;this.alignment=THREE.SpriteAlignment.center.clone();this.fog=!1;this.uvOffset=new THREE.Vector2(0,0);this.uvScale=new THREE.Vector2(1,1);this.setValues(a);a=a||{};void 0===a.depthTest&&(this.depthTest=!this.useScreenCoordinates);
void 0===a.sizeAttenuation&&(this.sizeAttenuation=!this.useScreenCoordinates);void 0===a.scaleByViewport&&(this.scaleByViewport=!this.sizeAttenuation)};THREE.SpriteMaterial.prototype=Object.create(THREE.Material.prototype);
THREE.SpriteMaterial.prototype.clone=function(){var a=new THREE.SpriteMaterial;THREE.Material.prototype.clone.call(this,a);a.color.copy(this.color);a.map=this.map;a.useScreenCoordinates=this.useScreenCoordinates;a.sizeAttenuation=this.sizeAttenuation;a.scaleByViewport=this.scaleByViewport;a.alignment.copy(this.alignment);a.uvOffset.copy(this.uvOffset);a.uvScale.copy(this.uvScale);a.fog=this.fog;return a};THREE.SpriteAlignment={};THREE.SpriteAlignment.topLeft=new THREE.Vector2(1,-1);
THREE.SpriteAlignment.topCenter=new THREE.Vector2(0,-1);THREE.SpriteAlignment.topRight=new THREE.Vector2(-1,-1);THREE.SpriteAlignment.centerLeft=new THREE.Vector2(1,0);THREE.SpriteAlignment.center=new THREE.Vector2(0,0);THREE.SpriteAlignment.centerRight=new THREE.Vector2(-1,0);THREE.SpriteAlignment.bottomLeft=new THREE.Vector2(1,1);THREE.SpriteAlignment.bottomCenter=new THREE.Vector2(0,1);THREE.SpriteAlignment.bottomRight=new THREE.Vector2(-1,1);THREE.Texture=function(a,b,c,d,e,g,h,i,j){THREE.EventDispatcher.call(this);this.id=THREE.TextureIdCount++;this.name="";this.image=a;this.mipmaps=[];this.mapping=void 0!==b?b:new THREE.UVMapping;this.wrapS=void 0!==c?c:THREE.ClampToEdgeWrapping;this.wrapT=void 0!==d?d:THREE.ClampToEdgeWrapping;this.magFilter=void 0!==e?e:THREE.LinearFilter;this.minFilter=void 0!==g?g:THREE.LinearMipMapLinearFilter;this.anisotropy=void 0!==j?j:1;this.format=void 0!==h?h:THREE.RGBAFormat;this.type=void 0!==i?i:THREE.UnsignedByteType;
this.offset=new THREE.Vector2(0,0);this.repeat=new THREE.Vector2(1,1);this.generateMipmaps=!0;this.premultiplyAlpha=!1;this.flipY=!0;this.unpackAlignment=4;this.needsUpdate=!1;this.onUpdate=null};
THREE.Texture.prototype={constructor:THREE.Texture,clone:function(a){void 0===a&&(a=new THREE.Texture);a.image=this.image;a.mipmaps=this.mipmaps.slice(0);a.mapping=this.mapping;a.wrapS=this.wrapS;a.wrapT=this.wrapT;a.magFilter=this.magFilter;a.minFilter=this.minFilter;a.anisotropy=this.anisotropy;a.format=this.format;a.type=this.type;a.offset.copy(this.offset);a.repeat.copy(this.repeat);a.generateMipmaps=this.generateMipmaps;a.premultiplyAlpha=this.premultiplyAlpha;a.flipY=this.flipY;a.unpackAlignment=
this.unpackAlignment;return a},dispose:function(){this.dispatchEvent({type:"dispose"})}};THREE.TextureIdCount=0;THREE.CompressedTexture=function(a,b,c,d,e,g,h,i,j,k,n){THREE.Texture.call(this,null,g,h,i,j,k,d,e,n);this.image={width:b,height:c};this.mipmaps=a;this.generateMipmaps=!1};THREE.CompressedTexture.prototype=Object.create(THREE.Texture.prototype);THREE.CompressedTexture.prototype.clone=function(){var a=new THREE.CompressedTexture;THREE.Texture.prototype.clone.call(this,a);return a};THREE.DataTexture=function(a,b,c,d,e,g,h,i,j,k,n){THREE.Texture.call(this,null,g,h,i,j,k,d,e,n);this.image={data:a,width:b,height:c}};THREE.DataTexture.prototype=Object.create(THREE.Texture.prototype);THREE.DataTexture.prototype.clone=function(){var a=new THREE.DataTexture;THREE.Texture.prototype.clone.call(this,a);return a};THREE.Particle=function(a){THREE.Object3D.call(this);this.material=a};THREE.Particle.prototype=Object.create(THREE.Object3D.prototype);THREE.Particle.prototype.clone=function(a){void 0===a&&(a=new THREE.Particle(this.material));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.ParticleSystem=function(a,b){THREE.Object3D.call(this);this.geometry=a;this.material=void 0!==b?b:new THREE.ParticleBasicMaterial({color:16777215*Math.random()});this.sortParticles=!1;this.geometry&&null===this.geometry.boundingSphere&&this.geometry.computeBoundingSphere();this.frustumCulled=!1};THREE.ParticleSystem.prototype=Object.create(THREE.Object3D.prototype);
THREE.ParticleSystem.prototype.clone=function(a){void 0===a&&(a=new THREE.ParticleSystem(this.geometry,this.material));a.sortParticles=this.sortParticles;THREE.Object3D.prototype.clone.call(this,a);return a};THREE.Line=function(a,b,c){THREE.Object3D.call(this);this.geometry=a;this.material=void 0!==b?b:new THREE.LineBasicMaterial({color:16777215*Math.random()});this.type=void 0!==c?c:THREE.LineStrip;this.geometry&&(this.geometry.boundingSphere||this.geometry.computeBoundingSphere())};THREE.LineStrip=0;THREE.LinePieces=1;THREE.Line.prototype=Object.create(THREE.Object3D.prototype);
THREE.Line.prototype.clone=function(a){void 0===a&&(a=new THREE.Line(this.geometry,this.material,this.type));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.Mesh=function(a,b){THREE.Object3D.call(this);this.geometry=a;this.material=void 0!==b?b:new THREE.MeshBasicMaterial({color:16777215*Math.random(),wireframe:!0});void 0!==this.geometry&&(null===this.geometry.boundingSphere&&this.geometry.computeBoundingSphere(),this.updateMorphTargets())};THREE.Mesh.prototype=Object.create(THREE.Object3D.prototype);
THREE.Mesh.prototype.updateMorphTargets=function(){if(0<this.geometry.morphTargets.length){this.morphTargetBase=-1;this.morphTargetForcedOrder=[];this.morphTargetInfluences=[];this.morphTargetDictionary={};for(var a=0,b=this.geometry.morphTargets.length;a<b;a++)this.morphTargetInfluences.push(0),this.morphTargetDictionary[this.geometry.morphTargets[a].name]=a}};
THREE.Mesh.prototype.getMorphTargetIndexByName=function(a){if(void 0!==this.morphTargetDictionary[a])return this.morphTargetDictionary[a];console.log("THREE.Mesh.getMorphTargetIndexByName: morph target "+a+" does not exist. Returning 0.");return 0};THREE.Mesh.prototype.clone=function(a){void 0===a&&(a=new THREE.Mesh(this.geometry,this.material));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.Bone=function(a){THREE.Object3D.call(this);this.skin=a;this.skinMatrix=new THREE.Matrix4};THREE.Bone.prototype=Object.create(THREE.Object3D.prototype);THREE.Bone.prototype.update=function(a,b){this.matrixAutoUpdate&&(b|=this.updateMatrix());if(b||this.matrixWorldNeedsUpdate)a?this.skinMatrix.multiplyMatrices(a,this.matrix):this.skinMatrix.copy(this.matrix),this.matrixWorldNeedsUpdate=!1,b=!0;var c,d=this.children.length;for(c=0;c<d;c++)this.children[c].update(this.skinMatrix,b)};THREE.SkinnedMesh=function(a,b,c){THREE.Mesh.call(this,a,b);this.useVertexTexture=void 0!==c?c:!0;this.identityMatrix=new THREE.Matrix4;this.bones=[];this.boneMatrices=[];var d,e,g;if(this.geometry&&void 0!==this.geometry.bones){for(a=0;a<this.geometry.bones.length;a++)c=this.geometry.bones[a],d=c.pos,e=c.rotq,g=c.scl,b=this.addBone(),b.name=c.name,b.position.set(d[0],d[1],d[2]),b.quaternion.set(e[0],e[1],e[2],e[3]),b.useQuaternion=!0,void 0!==g?b.scale.set(g[0],g[1],g[2]):b.scale.set(1,1,1);for(a=
0;a<this.bones.length;a++)c=this.geometry.bones[a],b=this.bones[a],-1===c.parent?this.add(b):this.bones[c.parent].add(b);a=this.bones.length;this.useVertexTexture?(this.boneTextureHeight=this.boneTextureWidth=a=256<a?64:64<a?32:16<a?16:8,this.boneMatrices=new Float32Array(4*this.boneTextureWidth*this.boneTextureHeight),this.boneTexture=new THREE.DataTexture(this.boneMatrices,this.boneTextureWidth,this.boneTextureHeight,THREE.RGBAFormat,THREE.FloatType),this.boneTexture.minFilter=THREE.NearestFilter,
this.boneTexture.magFilter=THREE.NearestFilter,this.boneTexture.generateMipmaps=!1,this.boneTexture.flipY=!1):this.boneMatrices=new Float32Array(16*a);this.pose()}};THREE.SkinnedMesh.prototype=Object.create(THREE.Mesh.prototype);THREE.SkinnedMesh.prototype.addBone=function(a){void 0===a&&(a=new THREE.Bone(this));this.bones.push(a);return a};
THREE.SkinnedMesh.prototype.updateMatrixWorld=function(a){this.matrixAutoUpdate&&this.updateMatrix();if(this.matrixWorldNeedsUpdate||a)this.parent?this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix):this.matrixWorld.copy(this.matrix),this.matrixWorldNeedsUpdate=!1;for(var a=0,b=this.children.length;a<b;a++){var c=this.children[a];c instanceof THREE.Bone?c.update(this.identityMatrix,!1):c.updateMatrixWorld(!0)}if(void 0==this.boneInverses){this.boneInverses=[];a=0;for(b=this.bones.length;a<
b;a++)c=new THREE.Matrix4,c.getInverse(this.bones[a].skinMatrix),this.boneInverses.push(c)}a=0;for(b=this.bones.length;a<b;a++)THREE.SkinnedMesh.offsetMatrix.multiplyMatrices(this.bones[a].skinMatrix,this.boneInverses[a]),THREE.SkinnedMesh.offsetMatrix.flattenToArrayOffset(this.boneMatrices,16*a);this.useVertexTexture&&(this.boneTexture.needsUpdate=!0)};
THREE.SkinnedMesh.prototype.pose=function(){this.updateMatrixWorld(!0);for(var a=0;a<this.geometry.skinIndices.length;a++){var b=this.geometry.skinWeights[a],c=1/b.lengthManhattan();Infinity!==c?b.multiplyScalar(c):b.set(1)}};THREE.SkinnedMesh.prototype.clone=function(a){void 0===a&&(a=new THREE.SkinnedMesh(this.geometry,this.material,this.useVertexTexture));THREE.Mesh.prototype.clone.call(this,a);return a};THREE.SkinnedMesh.offsetMatrix=new THREE.Matrix4;THREE.MorphAnimMesh=function(a,b){THREE.Mesh.call(this,a,b);this.duration=1E3;this.mirroredLoop=!1;this.currentKeyframe=this.lastKeyframe=this.time=0;this.direction=1;this.directionBackwards=!1;this.setFrameRange(0,this.geometry.morphTargets.length-1)};THREE.MorphAnimMesh.prototype=Object.create(THREE.Mesh.prototype);THREE.MorphAnimMesh.prototype.setFrameRange=function(a,b){this.startKeyframe=a;this.endKeyframe=b;this.length=this.endKeyframe-this.startKeyframe+1};
THREE.MorphAnimMesh.prototype.setDirectionForward=function(){this.direction=1;this.directionBackwards=!1};THREE.MorphAnimMesh.prototype.setDirectionBackward=function(){this.direction=-1;this.directionBackwards=!0};
THREE.MorphAnimMesh.prototype.parseAnimations=function(){var a=this.geometry;a.animations||(a.animations={});for(var b,c=a.animations,d=/([a-z]+)(\d+)/,e=0,g=a.morphTargets.length;e<g;e++){var h=a.morphTargets[e].name.match(d);if(h&&1<h.length){h=h[1];c[h]||(c[h]={start:Infinity,end:-Infinity});var i=c[h];e<i.start&&(i.start=e);e>i.end&&(i.end=e);b||(b=h)}}a.firstAnimation=b};
THREE.MorphAnimMesh.prototype.setAnimationLabel=function(a,b,c){this.geometry.animations||(this.geometry.animations={});this.geometry.animations[a]={start:b,end:c}};THREE.MorphAnimMesh.prototype.playAnimation=function(a,b){var c=this.geometry.animations[a];c?(this.setFrameRange(c.start,c.end),this.duration=1E3*((c.end-c.start)/b),this.time=0):console.warn("animation["+a+"] undefined")};
THREE.MorphAnimMesh.prototype.updateAnimation=function(a){var b=this.duration/this.length;this.time+=this.direction*a;if(this.mirroredLoop){if(this.time>this.duration||0>this.time)this.direction*=-1,this.time>this.duration&&(this.time=this.duration,this.directionBackwards=!0),0>this.time&&(this.time=0,this.directionBackwards=!1)}else this.time%=this.duration,0>this.time&&(this.time+=this.duration);a=this.startKeyframe+THREE.Math.clamp(Math.floor(this.time/b),0,this.length-1);a!==this.currentKeyframe&&
(this.morphTargetInfluences[this.lastKeyframe]=0,this.morphTargetInfluences[this.currentKeyframe]=1,this.morphTargetInfluences[a]=0,this.lastKeyframe=this.currentKeyframe,this.currentKeyframe=a);b=this.time%b/b;this.directionBackwards&&(b=1-b);this.morphTargetInfluences[this.currentKeyframe]=b;this.morphTargetInfluences[this.lastKeyframe]=1-b};
THREE.MorphAnimMesh.prototype.clone=function(a){void 0===a&&(a=new THREE.MorphAnimMesh(this.geometry,this.material));a.duration=this.duration;a.mirroredLoop=this.mirroredLoop;a.time=this.time;a.lastKeyframe=this.lastKeyframe;a.currentKeyframe=this.currentKeyframe;a.direction=this.direction;a.directionBackwards=this.directionBackwards;THREE.Mesh.prototype.clone.call(this,a);return a};THREE.Ribbon=function(a,b){THREE.Object3D.call(this);this.geometry=a;this.material=b};THREE.Ribbon.prototype=Object.create(THREE.Object3D.prototype);THREE.Ribbon.prototype.clone=function(a){void 0===a&&(a=new THREE.Ribbon(this.geometry,this.material));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.LOD=function(){THREE.Object3D.call(this);this.LODs=[]};THREE.LOD.prototype=Object.create(THREE.Object3D.prototype);THREE.LOD.prototype.addLevel=function(a,b){void 0===b&&(b=0);for(var b=Math.abs(b),c=0;c<this.LODs.length&&!(b<this.LODs[c].visibleAtDistance);c++);this.LODs.splice(c,0,{visibleAtDistance:b,object3D:a});this.add(a)};
THREE.LOD.prototype.update=function(a){if(1<this.LODs.length){a.matrixWorldInverse.getInverse(a.matrixWorld);a=a.matrixWorldInverse;a=-(a.elements[2]*this.matrixWorld.elements[12]+a.elements[6]*this.matrixWorld.elements[13]+a.elements[10]*this.matrixWorld.elements[14]+a.elements[14]);this.LODs[0].object3D.visible=!0;for(var b=1;b<this.LODs.length;b++)if(a>=this.LODs[b].visibleAtDistance)this.LODs[b-1].object3D.visible=!1,this.LODs[b].object3D.visible=!0;else break;for(;b<this.LODs.length;b++)this.LODs[b].object3D.visible=
!1}};THREE.LOD.prototype.clone=function(){};THREE.Sprite=function(a){THREE.Object3D.call(this);this.material=void 0!==a?a:new THREE.SpriteMaterial;this.rotation3d=this.rotation;this.rotation=0};THREE.Sprite.prototype=Object.create(THREE.Object3D.prototype);THREE.Sprite.prototype.updateMatrix=function(){this.matrix.setPosition(this.position);this.rotation3d.set(0,0,this.rotation);this.matrix.setRotationFromEuler(this.rotation3d);(1!==this.scale.x||1!==this.scale.y)&&this.matrix.scale(this.scale);this.matrixWorldNeedsUpdate=!0};
THREE.Sprite.prototype.clone=function(a){void 0===a&&(a=new THREE.Sprite(this.material));THREE.Object3D.prototype.clone.call(this,a);return a};THREE.Scene=function(){THREE.Object3D.call(this);this.overrideMaterial=this.fog=null;this.matrixAutoUpdate=!1;this.__objects=[];this.__lights=[];this.__objectsAdded=[];this.__objectsRemoved=[]};THREE.Scene.prototype=Object.create(THREE.Object3D.prototype);
THREE.Scene.prototype.__addObject=function(a){if(a instanceof THREE.Light)-1===this.__lights.indexOf(a)&&this.__lights.push(a),a.target&&void 0===a.target.parent&&this.add(a.target);else if(!(a instanceof THREE.Camera||a instanceof THREE.Bone)&&-1===this.__objects.indexOf(a)){this.__objects.push(a);this.__objectsAdded.push(a);var b=this.__objectsRemoved.indexOf(a);-1!==b&&this.__objectsRemoved.splice(b,1)}for(b=0;b<a.children.length;b++)this.__addObject(a.children[b])};
THREE.Scene.prototype.__removeObject=function(a){if(a instanceof THREE.Light){var b=this.__lights.indexOf(a);-1!==b&&this.__lights.splice(b,1)}else a instanceof THREE.Camera||(b=this.__objects.indexOf(a),-1!==b&&(this.__objects.splice(b,1),this.__objectsRemoved.push(a),b=this.__objectsAdded.indexOf(a),-1!==b&&this.__objectsAdded.splice(b,1)));for(b=0;b<a.children.length;b++)this.__removeObject(a.children[b])};THREE.Fog=function(a,b,c){this.name="";this.color=new THREE.Color(a);this.near=void 0!==b?b:1;this.far=void 0!==c?c:1E3};THREE.Fog.prototype.clone=function(){return new THREE.Fog(this.color.getHex(),this.near,this.far)};THREE.FogExp2=function(a,b){this.name="";this.color=new THREE.Color(a);this.density=void 0!==b?b:2.5E-4};THREE.FogExp2.prototype.clone=function(){return new THREE.FogExp2(this.color.getHex(),this.density)};THREE.ShaderChunk={fog_pars_fragment:"#ifdef USE_FOG\nuniform vec3 fogColor;\n#ifdef FOG_EXP2\nuniform float fogDensity;\n#else\nuniform float fogNear;\nuniform float fogFar;\n#endif\n#endif",fog_fragment:"#ifdef USE_FOG\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\n#ifdef FOG_EXP2\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n#else\nfloat fogFactor = smoothstep( fogNear, fogFar, depth );\n#endif\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n#endif",
envmap_pars_fragment:"#ifdef USE_ENVMAP\nuniform float reflectivity;\nuniform samplerCube envMap;\nuniform float flipEnvMap;\nuniform int combine;\n#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\nuniform bool useRefract;\nuniform float refractionRatio;\n#else\nvarying vec3 vReflect;\n#endif\n#endif",envmap_fragment:"#ifdef USE_ENVMAP\nvec3 reflectVec;\n#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP )\nvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\nif ( useRefract ) {\nreflectVec = refract( cameraToVertex, normal, refractionRatio );\n} else { \nreflectVec = reflect( cameraToVertex, normal );\n}\n#else\nreflectVec = vReflect;\n#endif\n#ifdef DOUBLE_SIDED\nfloat flipNormal = ( -1.0 + 2.0 * float( gl_FrontFacing ) );\nvec4 cubeColor = textureCube( envMap, flipNormal * vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n#else\nvec4 cubeColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n#endif\n#ifdef GAMMA_INPUT\ncubeColor.xyz *= cubeColor.xyz;\n#endif\nif ( combine == 1 ) {\ngl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularStrength * reflectivity );\n} else if ( combine == 2 ) {\ngl_FragColor.xyz += cubeColor.xyz * specularStrength * reflectivity;\n} else {\ngl_FragColor.xyz = mix( gl_FragColor.xyz, gl_FragColor.xyz * cubeColor.xyz, specularStrength * reflectivity );\n}\n#endif",
envmap_pars_vertex:"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )\nvarying vec3 vReflect;\nuniform float refractionRatio;\nuniform bool useRefract;\n#endif",worldpos_vertex:"#if defined( USE_ENVMAP ) || defined( PHONG ) || defined( LAMBERT ) || defined ( USE_SHADOWMAP )\n#ifdef USE_SKINNING\nvec4 worldPosition = modelMatrix * skinned;\n#endif\n#if defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\nvec4 worldPosition = modelMatrix * vec4( morphed, 1.0 );\n#endif\n#if ! defined( USE_MORPHTARGETS ) && ! defined( USE_SKINNING )\nvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\n#endif\n#endif",
envmap_vertex:"#if defined( USE_ENVMAP ) && ! defined( USE_BUMPMAP ) && ! defined( USE_NORMALMAP )\nvec3 worldNormal = mat3( modelMatrix[ 0 ].xyz, modelMatrix[ 1 ].xyz, modelMatrix[ 2 ].xyz ) * objectNormal;\nworldNormal = normalize( worldNormal );\nvec3 cameraToVertex = normalize( worldPosition.xyz - cameraPosition );\nif ( useRefract ) {\nvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n} else {\nvReflect = reflect( cameraToVertex, worldNormal );\n}\n#endif",map_particle_pars_fragment:"#ifdef USE_MAP\nuniform sampler2D map;\n#endif",
map_particle_fragment:"#ifdef USE_MAP\ngl_FragColor = gl_FragColor * texture2D( map, vec2( gl_PointCoord.x, 1.0 - gl_PointCoord.y ) );\n#endif",map_pars_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\nvarying vec2 vUv;\nuniform vec4 offsetRepeat;\n#endif",map_pars_fragment:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\nvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\nuniform sampler2D map;\n#endif",
map_vertex:"#if defined( USE_MAP ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( USE_SPECULARMAP )\nvUv = uv * offsetRepeat.zw + offsetRepeat.xy;\n#endif",map_fragment:"#ifdef USE_MAP\nvec4 texelColor = texture2D( map, vUv );\n#ifdef GAMMA_INPUT\ntexelColor.xyz *= texelColor.xyz;\n#endif\ngl_FragColor = gl_FragColor * texelColor;\n#endif",lightmap_pars_fragment:"#ifdef USE_LIGHTMAP\nvarying vec2 vUv2;\nuniform sampler2D lightMap;\n#endif",lightmap_pars_vertex:"#ifdef USE_LIGHTMAP\nvarying vec2 vUv2;\n#endif",
lightmap_fragment:"#ifdef USE_LIGHTMAP\ngl_FragColor = gl_FragColor * texture2D( lightMap, vUv2 );\n#endif",lightmap_vertex:"#ifdef USE_LIGHTMAP\nvUv2 = uv2;\n#endif",bumpmap_pars_fragment:"#ifdef USE_BUMPMAP\nuniform sampler2D bumpMap;\nuniform float bumpScale;\nvec2 dHdxy_fwd() {\nvec2 dSTdx = dFdx( vUv );\nvec2 dSTdy = dFdy( vUv );\nfloat Hll = bumpScale * texture2D( bumpMap, vUv ).x;\nfloat dBx = bumpScale * texture2D( bumpMap, vUv + dSTdx ).x - Hll;\nfloat dBy = bumpScale * texture2D( bumpMap, vUv + dSTdy ).x - Hll;\nreturn vec2( dBx, dBy );\n}\nvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy ) {\nvec3 vSigmaX = dFdx( surf_pos );\nvec3 vSigmaY = dFdy( surf_pos );\nvec3 vN = surf_norm;\nvec3 R1 = cross( vSigmaY, vN );\nvec3 R2 = cross( vN, vSigmaX );\nfloat fDet = dot( vSigmaX, R1 );\nvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\nreturn normalize( abs( fDet ) * surf_norm - vGrad );\n}\n#endif",
normalmap_pars_fragment:"#ifdef USE_NORMALMAP\nuniform sampler2D normalMap;\nuniform vec2 normalScale;\nvec3 perturbNormal2Arb( vec3 eye_pos, vec3 surf_norm ) {\nvec3 q0 = dFdx( eye_pos.xyz );\nvec3 q1 = dFdy( eye_pos.xyz );\nvec2 st0 = dFdx( vUv.st );\nvec2 st1 = dFdy( vUv.st );\nvec3 S = normalize(  q0 * st1.t - q1 * st0.t );\nvec3 T = normalize( -q0 * st1.s + q1 * st0.s );\nvec3 N = normalize( surf_norm );\nvec3 mapN = texture2D( normalMap, vUv ).xyz * 2.0 - 1.0;\nmapN.xy = normalScale * mapN.xy;\nmat3 tsn = mat3( S, T, N );\nreturn normalize( tsn * mapN );\n}\n#endif",
specularmap_pars_fragment:"#ifdef USE_SPECULARMAP\nuniform sampler2D specularMap;\n#endif",specularmap_fragment:"float specularStrength;\n#ifdef USE_SPECULARMAP\nvec4 texelSpecular = texture2D( specularMap, vUv );\nspecularStrength = texelSpecular.r;\n#else\nspecularStrength = 1.0;\n#endif",lights_lambert_pars_vertex:"uniform vec3 ambient;\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS > 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif",
lights_lambert_vertex:"vLightFront = vec3( 0.0 );\n#ifdef DOUBLE_SIDED\nvLightBack = vec3( 0.0 );\n#endif\ntransformedNormal = normalize( transformedNormal );\n#if MAX_DIR_LIGHTS > 0\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( transformedNormal, dirVector );\nvec3 directionalLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 directionalLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 directionalLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 directionalLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\ndirectionalLightWeighting = mix( directionalLightWeighting, directionalLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\ndirectionalLightWeightingBack = mix( directionalLightWeightingBack, directionalLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += directionalLightColor[ i ] * directionalLightWeighting;\n#ifdef DOUBLE_SIDED\nvLightBack += directionalLightColor[ i ] * directionalLightWeightingBack;\n#endif\n}\n#endif\n#if MAX_POINT_LIGHTS > 0\nfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\nfloat dotProduct = dot( transformedNormal, lVector );\nvec3 pointLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 pointLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 pointLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 pointLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\npointLightWeighting = mix( pointLightWeighting, pointLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\npointLightWeightingBack = mix( pointLightWeightingBack, pointLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += pointLightColor[ i ] * pointLightWeighting * lDistance;\n#ifdef DOUBLE_SIDED\nvLightBack += pointLightColor[ i ] * pointLightWeightingBack * lDistance;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nfor( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - worldPosition.xyz ) );\nif ( spotEffect > spotLightAngleCos[ i ] ) {\nspotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\nfloat dotProduct = dot( transformedNormal, lVector );\nvec3 spotLightWeighting = vec3( max( dotProduct, 0.0 ) );\n#ifdef DOUBLE_SIDED\nvec3 spotLightWeightingBack = vec3( max( -dotProduct, 0.0 ) );\n#ifdef WRAP_AROUND\nvec3 spotLightWeightingHalfBack = vec3( max( -0.5 * dotProduct + 0.5, 0.0 ) );\n#endif\n#endif\n#ifdef WRAP_AROUND\nvec3 spotLightWeightingHalf = vec3( max( 0.5 * dotProduct + 0.5, 0.0 ) );\nspotLightWeighting = mix( spotLightWeighting, spotLightWeightingHalf, wrapRGB );\n#ifdef DOUBLE_SIDED\nspotLightWeightingBack = mix( spotLightWeightingBack, spotLightWeightingHalfBack, wrapRGB );\n#endif\n#endif\nvLightFront += spotLightColor[ i ] * spotLightWeighting * lDistance * spotEffect;\n#ifdef DOUBLE_SIDED\nvLightBack += spotLightColor[ i ] * spotLightWeightingBack * lDistance * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_HEMI_LIGHTS > 0\nfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( transformedNormal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nfloat hemiDiffuseWeightBack = -0.5 * dotProduct + 0.5;\nvLightFront += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\n#ifdef DOUBLE_SIDED\nvLightBack += mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeightBack );\n#endif\n}\n#endif\nvLightFront = vLightFront * diffuse + ambient * ambientLightColor + emissive;\n#ifdef DOUBLE_SIDED\nvLightBack = vLightBack * diffuse + ambient * ambientLightColor + emissive;\n#endif",
lights_phong_pars_vertex:"#ifndef PHONG_PER_PIXEL\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\nvarying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\nvarying vec3 vWorldPosition;\n#endif",
lights_phong_vertex:"#ifndef PHONG_PER_PIXEL\n#if MAX_POINT_LIGHTS > 0\nfor( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nvPointLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nfor( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz - mvPosition.xyz;\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nvSpotLight[ i ] = vec4( lVector, lDistance );\n}\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\nvWorldPosition = worldPosition.xyz;\n#endif",
lights_phong_pars_fragment:"uniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS > 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\n#ifdef PHONG_PER_PIXEL\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#else\nvarying vec4 vPointLight[ MAX_POINT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\n#ifdef PHONG_PER_PIXEL\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n#else\nvarying vec4 vSpotLight[ MAX_SPOT_LIGHTS ];\n#endif\n#endif\n#if MAX_SPOT_LIGHTS > 0 || defined( USE_BUMPMAP )\nvarying vec3 vWorldPosition;\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;",
lights_phong_fragment:"vec3 normal = normalize( vNormal );\nvec3 viewPosition = normalize( vViewPosition );\n#ifdef DOUBLE_SIDED\nnormal = normal * ( -1.0 + 2.0 * float( gl_FrontFacing ) );\n#endif\n#ifdef USE_NORMALMAP\nnormal = perturbNormal2Arb( -viewPosition, normal );\n#elif defined( USE_BUMPMAP )\nnormal = perturbNormalArb( -vViewPosition, normal, dHdxy_fwd() );\n#endif\n#if MAX_POINT_LIGHTS > 0\nvec3 pointDiffuse  = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\n#ifdef PHONG_PER_PIXEL\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat lDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / pointLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\n#else\nvec3 lVector = normalize( vPointLight[ i ].xyz );\nfloat lDistance = vPointLight[ i ].w;\n#endif\nfloat dotProduct = dot( normal, lVector );\n#ifdef WRAP_AROUND\nfloat pointDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat pointDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n#else\nfloat pointDiffuseWeight = max( dotProduct, 0.0 );\n#endif\npointDiffuse  += diffuse * pointLightColor[ i ] * pointDiffuseWeight * lDistance;\nvec3 pointHalfVector = normalize( lVector + viewPosition );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = specularStrength * max( pow( pointDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, pointHalfVector ), 5.0 );\npointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance * specularNormalization;\n#else\npointSpecular += specular * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * lDistance;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nvec3 spotDiffuse  = vec3( 0.0 );\nvec3 spotSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\n#ifdef PHONG_PER_PIXEL\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 lVector = lPosition.xyz + vViewPosition.xyz;\nfloat lDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nlDistance = 1.0 - min( ( length( lVector ) / spotLightDistance[ i ] ), 1.0 );\nlVector = normalize( lVector );\n#else\nvec3 lVector = normalize( vSpotLight[ i ].xyz );\nfloat lDistance = vSpotLight[ i ].w;\n#endif\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\nif ( spotEffect > spotLightAngleCos[ i ] ) {\nspotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\nfloat dotProduct = dot( normal, lVector );\n#ifdef WRAP_AROUND\nfloat spotDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat spotDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n#else\nfloat spotDiffuseWeight = max( dotProduct, 0.0 );\n#endif\nspotDiffuse += diffuse * spotLightColor[ i ] * spotDiffuseWeight * lDistance * spotEffect;\nvec3 spotHalfVector = normalize( lVector + viewPosition );\nfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\nfloat spotSpecularWeight = specularStrength * max( pow( spotDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, spotHalfVector ), 5.0 );\nspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * specularNormalization * spotEffect;\n#else\nspotSpecular += specular * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * lDistance * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_DIR_LIGHTS > 0\nvec3 dirDiffuse  = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_DIR_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, dirVector );\n#ifdef WRAP_AROUND\nfloat dirDiffuseWeightFull = max( dotProduct, 0.0 );\nfloat dirDiffuseWeightHalf = max( 0.5 * dotProduct + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( dirDiffuseWeightFull ), vec3( dirDiffuseWeightHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dotProduct, 0.0 );\n#endif\ndirDiffuse  += diffuse * directionalLightColor[ i ] * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewPosition );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = specularStrength * max( pow( dirDotNormalHalf, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlick = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\ndirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n#else\ndirSpecular += specular * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_HEMI_LIGHTS > 0\nvec3 hemiDiffuse  = vec3( 0.0 );\nvec3 hemiSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\nhemiDiffuse += diffuse * hemiColor;\nvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\nfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\nfloat hemiSpecularWeightSky = specularStrength * max( pow( hemiDotNormalHalfSky, shininess ), 0.0 );\nvec3 lVectorGround = -lVector;\nvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\nfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\nfloat hemiSpecularWeightGround = specularStrength * max( pow( hemiDotNormalHalfGround, shininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat dotProductGround = dot( normal, lVectorGround );\nfloat specularNormalization = ( shininess + 2.0001 ) / 8.0;\nvec3 schlickSky = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );\nvec3 schlickGround = specular + vec3( 1.0 - specular ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );\nhemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n#else\nhemiSpecular += specular * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;\n#endif\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS > 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_HEMI_LIGHTS > 0\ntotalDiffuse += hemiDiffuse;\ntotalSpecular += hemiSpecular;\n#endif\n#if MAX_POINT_LIGHTS > 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\n#if MAX_SPOT_LIGHTS > 0\ntotalDiffuse += spotDiffuse;\ntotalSpecular += spotSpecular;\n#endif\n#ifdef METAL\ngl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient + totalSpecular );\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * ( emissive + totalDiffuse + ambientLightColor * ambient ) + totalSpecular;\n#endif",
color_pars_fragment:"#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif",color_fragment:"#ifdef USE_COLOR\ngl_FragColor = gl_FragColor * vec4( vColor, opacity );\n#endif",color_pars_vertex:"#ifdef USE_COLOR\nvarying vec3 vColor;\n#endif",color_vertex:"#ifdef USE_COLOR\n#ifdef GAMMA_INPUT\nvColor = color * color;\n#else\nvColor = color;\n#endif\n#endif",skinning_pars_vertex:"#ifdef USE_SKINNING\n#ifdef BONE_TEXTURE\nuniform sampler2D boneTexture;\nmat4 getBoneMatrix( const in float i ) {\nfloat j = i * 4.0;\nfloat x = mod( j, N_BONE_PIXEL_X );\nfloat y = floor( j / N_BONE_PIXEL_X );\nconst float dx = 1.0 / N_BONE_PIXEL_X;\nconst float dy = 1.0 / N_BONE_PIXEL_Y;\ny = dy * ( y + 0.5 );\nvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\nvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\nvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\nvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\nmat4 bone = mat4( v1, v2, v3, v4 );\nreturn bone;\n}\n#else\nuniform mat4 boneGlobalMatrices[ MAX_BONES ];\nmat4 getBoneMatrix( const in float i ) {\nmat4 bone = boneGlobalMatrices[ int(i) ];\nreturn bone;\n}\n#endif\n#endif",
skinbase_vertex:"#ifdef USE_SKINNING\nmat4 boneMatX = getBoneMatrix( skinIndex.x );\nmat4 boneMatY = getBoneMatrix( skinIndex.y );\n#endif",skinning_vertex:"#ifdef USE_SKINNING\n#ifdef USE_MORPHTARGETS\nvec4 skinVertex = vec4( morphed, 1.0 );\n#else\nvec4 skinVertex = vec4( position, 1.0 );\n#endif\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned \t  += boneMatY * skinVertex * skinWeight.y;\n#endif",morphtarget_pars_vertex:"#ifdef USE_MORPHTARGETS\n#ifndef USE_MORPHNORMALS\nuniform float morphTargetInfluences[ 8 ];\n#else\nuniform float morphTargetInfluences[ 4 ];\n#endif\n#endif",
morphtarget_vertex:"#ifdef USE_MORPHTARGETS\nvec3 morphed = vec3( 0.0 );\nmorphed += ( morphTarget0 - position ) * morphTargetInfluences[ 0 ];\nmorphed += ( morphTarget1 - position ) * morphTargetInfluences[ 1 ];\nmorphed += ( morphTarget2 - position ) * morphTargetInfluences[ 2 ];\nmorphed += ( morphTarget3 - position ) * morphTargetInfluences[ 3 ];\n#ifndef USE_MORPHNORMALS\nmorphed += ( morphTarget4 - position ) * morphTargetInfluences[ 4 ];\nmorphed += ( morphTarget5 - position ) * morphTargetInfluences[ 5 ];\nmorphed += ( morphTarget6 - position ) * morphTargetInfluences[ 6 ];\nmorphed += ( morphTarget7 - position ) * morphTargetInfluences[ 7 ];\n#endif\nmorphed += position;\n#endif",
default_vertex:"vec4 mvPosition;\n#ifdef USE_SKINNING\nmvPosition = modelViewMatrix * skinned;\n#endif\n#if !defined( USE_SKINNING ) && defined( USE_MORPHTARGETS )\nmvPosition = modelViewMatrix * vec4( morphed, 1.0 );\n#endif\n#if !defined( USE_SKINNING ) && ! defined( USE_MORPHTARGETS )\nmvPosition = modelViewMatrix * vec4( position, 1.0 );\n#endif\ngl_Position = projectionMatrix * mvPosition;",morphnormal_vertex:"#ifdef USE_MORPHNORMALS\nvec3 morphedNormal = vec3( 0.0 );\nmorphedNormal +=  ( morphNormal0 - normal ) * morphTargetInfluences[ 0 ];\nmorphedNormal +=  ( morphNormal1 - normal ) * morphTargetInfluences[ 1 ];\nmorphedNormal +=  ( morphNormal2 - normal ) * morphTargetInfluences[ 2 ];\nmorphedNormal +=  ( morphNormal3 - normal ) * morphTargetInfluences[ 3 ];\nmorphedNormal += normal;\n#endif",
skinnormal_vertex:"#ifdef USE_SKINNING\nmat4 skinMatrix = skinWeight.x * boneMatX;\nskinMatrix \t+= skinWeight.y * boneMatY;\n#ifdef USE_MORPHNORMALS\nvec4 skinnedNormal = skinMatrix * vec4( morphedNormal, 0.0 );\n#else\nvec4 skinnedNormal = skinMatrix * vec4( normal, 0.0 );\n#endif\n#endif",defaultnormal_vertex:"vec3 objectNormal;\n#ifdef USE_SKINNING\nobjectNormal = skinnedNormal.xyz;\n#endif\n#if !defined( USE_SKINNING ) && defined( USE_MORPHNORMALS )\nobjectNormal = morphedNormal;\n#endif\n#if !defined( USE_SKINNING ) && ! defined( USE_MORPHNORMALS )\nobjectNormal = normal;\n#endif\n#ifdef FLIP_SIDED\nobjectNormal = -objectNormal;\n#endif\nvec3 transformedNormal = normalMatrix * objectNormal;",
shadowmap_pars_fragment:"#ifdef USE_SHADOWMAP\nuniform sampler2D shadowMap[ MAX_SHADOWS ];\nuniform vec2 shadowMapSize[ MAX_SHADOWS ];\nuniform float shadowDarkness[ MAX_SHADOWS ];\nuniform float shadowBias[ MAX_SHADOWS ];\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nfloat unpackDepth( const in vec4 rgba_depth ) {\nconst vec4 bit_shift = vec4( 1.0 / ( 256.0 * 256.0 * 256.0 ), 1.0 / ( 256.0 * 256.0 ), 1.0 / 256.0, 1.0 );\nfloat depth = dot( rgba_depth, bit_shift );\nreturn depth;\n}\n#endif",shadowmap_fragment:"#ifdef USE_SHADOWMAP\n#ifdef SHADOWMAP_DEBUG\nvec3 frustumColors[3];\nfrustumColors[0] = vec3( 1.0, 0.5, 0.0 );\nfrustumColors[1] = vec3( 0.0, 1.0, 0.8 );\nfrustumColors[2] = vec3( 0.0, 0.5, 1.0 );\n#endif\n#ifdef SHADOWMAP_CASCADE\nint inFrustumCount = 0;\n#endif\nfloat fDepth;\nvec3 shadowColor = vec3( 1.0 );\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvec3 shadowCoord = vShadowCoord[ i ].xyz / vShadowCoord[ i ].w;\nbvec4 inFrustumVec = bvec4 ( shadowCoord.x >= 0.0, shadowCoord.x <= 1.0, shadowCoord.y >= 0.0, shadowCoord.y <= 1.0 );\nbool inFrustum = all( inFrustumVec );\n#ifdef SHADOWMAP_CASCADE\ninFrustumCount += int( inFrustum );\nbvec3 frustumTestVec = bvec3( inFrustum, inFrustumCount == 1, shadowCoord.z <= 1.0 );\n#else\nbvec2 frustumTestVec = bvec2( inFrustum, shadowCoord.z <= 1.0 );\n#endif\nbool frustumTest = all( frustumTestVec );\nif ( frustumTest ) {\nshadowCoord.z += shadowBias[ i ];\n#if defined( SHADOWMAP_TYPE_PCF )\nfloat shadow = 0.0;\nconst float shadowDelta = 1.0 / 9.0;\nfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\nfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\nfloat dx0 = -1.25 * xPixelOffset;\nfloat dy0 = -1.25 * yPixelOffset;\nfloat dx1 = 1.25 * xPixelOffset;\nfloat dy1 = 1.25 * yPixelOffset;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nfDepth = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\nif ( fDepth < shadowCoord.z ) shadow += shadowDelta;\nshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\nfloat shadow = 0.0;\nfloat xPixelOffset = 1.0 / shadowMapSize[ i ].x;\nfloat yPixelOffset = 1.0 / shadowMapSize[ i ].y;\nfloat dx0 = -1.0 * xPixelOffset;\nfloat dy0 = -1.0 * yPixelOffset;\nfloat dx1 = 1.0 * xPixelOffset;\nfloat dy1 = 1.0 * yPixelOffset;\nmat3 shadowKernel;\nmat3 depthKernel;\ndepthKernel[0][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, dy0 ) ) );\nif ( depthKernel[0][0] < shadowCoord.z ) shadowKernel[0][0] = 0.25;\nelse shadowKernel[0][0] = 0.0;\ndepthKernel[0][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx0, 0.0 ) ) );\nif ( depthKernel[0][1] < shadowCoord.z ) shadowKernel[0][1] = 0.25;\nelse shadowKernel[0][1] = 0.0;\ndepthKernel[0][2] = unpackDepth( texture2D( shadowMap[ i], shadowCoord.xy + vec2( dx0, dy1 ) ) );\nif ( depthKernel[0][2] < shadowCoord.z ) shadowKernel[0][2] = 0.25;\nelse shadowKernel[0][2] = 0.0;\ndepthKernel[1][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy0 ) ) );\nif ( depthKernel[1][0] < shadowCoord.z ) shadowKernel[1][0] = 0.25;\nelse shadowKernel[1][0] = 0.0;\ndepthKernel[1][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy ) );\nif ( depthKernel[1][1] < shadowCoord.z ) shadowKernel[1][1] = 0.25;\nelse shadowKernel[1][1] = 0.0;\ndepthKernel[1][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( 0.0, dy1 ) ) );\nif ( depthKernel[1][2] < shadowCoord.z ) shadowKernel[1][2] = 0.25;\nelse shadowKernel[1][2] = 0.0;\ndepthKernel[2][0] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy0 ) ) );\nif ( depthKernel[2][0] < shadowCoord.z ) shadowKernel[2][0] = 0.25;\nelse shadowKernel[2][0] = 0.0;\ndepthKernel[2][1] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, 0.0 ) ) );\nif ( depthKernel[2][1] < shadowCoord.z ) shadowKernel[2][1] = 0.25;\nelse shadowKernel[2][1] = 0.0;\ndepthKernel[2][2] = unpackDepth( texture2D( shadowMap[ i ], shadowCoord.xy + vec2( dx1, dy1 ) ) );\nif ( depthKernel[2][2] < shadowCoord.z ) shadowKernel[2][2] = 0.25;\nelse shadowKernel[2][2] = 0.0;\nvec2 fractionalCoord = 1.0 - fract( shadowCoord.xy * shadowMapSize[i].xy );\nshadowKernel[0] = mix( shadowKernel[1], shadowKernel[0], fractionalCoord.x );\nshadowKernel[1] = mix( shadowKernel[2], shadowKernel[1], fractionalCoord.x );\nvec4 shadowValues;\nshadowValues.x = mix( shadowKernel[0][1], shadowKernel[0][0], fractionalCoord.y );\nshadowValues.y = mix( shadowKernel[0][2], shadowKernel[0][1], fractionalCoord.y );\nshadowValues.z = mix( shadowKernel[1][1], shadowKernel[1][0], fractionalCoord.y );\nshadowValues.w = mix( shadowKernel[1][2], shadowKernel[1][1], fractionalCoord.y );\nshadow = dot( shadowValues, vec4( 1.0 ) );\nshadowColor = shadowColor * vec3( ( 1.0 - shadowDarkness[ i ] * shadow ) );\n#else\nvec4 rgbaDepth = texture2D( shadowMap[ i ], shadowCoord.xy );\nfloat fDepth = unpackDepth( rgbaDepth );\nif ( fDepth < shadowCoord.z )\nshadowColor = shadowColor * vec3( 1.0 - shadowDarkness[ i ] );\n#endif\n}\n#ifdef SHADOWMAP_DEBUG\n#ifdef SHADOWMAP_CASCADE\nif ( inFrustum && inFrustumCount == 1 ) gl_FragColor.xyz *= frustumColors[ i ];\n#else\nif ( inFrustum ) gl_FragColor.xyz *= frustumColors[ i ];\n#endif\n#endif\n}\n#ifdef GAMMA_OUTPUT\nshadowColor *= shadowColor;\n#endif\ngl_FragColor.xyz = gl_FragColor.xyz * shadowColor;\n#endif",
shadowmap_pars_vertex:"#ifdef USE_SHADOWMAP\nvarying vec4 vShadowCoord[ MAX_SHADOWS ];\nuniform mat4 shadowMatrix[ MAX_SHADOWS ];\n#endif",shadowmap_vertex:"#ifdef USE_SHADOWMAP\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n}\n#endif",alphatest_fragment:"#ifdef ALPHATEST\nif ( gl_FragColor.a < ALPHATEST ) discard;\n#endif",linear_to_gamma_fragment:"#ifdef GAMMA_OUTPUT\ngl_FragColor.xyz = sqrt( gl_FragColor.xyz );\n#endif"};
THREE.UniformsUtils={merge:function(a){var b,c,d,e={};for(b=0;b<a.length;b++)for(c in d=this.clone(a[b]),d)e[c]=d[c];return e},clone:function(a){var b,c,d,e={};for(b in a)for(c in e[b]={},a[b])d=a[b][c],e[b][c]=d instanceof THREE.Color||d instanceof THREE.Vector2||d instanceof THREE.Vector3||d instanceof THREE.Vector4||d instanceof THREE.Matrix4||d instanceof THREE.Texture?d.clone():d instanceof Array?d.slice():d;return e}};
THREE.UniformsLib={common:{diffuse:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},map:{type:"t",value:null},offsetRepeat:{type:"v4",value:new THREE.Vector4(0,0,1,1)},lightMap:{type:"t",value:null},specularMap:{type:"t",value:null},envMap:{type:"t",value:null},flipEnvMap:{type:"f",value:-1},useRefract:{type:"i",value:0},reflectivity:{type:"f",value:1},refractionRatio:{type:"f",value:0.98},combine:{type:"i",value:0},morphTargetInfluences:{type:"f",value:0}},bump:{bumpMap:{type:"t",
value:null},bumpScale:{type:"f",value:1}},normalmap:{normalMap:{type:"t",value:null},normalScale:{type:"v2",value:new THREE.Vector2(1,1)}},fog:{fogDensity:{type:"f",value:2.5E-4},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},fogColor:{type:"c",value:new THREE.Color(16777215)}},lights:{ambientLightColor:{type:"fv",value:[]},directionalLightDirection:{type:"fv",value:[]},directionalLightColor:{type:"fv",value:[]},hemisphereLightDirection:{type:"fv",value:[]},hemisphereLightSkyColor:{type:"fv",
value:[]},hemisphereLightGroundColor:{type:"fv",value:[]},pointLightColor:{type:"fv",value:[]},pointLightPosition:{type:"fv",value:[]},pointLightDistance:{type:"fv1",value:[]},spotLightColor:{type:"fv",value:[]},spotLightPosition:{type:"fv",value:[]},spotLightDirection:{type:"fv",value:[]},spotLightDistance:{type:"fv1",value:[]},spotLightAngleCos:{type:"fv1",value:[]},spotLightExponent:{type:"fv1",value:[]}},particle:{psColor:{type:"c",value:new THREE.Color(15658734)},opacity:{type:"f",value:1},size:{type:"f",
value:1},scale:{type:"f",value:1},map:{type:"t",value:null},fogDensity:{type:"f",value:2.5E-4},fogNear:{type:"f",value:1},fogFar:{type:"f",value:2E3},fogColor:{type:"c",value:new THREE.Color(16777215)}},shadowmap:{shadowMap:{type:"tv",value:[]},shadowMapSize:{type:"v2v",value:[]},shadowBias:{type:"fv1",value:[]},shadowDarkness:{type:"fv1",value:[]},shadowMatrix:{type:"m4v",value:[]}}};
THREE.ShaderLib={basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.shadowmap]),vertexShader:[THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,
THREE.ShaderChunk.skinbase_vertex,"#ifdef USE_ENVMAP",THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"#endif",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,
THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,"void main() {\ngl_FragColor = vec4( diffuse, opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,
THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},lambert:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{ambient:{type:"c",value:new THREE.Color(16777215)},emissive:{type:"c",value:new THREE.Color(0)},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["#define LAMBERT\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\n#endif",
THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_lambert_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,
THREE.ShaderChunk.defaultnormal_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,THREE.ShaderChunk.lights_lambert_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform float opacity;\nvarying vec3 vLightFront;\n#ifdef DOUBLE_SIDED\nvarying vec3 vLightBack;\n#endif",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,
THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3 ( 1.0 ), opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,"#ifdef DOUBLE_SIDED\nif ( gl_FrontFacing )\ngl_FragColor.xyz *= vLightFront;\nelse\ngl_FragColor.xyz *= vLightBack;\n#else\ngl_FragColor.xyz *= vLightFront;\n#endif",THREE.ShaderChunk.lightmap_fragment,
THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},phong:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.bump,THREE.UniformsLib.normalmap,THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{ambient:{type:"c",value:new THREE.Color(16777215)},emissive:{type:"c",value:new THREE.Color(0)},specular:{type:"c",
value:new THREE.Color(1118481)},shininess:{type:"f",value:30},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),vertexShader:["#define PHONG\nvarying vec3 vViewPosition;\nvarying vec3 vNormal;",THREE.ShaderChunk.map_pars_vertex,THREE.ShaderChunk.lightmap_pars_vertex,THREE.ShaderChunk.envmap_pars_vertex,THREE.ShaderChunk.lights_phong_pars_vertex,THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,
"void main() {",THREE.ShaderChunk.map_vertex,THREE.ShaderChunk.lightmap_vertex,THREE.ShaderChunk.color_vertex,THREE.ShaderChunk.morphnormal_vertex,THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,THREE.ShaderChunk.defaultnormal_vertex,"vNormal = normalize( transformedNormal );",THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,"vViewPosition = -mvPosition.xyz;",THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.envmap_vertex,
THREE.ShaderChunk.lights_phong_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;\nuniform vec3 ambient;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_pars_fragment,THREE.ShaderChunk.lightmap_pars_fragment,THREE.ShaderChunk.envmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.lights_phong_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,
THREE.ShaderChunk.bumpmap_pars_fragment,THREE.ShaderChunk.normalmap_pars_fragment,THREE.ShaderChunk.specularmap_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3 ( 1.0 ), opacity );",THREE.ShaderChunk.map_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.specularmap_fragment,THREE.ShaderChunk.lights_phong_fragment,THREE.ShaderChunk.lightmap_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.envmap_fragment,THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,
THREE.ShaderChunk.fog_fragment,"}"].join("\n")},particle_basic:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.particle,THREE.UniformsLib.shadowmap]),vertexShader:["uniform float size;\nuniform float scale;",THREE.ShaderChunk.color_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.color_vertex,"vec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\n#ifdef USE_SIZEATTENUATION\ngl_PointSize = size * ( scale / length( mvPosition.xyz ) );\n#else\ngl_PointSize = size;\n#endif\ngl_Position = projectionMatrix * mvPosition;",
THREE.ShaderChunk.worldpos_vertex,THREE.ShaderChunk.shadowmap_vertex,"}"].join("\n"),fragmentShader:["uniform vec3 psColor;\nuniform float opacity;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.map_particle_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,THREE.ShaderChunk.shadowmap_pars_fragment,"void main() {\ngl_FragColor = vec4( psColor, opacity );",THREE.ShaderChunk.map_particle_fragment,THREE.ShaderChunk.alphatest_fragment,THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.shadowmap_fragment,
THREE.ShaderChunk.fog_fragment,"}"].join("\n")},dashed:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.common,THREE.UniformsLib.fog,{scale:{type:"f",value:1},dashSize:{type:"f",value:1},totalSize:{type:"f",value:2}}]),vertexShader:["uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;",THREE.ShaderChunk.color_pars_vertex,"void main() {",THREE.ShaderChunk.color_vertex,"vLineDistance = scale * lineDistance;\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\n}"].join("\n"),
fragmentShader:["uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;",THREE.ShaderChunk.color_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,"void main() {\nif ( mod( vLineDistance, totalSize ) > dashSize ) {\ndiscard;\n}\ngl_FragColor = vec4( diffuse, opacity );",THREE.ShaderChunk.color_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n")},depth:{uniforms:{mNear:{type:"f",value:1},mFar:{type:"f",value:2E3},opacity:{type:"f",
value:1}},vertexShader:"void main() {\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform float mNear;\nuniform float mFar;\nuniform float opacity;\nvoid main() {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat color = 1.0 - smoothstep( mNear, mFar, depth );\ngl_FragColor = vec4( vec3( color ), opacity );\n}"},normal:{uniforms:{opacity:{type:"f",value:1}},vertexShader:"varying vec3 vNormal;\nvoid main() {\nvec4 mvPosition = modelViewMatrix * vec4( position, 1.0 );\nvNormal = normalize( normalMatrix * normal );\ngl_Position = projectionMatrix * mvPosition;\n}",
fragmentShader:"uniform float opacity;\nvarying vec3 vNormal;\nvoid main() {\ngl_FragColor = vec4( 0.5 * normalize( vNormal ) + 0.5, opacity );\n}"},normalmap:{uniforms:THREE.UniformsUtils.merge([THREE.UniformsLib.fog,THREE.UniformsLib.lights,THREE.UniformsLib.shadowmap,{enableAO:{type:"i",value:0},enableDiffuse:{type:"i",value:0},enableSpecular:{type:"i",value:0},enableReflection:{type:"i",value:0},enableDisplacement:{type:"i",value:0},tDisplacement:{type:"t",value:null},tDiffuse:{type:"t",value:null},
tCube:{type:"t",value:null},tNormal:{type:"t",value:null},tSpecular:{type:"t",value:null},tAO:{type:"t",value:null},uNormalScale:{type:"v2",value:new THREE.Vector2(1,1)},uDisplacementBias:{type:"f",value:0},uDisplacementScale:{type:"f",value:1},uDiffuseColor:{type:"c",value:new THREE.Color(16777215)},uSpecularColor:{type:"c",value:new THREE.Color(1118481)},uAmbientColor:{type:"c",value:new THREE.Color(16777215)},uShininess:{type:"f",value:30},uOpacity:{type:"f",value:1},useRefract:{type:"i",value:0},
uRefractionRatio:{type:"f",value:0.98},uReflectivity:{type:"f",value:0.5},uOffset:{type:"v2",value:new THREE.Vector2(0,0)},uRepeat:{type:"v2",value:new THREE.Vector2(1,1)},wrapRGB:{type:"v3",value:new THREE.Vector3(1,1,1)}}]),fragmentShader:["uniform vec3 uAmbientColor;\nuniform vec3 uDiffuseColor;\nuniform vec3 uSpecularColor;\nuniform float uShininess;\nuniform float uOpacity;\nuniform bool enableDiffuse;\nuniform bool enableSpecular;\nuniform bool enableAO;\nuniform bool enableReflection;\nuniform sampler2D tDiffuse;\nuniform sampler2D tNormal;\nuniform sampler2D tSpecular;\nuniform sampler2D tAO;\nuniform samplerCube tCube;\nuniform vec2 uNormalScale;\nuniform bool useRefract;\nuniform float uRefractionRatio;\nuniform float uReflectivity;\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nuniform vec3 ambientLightColor;\n#if MAX_DIR_LIGHTS > 0\nuniform vec3 directionalLightColor[ MAX_DIR_LIGHTS ];\nuniform vec3 directionalLightDirection[ MAX_DIR_LIGHTS ];\n#endif\n#if MAX_HEMI_LIGHTS > 0\nuniform vec3 hemisphereLightSkyColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightGroundColor[ MAX_HEMI_LIGHTS ];\nuniform vec3 hemisphereLightDirection[ MAX_HEMI_LIGHTS ];\n#endif\n#if MAX_POINT_LIGHTS > 0\nuniform vec3 pointLightColor[ MAX_POINT_LIGHTS ];\nuniform vec3 pointLightPosition[ MAX_POINT_LIGHTS ];\nuniform float pointLightDistance[ MAX_POINT_LIGHTS ];\n#endif\n#if MAX_SPOT_LIGHTS > 0\nuniform vec3 spotLightColor[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightPosition[ MAX_SPOT_LIGHTS ];\nuniform vec3 spotLightDirection[ MAX_SPOT_LIGHTS ];\nuniform float spotLightAngleCos[ MAX_SPOT_LIGHTS ];\nuniform float spotLightExponent[ MAX_SPOT_LIGHTS ];\nuniform float spotLightDistance[ MAX_SPOT_LIGHTS ];\n#endif\n#ifdef WRAP_AROUND\nuniform vec3 wrapRGB;\n#endif\nvarying vec3 vWorldPosition;\nvarying vec3 vViewPosition;",
THREE.ShaderChunk.shadowmap_pars_fragment,THREE.ShaderChunk.fog_pars_fragment,"void main() {\ngl_FragColor = vec4( vec3( 1.0 ), uOpacity );\nvec3 specularTex = vec3( 1.0 );\nvec3 normalTex = texture2D( tNormal, vUv ).xyz * 2.0 - 1.0;\nnormalTex.xy *= uNormalScale;\nnormalTex = normalize( normalTex );\nif( enableDiffuse ) {\n#ifdef GAMMA_INPUT\nvec4 texelColor = texture2D( tDiffuse, vUv );\ntexelColor.xyz *= texelColor.xyz;\ngl_FragColor = gl_FragColor * texelColor;\n#else\ngl_FragColor = gl_FragColor * texture2D( tDiffuse, vUv );\n#endif\n}\nif( enableAO ) {\n#ifdef GAMMA_INPUT\nvec4 aoColor = texture2D( tAO, vUv );\naoColor.xyz *= aoColor.xyz;\ngl_FragColor.xyz = gl_FragColor.xyz * aoColor.xyz;\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * texture2D( tAO, vUv ).xyz;\n#endif\n}\nif( enableSpecular )\nspecularTex = texture2D( tSpecular, vUv ).xyz;\nmat3 tsb = mat3( normalize( vTangent ), normalize( vBinormal ), normalize( vNormal ) );\nvec3 finalNormal = tsb * normalTex;\n#ifdef FLIP_SIDED\nfinalNormal = -finalNormal;\n#endif\nvec3 normal = normalize( finalNormal );\nvec3 viewPosition = normalize( vViewPosition );\n#if MAX_POINT_LIGHTS > 0\nvec3 pointDiffuse = vec3( 0.0 );\nvec3 pointSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_POINT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( pointLightPosition[ i ], 1.0 );\nvec3 pointVector = lPosition.xyz + vViewPosition.xyz;\nfloat pointDistance = 1.0;\nif ( pointLightDistance[ i ] > 0.0 )\npointDistance = 1.0 - min( ( length( pointVector ) / pointLightDistance[ i ] ), 1.0 );\npointVector = normalize( pointVector );\n#ifdef WRAP_AROUND\nfloat pointDiffuseWeightFull = max( dot( normal, pointVector ), 0.0 );\nfloat pointDiffuseWeightHalf = max( 0.5 * dot( normal, pointVector ) + 0.5, 0.0 );\nvec3 pointDiffuseWeight = mix( vec3 ( pointDiffuseWeightFull ), vec3( pointDiffuseWeightHalf ), wrapRGB );\n#else\nfloat pointDiffuseWeight = max( dot( normal, pointVector ), 0.0 );\n#endif\npointDiffuse += pointDistance * pointLightColor[ i ] * uDiffuseColor * pointDiffuseWeight;\nvec3 pointHalfVector = normalize( pointVector + viewPosition );\nfloat pointDotNormalHalf = max( dot( normal, pointHalfVector ), 0.0 );\nfloat pointSpecularWeight = specularTex.r * max( pow( pointDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( pointVector, pointHalfVector ), 5.0 );\npointSpecular += schlick * pointLightColor[ i ] * pointSpecularWeight * pointDiffuseWeight * pointDistance * specularNormalization;\n#else\npointSpecular += pointDistance * pointLightColor[ i ] * uSpecularColor * pointSpecularWeight * pointDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_SPOT_LIGHTS > 0\nvec3 spotDiffuse = vec3( 0.0 );\nvec3 spotSpecular = vec3( 0.0 );\nfor ( int i = 0; i < MAX_SPOT_LIGHTS; i ++ ) {\nvec4 lPosition = viewMatrix * vec4( spotLightPosition[ i ], 1.0 );\nvec3 spotVector = lPosition.xyz + vViewPosition.xyz;\nfloat spotDistance = 1.0;\nif ( spotLightDistance[ i ] > 0.0 )\nspotDistance = 1.0 - min( ( length( spotVector ) / spotLightDistance[ i ] ), 1.0 );\nspotVector = normalize( spotVector );\nfloat spotEffect = dot( spotLightDirection[ i ], normalize( spotLightPosition[ i ] - vWorldPosition ) );\nif ( spotEffect > spotLightAngleCos[ i ] ) {\nspotEffect = max( pow( spotEffect, spotLightExponent[ i ] ), 0.0 );\n#ifdef WRAP_AROUND\nfloat spotDiffuseWeightFull = max( dot( normal, spotVector ), 0.0 );\nfloat spotDiffuseWeightHalf = max( 0.5 * dot( normal, spotVector ) + 0.5, 0.0 );\nvec3 spotDiffuseWeight = mix( vec3 ( spotDiffuseWeightFull ), vec3( spotDiffuseWeightHalf ), wrapRGB );\n#else\nfloat spotDiffuseWeight = max( dot( normal, spotVector ), 0.0 );\n#endif\nspotDiffuse += spotDistance * spotLightColor[ i ] * uDiffuseColor * spotDiffuseWeight * spotEffect;\nvec3 spotHalfVector = normalize( spotVector + viewPosition );\nfloat spotDotNormalHalf = max( dot( normal, spotHalfVector ), 0.0 );\nfloat spotSpecularWeight = specularTex.r * max( pow( spotDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( spotVector, spotHalfVector ), 5.0 );\nspotSpecular += schlick * spotLightColor[ i ] * spotSpecularWeight * spotDiffuseWeight * spotDistance * specularNormalization * spotEffect;\n#else\nspotSpecular += spotDistance * spotLightColor[ i ] * uSpecularColor * spotSpecularWeight * spotDiffuseWeight * spotEffect;\n#endif\n}\n}\n#endif\n#if MAX_DIR_LIGHTS > 0\nvec3 dirDiffuse = vec3( 0.0 );\nvec3 dirSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_DIR_LIGHTS; i++ ) {\nvec4 lDirection = viewMatrix * vec4( directionalLightDirection[ i ], 0.0 );\nvec3 dirVector = normalize( lDirection.xyz );\n#ifdef WRAP_AROUND\nfloat directionalLightWeightingFull = max( dot( normal, dirVector ), 0.0 );\nfloat directionalLightWeightingHalf = max( 0.5 * dot( normal, dirVector ) + 0.5, 0.0 );\nvec3 dirDiffuseWeight = mix( vec3( directionalLightWeightingFull ), vec3( directionalLightWeightingHalf ), wrapRGB );\n#else\nfloat dirDiffuseWeight = max( dot( normal, dirVector ), 0.0 );\n#endif\ndirDiffuse += directionalLightColor[ i ] * uDiffuseColor * dirDiffuseWeight;\nvec3 dirHalfVector = normalize( dirVector + viewPosition );\nfloat dirDotNormalHalf = max( dot( normal, dirHalfVector ), 0.0 );\nfloat dirSpecularWeight = specularTex.r * max( pow( dirDotNormalHalf, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlick = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( dirVector, dirHalfVector ), 5.0 );\ndirSpecular += schlick * directionalLightColor[ i ] * dirSpecularWeight * dirDiffuseWeight * specularNormalization;\n#else\ndirSpecular += directionalLightColor[ i ] * uSpecularColor * dirSpecularWeight * dirDiffuseWeight;\n#endif\n}\n#endif\n#if MAX_HEMI_LIGHTS > 0\nvec3 hemiDiffuse  = vec3( 0.0 );\nvec3 hemiSpecular = vec3( 0.0 );\nfor( int i = 0; i < MAX_HEMI_LIGHTS; i ++ ) {\nvec4 lDirection = viewMatrix * vec4( hemisphereLightDirection[ i ], 0.0 );\nvec3 lVector = normalize( lDirection.xyz );\nfloat dotProduct = dot( normal, lVector );\nfloat hemiDiffuseWeight = 0.5 * dotProduct + 0.5;\nvec3 hemiColor = mix( hemisphereLightGroundColor[ i ], hemisphereLightSkyColor[ i ], hemiDiffuseWeight );\nhemiDiffuse += uDiffuseColor * hemiColor;\nvec3 hemiHalfVectorSky = normalize( lVector + viewPosition );\nfloat hemiDotNormalHalfSky = 0.5 * dot( normal, hemiHalfVectorSky ) + 0.5;\nfloat hemiSpecularWeightSky = specularTex.r * max( pow( hemiDotNormalHalfSky, uShininess ), 0.0 );\nvec3 lVectorGround = -lVector;\nvec3 hemiHalfVectorGround = normalize( lVectorGround + viewPosition );\nfloat hemiDotNormalHalfGround = 0.5 * dot( normal, hemiHalfVectorGround ) + 0.5;\nfloat hemiSpecularWeightGround = specularTex.r * max( pow( hemiDotNormalHalfGround, uShininess ), 0.0 );\n#ifdef PHYSICALLY_BASED_SHADING\nfloat dotProductGround = dot( normal, lVectorGround );\nfloat specularNormalization = ( uShininess + 2.0001 ) / 8.0;\nvec3 schlickSky = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVector, hemiHalfVectorSky ), 5.0 );\nvec3 schlickGround = uSpecularColor + vec3( 1.0 - uSpecularColor ) * pow( 1.0 - dot( lVectorGround, hemiHalfVectorGround ), 5.0 );\nhemiSpecular += hemiColor * specularNormalization * ( schlickSky * hemiSpecularWeightSky * max( dotProduct, 0.0 ) + schlickGround * hemiSpecularWeightGround * max( dotProductGround, 0.0 ) );\n#else\nhemiSpecular += uSpecularColor * hemiColor * ( hemiSpecularWeightSky + hemiSpecularWeightGround ) * hemiDiffuseWeight;\n#endif\n}\n#endif\nvec3 totalDiffuse = vec3( 0.0 );\nvec3 totalSpecular = vec3( 0.0 );\n#if MAX_DIR_LIGHTS > 0\ntotalDiffuse += dirDiffuse;\ntotalSpecular += dirSpecular;\n#endif\n#if MAX_HEMI_LIGHTS > 0\ntotalDiffuse += hemiDiffuse;\ntotalSpecular += hemiSpecular;\n#endif\n#if MAX_POINT_LIGHTS > 0\ntotalDiffuse += pointDiffuse;\ntotalSpecular += pointSpecular;\n#endif\n#if MAX_SPOT_LIGHTS > 0\ntotalDiffuse += spotDiffuse;\ntotalSpecular += spotSpecular;\n#endif\n#ifdef METAL\ngl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor + totalSpecular );\n#else\ngl_FragColor.xyz = gl_FragColor.xyz * ( totalDiffuse + ambientLightColor * uAmbientColor ) + totalSpecular;\n#endif\nif ( enableReflection ) {\nvec3 vReflect;\nvec3 cameraToVertex = normalize( vWorldPosition - cameraPosition );\nif ( useRefract ) {\nvReflect = refract( cameraToVertex, normal, uRefractionRatio );\n} else {\nvReflect = reflect( cameraToVertex, normal );\n}\nvec4 cubeColor = textureCube( tCube, vec3( -vReflect.x, vReflect.yz ) );\n#ifdef GAMMA_INPUT\ncubeColor.xyz *= cubeColor.xyz;\n#endif\ngl_FragColor.xyz = mix( gl_FragColor.xyz, cubeColor.xyz, specularTex.r * uReflectivity );\n}",
THREE.ShaderChunk.shadowmap_fragment,THREE.ShaderChunk.linear_to_gamma_fragment,THREE.ShaderChunk.fog_fragment,"}"].join("\n"),vertexShader:["attribute vec4 tangent;\nuniform vec2 uOffset;\nuniform vec2 uRepeat;\nuniform bool enableDisplacement;\n#ifdef VERTEX_TEXTURES\nuniform sampler2D tDisplacement;\nuniform float uDisplacementScale;\nuniform float uDisplacementBias;\n#endif\nvarying vec3 vTangent;\nvarying vec3 vBinormal;\nvarying vec3 vNormal;\nvarying vec2 vUv;\nvarying vec3 vWorldPosition;\nvarying vec3 vViewPosition;",
THREE.ShaderChunk.skinning_pars_vertex,THREE.ShaderChunk.shadowmap_pars_vertex,"void main() {",THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.skinnormal_vertex,"#ifdef USE_SKINNING\nvNormal = normalize( normalMatrix * skinnedNormal.xyz );\nvec4 skinnedTangent = skinMatrix * vec4( tangent.xyz, 0.0 );\nvTangent = normalize( normalMatrix * skinnedTangent.xyz );\n#else\nvNormal = normalize( normalMatrix * normal );\nvTangent = normalize( normalMatrix * tangent.xyz );\n#endif\nvBinormal = normalize( cross( vNormal, vTangent ) * tangent.w );\nvUv = uv * uRepeat + uOffset;\nvec3 displacedPosition;\n#ifdef VERTEX_TEXTURES\nif ( enableDisplacement ) {\nvec3 dv = texture2D( tDisplacement, uv ).xyz;\nfloat df = uDisplacementScale * dv.x + uDisplacementBias;\ndisplacedPosition = position + normalize( normal ) * df;\n} else {\n#ifdef USE_SKINNING\nvec4 skinVertex = vec4( position, 1.0 );\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned \t  += boneMatY * skinVertex * skinWeight.y;\ndisplacedPosition  = skinned.xyz;\n#else\ndisplacedPosition = position;\n#endif\n}\n#else\n#ifdef USE_SKINNING\nvec4 skinVertex = vec4( position, 1.0 );\nvec4 skinned  = boneMatX * skinVertex * skinWeight.x;\nskinned \t  += boneMatY * skinVertex * skinWeight.y;\ndisplacedPosition  = skinned.xyz;\n#else\ndisplacedPosition = position;\n#endif\n#endif\nvec4 mvPosition = modelViewMatrix * vec4( displacedPosition, 1.0 );\nvec4 worldPosition = modelMatrix * vec4( displacedPosition, 1.0 );\ngl_Position = projectionMatrix * mvPosition;\nvWorldPosition = worldPosition.xyz;\nvViewPosition = -mvPosition.xyz;\n#ifdef USE_SHADOWMAP\nfor( int i = 0; i < MAX_SHADOWS; i ++ ) {\nvShadowCoord[ i ] = shadowMatrix[ i ] * worldPosition;\n}\n#endif\n}"].join("\n")},
cube:{uniforms:{tCube:{type:"t",value:null},tFlip:{type:"f",value:-1}},vertexShader:"varying vec3 vWorldPosition;\nvoid main() {\nvec4 worldPosition = modelMatrix * vec4( position, 1.0 );\nvWorldPosition = worldPosition.xyz;\ngl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}",fragmentShader:"uniform samplerCube tCube;\nuniform float tFlip;\nvarying vec3 vWorldPosition;\nvoid main() {\ngl_FragColor = textureCube( tCube, vec3( tFlip * vWorldPosition.x, vWorldPosition.yz ) );\n}"},
depthRGBA:{uniforms:{},vertexShader:[THREE.ShaderChunk.morphtarget_pars_vertex,THREE.ShaderChunk.skinning_pars_vertex,"void main() {",THREE.ShaderChunk.skinbase_vertex,THREE.ShaderChunk.morphtarget_vertex,THREE.ShaderChunk.skinning_vertex,THREE.ShaderChunk.default_vertex,"}"].join("\n"),fragmentShader:"vec4 pack_depth( const in float depth ) {\nconst vec4 bit_shift = vec4( 256.0 * 256.0 * 256.0, 256.0 * 256.0, 256.0, 1.0 );\nconst vec4 bit_mask  = vec4( 0.0, 1.0 / 256.0, 1.0 / 256.0, 1.0 / 256.0 );\nvec4 res = fract( depth * bit_shift );\nres -= res.xxyz * bit_mask;\nreturn res;\n}\nvoid main() {\ngl_FragData[ 0 ] = pack_depth( gl_FragCoord.z );\n}"}};THREE.WebGLRenderer=function(a){function b(a){if(a.__webglCustomAttributesList)for(var b in a.__webglCustomAttributesList)f.deleteBuffer(a.__webglCustomAttributesList[b].buffer)}function c(a,b){var c=a.vertices.length,d=b.material;if(d.attributes){void 0===a.__webglCustomAttributesList&&(a.__webglCustomAttributesList=[]);for(var e in d.attributes){var g=d.attributes[e];if(!g.__webglInitialized||g.createUniqueBuffers){g.__webglInitialized=!0;var h=1;"v2"===g.type?h=2:"v3"===g.type?h=3:"v4"===g.type?
h=4:"c"===g.type&&(h=3);g.size=h;g.array=new Float32Array(c*h);g.buffer=f.createBuffer();g.buffer.belongsToAttribute=e;g.needsUpdate=!0}a.__webglCustomAttributesList.push(g)}}}function d(a,b){var c=b.geometry,d=a.faces3,j=a.faces4,i=3*d.length+4*j.length,k=1*d.length+2*j.length,j=3*d.length+4*j.length,d=e(b,a),l=h(d),m=g(d),n=d.vertexColors?d.vertexColors:!1;a.__vertexArray=new Float32Array(3*i);m&&(a.__normalArray=new Float32Array(3*i));c.hasTangents&&(a.__tangentArray=new Float32Array(4*i));n&&
(a.__colorArray=new Float32Array(3*i));if(l){if(0<c.faceUvs.length||0<c.faceVertexUvs.length)a.__uvArray=new Float32Array(2*i);if(1<c.faceUvs.length||1<c.faceVertexUvs.length)a.__uv2Array=new Float32Array(2*i)}b.geometry.skinWeights.length&&b.geometry.skinIndices.length&&(a.__skinIndexArray=new Float32Array(4*i),a.__skinWeightArray=new Float32Array(4*i));a.__faceArray=new Uint16Array(3*k);a.__lineArray=new Uint16Array(2*j);if(a.numMorphTargets){a.__morphTargetsArrays=[];c=0;for(l=a.numMorphTargets;c<
l;c++)a.__morphTargetsArrays.push(new Float32Array(3*i))}if(a.numMorphNormals){a.__morphNormalsArrays=[];c=0;for(l=a.numMorphNormals;c<l;c++)a.__morphNormalsArrays.push(new Float32Array(3*i))}a.__webglFaceCount=3*k;a.__webglLineCount=2*j;if(d.attributes){void 0===a.__webglCustomAttributesList&&(a.__webglCustomAttributesList=[]);for(var u in d.attributes){var k=d.attributes[u],c={},p;for(p in k)c[p]=k[p];if(!c.__webglInitialized||c.createUniqueBuffers)c.__webglInitialized=!0,j=1,"v2"===c.type?j=2:
"v3"===c.type?j=3:"v4"===c.type?j=4:"c"===c.type&&(j=3),c.size=j,c.array=new Float32Array(i*j),c.buffer=f.createBuffer(),c.buffer.belongsToAttribute=u,k.needsUpdate=!0,c.__original=k;a.__webglCustomAttributesList.push(c)}}a.__inittedArrays=!0}function e(a,b){return a.material instanceof THREE.MeshFaceMaterial?a.material.materials[b.materialIndex]:a.material}function g(a){return a instanceof THREE.MeshBasicMaterial&&!a.envMap||a instanceof THREE.MeshDepthMaterial?!1:a&&void 0!==a.shading&&a.shading===
THREE.SmoothShading?THREE.SmoothShading:THREE.FlatShading}function h(a){return a.map||a.lightMap||a.bumpMap||a.normalMap||a.specularMap||a instanceof THREE.ShaderMaterial?!0:!1}function i(a){var b,c,d;for(b in a.attributes)d="index"===b?f.ELEMENT_ARRAY_BUFFER:f.ARRAY_BUFFER,c=a.attributes[b],c.buffer=f.createBuffer(),f.bindBuffer(d,c.buffer),f.bufferData(d,c.array,f.STATIC_DRAW)}function j(a,b,c){var d=a.attributes,e=d.index,g=d.position,h=d.normal,j=d.uv,i=d.color,d=d.tangent;a.elementsNeedUpdate&&
void 0!==e&&(f.bindBuffer(f.ELEMENT_ARRAY_BUFFER,e.buffer),f.bufferData(f.ELEMENT_ARRAY_BUFFER,e.array,b));a.verticesNeedUpdate&&void 0!==g&&(f.bindBuffer(f.ARRAY_BUFFER,g.buffer),f.bufferData(f.ARRAY_BUFFER,g.array,b));a.normalsNeedUpdate&&void 0!==h&&(f.bindBuffer(f.ARRAY_BUFFER,h.buffer),f.bufferData(f.ARRAY_BUFFER,h.array,b));a.uvsNeedUpdate&&void 0!==j&&(f.bindBuffer(f.ARRAY_BUFFER,j.buffer),f.bufferData(f.ARRAY_BUFFER,j.array,b));a.colorsNeedUpdate&&void 0!==i&&(f.bindBuffer(f.ARRAY_BUFFER,
i.buffer),f.bufferData(f.ARRAY_BUFFER,i.array,b));a.tangentsNeedUpdate&&void 0!==d&&(f.bindBuffer(f.ARRAY_BUFFER,d.buffer),f.bufferData(f.ARRAY_BUFFER,d.array,b));if(c)for(var k in a.attributes)delete a.attributes[k].array}function k(a){pb[a]||(f.enableVertexAttribArray(a),pb[a]=!0)}function n(){for(var a in pb)pb[a]&&(f.disableVertexAttribArray(a),pb[a]=!1)}function m(a,b){return a.z!==b.z?b.z-a.z:b.id-a.id}function u(a,b){return b[0]-a[0]}function v(a,b,c){if(a.length)for(var d=0,e=a.length;d<e;d++)Ka=
tb=null,ub=Ba=ca=Z=ha=Qa=pa=-1,qb=!0,a[d].render(b,c,Nc,Oc),Ka=tb=null,ub=Ba=ca=Z=ha=Qa=pa=-1,qb=!0}function p(a,b,c,d,e,f,g,h){var j,i,k,l;b?(i=a.length-1,l=b=-1):(i=0,b=a.length,l=1);for(var m=i;m!==b;m+=l)if(j=a[m],j.render){i=j.object;k=j.buffer;if(h)j=h;else{j=j[c];if(!j)continue;g&&M.setBlending(j.blending,j.blendEquation,j.blendSrc,j.blendDst);M.setDepthTest(j.depthTest);M.setDepthWrite(j.depthWrite);I(j.polygonOffset,j.polygonOffsetFactor,j.polygonOffsetUnits)}M.setMaterialFaces(j);k instanceof
THREE.BufferGeometry?M.renderBufferDirect(d,e,f,j,k,i):M.renderBuffer(d,e,f,j,k,i)}}function l(a,b,c,d,e,f,g){for(var h,j,i=0,k=a.length;i<k;i++)if(h=a[i],j=h.object,j.visible){if(g)h=g;else{h=h[b];if(!h)continue;f&&M.setBlending(h.blending,h.blendEquation,h.blendSrc,h.blendDst);M.setDepthTest(h.depthTest);M.setDepthWrite(h.depthWrite);I(h.polygonOffset,h.polygonOffsetFactor,h.polygonOffsetUnits)}M.renderImmediateObject(c,d,e,h,j)}}function t(a,b,c){a.push({buffer:b,object:c,opaque:null,transparent:null})}
function x(a){for(var b in a.attributes)if(a.attributes[b].needsUpdate)return!0;return!1}function w(a){for(var b in a.attributes)a.attributes[b].needsUpdate=!1}function A(a,b){for(var c=a.length-1;0<=c;c--)a[c].object===b&&a.splice(c,1)}function r(a,b){for(var c=a.length-1;0<=c;c--)a[c]===b&&a.splice(c,1)}function N(a,b,c,d,e){oa=0;d.needsUpdate&&(d.program&&vc(d),M.initMaterial(d,b,c,e),d.needsUpdate=!1);d.morphTargets&&!e.__webglMorphTargetInfluences&&(e.__webglMorphTargetInfluences=new Float32Array(M.maxMorphTargets));
var g=!1,h=d.program,j=h.uniforms,i=d.uniforms;h!==tb&&(f.useProgram(h),tb=h,g=!0);d.id!==ub&&(ub=d.id,g=!0);if(g||a!==Ka)f.uniformMatrix4fv(j.projectionMatrix,!1,a.projectionMatrix.elements),a!==Ka&&(Ka=a);if(d.skinning)if(fc&&e.useVertexTexture){if(null!==j.boneTexture){var k=E();f.uniform1i(j.boneTexture,k);M.setTexture(e.boneTexture,k)}}else null!==j.boneGlobalMatrices&&f.uniformMatrix4fv(j.boneGlobalMatrices,!1,e.boneMatrices);if(g){c&&d.fog&&(i.fogColor.value=c.color,c instanceof THREE.Fog?
(i.fogNear.value=c.near,i.fogFar.value=c.far):c instanceof THREE.FogExp2&&(i.fogDensity.value=c.density));if(d instanceof THREE.MeshPhongMaterial||d instanceof THREE.MeshLambertMaterial||d.lights){if(qb){for(var l,m=k=0,n=0,u,p,t,r=wc,v=r.directional.colors,x=r.directional.positions,w=r.point.colors,A=r.point.positions,C=r.point.distances,D=r.spot.colors,F=r.spot.positions,N=r.spot.distances,I=r.spot.directions,P=r.spot.anglesCos,Z=r.spot.exponents,X=r.hemi.skyColors,ca=r.hemi.groundColors,ha=r.hemi.positions,
ga=0,la=0,fa=0,xa=0,pa=0,Ba=0,sa=0,Ca=0,G=l=0,c=t=G=0,g=b.length;c<g;c++)l=b[c],l.onlyShadow||(u=l.color,p=l.intensity,t=l.distance,l instanceof THREE.AmbientLight?l.visible&&(M.gammaInput?(k+=u.r*u.r,m+=u.g*u.g,n+=u.b*u.b):(k+=u.r,m+=u.g,n+=u.b)):l instanceof THREE.DirectionalLight?(pa+=1,l.visible&&(ya.copy(l.matrixWorld.getPosition()),ya.sub(l.target.matrixWorld.getPosition()),ya.normalize(),0===ya.x&&0===ya.y&&0===ya.z||(l=3*ga,x[l]=ya.x,x[l+1]=ya.y,x[l+2]=ya.z,M.gammaInput?y(v,l,u,p*p):R(v,l,
u,p),ga+=1))):l instanceof THREE.PointLight?(Ba+=1,l.visible&&(G=3*la,M.gammaInput?y(w,G,u,p*p):R(w,G,u,p),p=l.matrixWorld.getPosition(),A[G]=p.x,A[G+1]=p.y,A[G+2]=p.z,C[la]=t,la+=1)):l instanceof THREE.SpotLight?(sa+=1,l.visible&&(G=3*fa,M.gammaInput?y(D,G,u,p*p):R(D,G,u,p),p=l.matrixWorld.getPosition(),F[G]=p.x,F[G+1]=p.y,F[G+2]=p.z,N[fa]=t,ya.copy(p),ya.sub(l.target.matrixWorld.getPosition()),ya.normalize(),I[G]=ya.x,I[G+1]=ya.y,I[G+2]=ya.z,P[fa]=Math.cos(l.angle),Z[fa]=l.exponent,fa+=1)):l instanceof
THREE.HemisphereLight&&(Ca+=1,l.visible&&(ya.copy(l.matrixWorld.getPosition()),ya.normalize(),0===ya.x&&0===ya.y&&0===ya.z||(t=3*xa,ha[t]=ya.x,ha[t+1]=ya.y,ha[t+2]=ya.z,u=l.color,l=l.groundColor,M.gammaInput?(p*=p,y(X,t,u,p),y(ca,t,l,p)):(R(X,t,u,p),R(ca,t,l,p)),xa+=1))));c=3*ga;for(g=Math.max(v.length,3*pa);c<g;c++)v[c]=0;c=3*la;for(g=Math.max(w.length,3*Ba);c<g;c++)w[c]=0;c=3*fa;for(g=Math.max(D.length,3*sa);c<g;c++)D[c]=0;c=3*xa;for(g=Math.max(X.length,3*Ca);c<g;c++)X[c]=0;c=3*xa;for(g=Math.max(ca.length,
3*Ca);c<g;c++)ca[c]=0;r.directional.length=ga;r.point.length=la;r.spot.length=fa;r.hemi.length=xa;r.ambient[0]=k;r.ambient[1]=m;r.ambient[2]=n;qb=!1}c=wc;i.ambientLightColor.value=c.ambient;i.directionalLightColor.value=c.directional.colors;i.directionalLightDirection.value=c.directional.positions;i.pointLightColor.value=c.point.colors;i.pointLightPosition.value=c.point.positions;i.pointLightDistance.value=c.point.distances;i.spotLightColor.value=c.spot.colors;i.spotLightPosition.value=c.spot.positions;
i.spotLightDistance.value=c.spot.distances;i.spotLightDirection.value=c.spot.directions;i.spotLightAngleCos.value=c.spot.anglesCos;i.spotLightExponent.value=c.spot.exponents;i.hemisphereLightSkyColor.value=c.hemi.skyColors;i.hemisphereLightGroundColor.value=c.hemi.groundColors;i.hemisphereLightDirection.value=c.hemi.positions}if(d instanceof THREE.MeshBasicMaterial||d instanceof THREE.MeshLambertMaterial||d instanceof THREE.MeshPhongMaterial){i.opacity.value=d.opacity;M.gammaInput?i.diffuse.value.copyGammaToLinear(d.color):
i.diffuse.value=d.color;i.map.value=d.map;i.lightMap.value=d.lightMap;i.specularMap.value=d.specularMap;d.bumpMap&&(i.bumpMap.value=d.bumpMap,i.bumpScale.value=d.bumpScale);d.normalMap&&(i.normalMap.value=d.normalMap,i.normalScale.value.copy(d.normalScale));var Ea;d.map?Ea=d.map:d.specularMap?Ea=d.specularMap:d.normalMap?Ea=d.normalMap:d.bumpMap&&(Ea=d.bumpMap);void 0!==Ea&&(c=Ea.offset,Ea=Ea.repeat,i.offsetRepeat.value.set(c.x,c.y,Ea.x,Ea.y));i.envMap.value=d.envMap;i.flipEnvMap.value=d.envMap instanceof
THREE.WebGLRenderTargetCube?1:-1;i.reflectivity.value=d.reflectivity;i.refractionRatio.value=d.refractionRatio;i.combine.value=d.combine;i.useRefract.value=d.envMap&&d.envMap.mapping instanceof THREE.CubeRefractionMapping}d instanceof THREE.LineBasicMaterial?(i.diffuse.value=d.color,i.opacity.value=d.opacity):d instanceof THREE.LineDashedMaterial?(i.diffuse.value=d.color,i.opacity.value=d.opacity,i.dashSize.value=d.dashSize,i.totalSize.value=d.dashSize+d.gapSize,i.scale.value=d.scale):d instanceof
THREE.ParticleBasicMaterial?(i.psColor.value=d.color,i.opacity.value=d.opacity,i.size.value=d.size,i.scale.value=Q.height/2,i.map.value=d.map):d instanceof THREE.MeshPhongMaterial?(i.shininess.value=d.shininess,M.gammaInput?(i.ambient.value.copyGammaToLinear(d.ambient),i.emissive.value.copyGammaToLinear(d.emissive),i.specular.value.copyGammaToLinear(d.specular)):(i.ambient.value=d.ambient,i.emissive.value=d.emissive,i.specular.value=d.specular),d.wrapAround&&i.wrapRGB.value.copy(d.wrapRGB)):d instanceof
THREE.MeshLambertMaterial?(M.gammaInput?(i.ambient.value.copyGammaToLinear(d.ambient),i.emissive.value.copyGammaToLinear(d.emissive)):(i.ambient.value=d.ambient,i.emissive.value=d.emissive),d.wrapAround&&i.wrapRGB.value.copy(d.wrapRGB)):d instanceof THREE.MeshDepthMaterial?(i.mNear.value=a.near,i.mFar.value=a.far,i.opacity.value=d.opacity):d instanceof THREE.MeshNormalMaterial&&(i.opacity.value=d.opacity);if(e.receiveShadow&&!d._shadowPass&&i.shadowMatrix){c=Ea=0;for(g=b.length;c<g;c++)if(k=b[c],
k.castShadow&&(k instanceof THREE.SpotLight||k instanceof THREE.DirectionalLight&&!k.shadowCascade))i.shadowMap.value[Ea]=k.shadowMap,i.shadowMapSize.value[Ea]=k.shadowMapSize,i.shadowMatrix.value[Ea]=k.shadowMatrix,i.shadowDarkness.value[Ea]=k.shadowDarkness,i.shadowBias.value[Ea]=k.shadowBias,Ea++}b=d.uniformsList;i=0;for(Ea=b.length;i<Ea;i++)if(g=h.uniforms[b[i][1]])if(c=b[i][0],m=c.type,k=c.value,"i"===m)f.uniform1i(g,k);else if("f"===m)f.uniform1f(g,k);else if("v2"===m)f.uniform2f(g,k.x,k.y);
else if("v3"===m)f.uniform3f(g,k.x,k.y,k.z);else if("v4"===m)f.uniform4f(g,k.x,k.y,k.z,k.w);else if("c"===m)f.uniform3f(g,k.r,k.g,k.b);else if("iv1"===m)f.uniform1iv(g,k);else if("iv"===m)f.uniform3iv(g,k);else if("fv1"===m)f.uniform1fv(g,k);else if("fv"===m)f.uniform3fv(g,k);else if("v2v"===m){void 0===c._array&&(c._array=new Float32Array(2*k.length));m=0;for(n=k.length;m<n;m++)r=2*m,c._array[r]=k[m].x,c._array[r+1]=k[m].y;f.uniform2fv(g,c._array)}else if("v3v"===m){void 0===c._array&&(c._array=
new Float32Array(3*k.length));m=0;for(n=k.length;m<n;m++)r=3*m,c._array[r]=k[m].x,c._array[r+1]=k[m].y,c._array[r+2]=k[m].z;f.uniform3fv(g,c._array)}else if("v4v"===m){void 0===c._array&&(c._array=new Float32Array(4*k.length));m=0;for(n=k.length;m<n;m++)r=4*m,c._array[r]=k[m].x,c._array[r+1]=k[m].y,c._array[r+2]=k[m].z,c._array[r+3]=k[m].w;f.uniform4fv(g,c._array)}else if("m4"===m)void 0===c._array&&(c._array=new Float32Array(16)),k.flattenToArray(c._array),f.uniformMatrix4fv(g,!1,c._array);else if("m4v"===
m){void 0===c._array&&(c._array=new Float32Array(16*k.length));m=0;for(n=k.length;m<n;m++)k[m].flattenToArrayOffset(c._array,16*m);f.uniformMatrix4fv(g,!1,c._array)}else if("t"===m){if(r=k,k=E(),f.uniform1i(g,k),r)if(r.image instanceof Array&&6===r.image.length){if(c=r,g=k,6===c.image.length)if(c.needsUpdate){c.image.__webglTextureCube||(c.image.__webglTextureCube=f.createTexture(),M.info.memory.textures++);f.activeTexture(f.TEXTURE0+g);f.bindTexture(f.TEXTURE_CUBE_MAP,c.image.__webglTextureCube);
f.pixelStorei(f.UNPACK_FLIP_Y_WEBGL,c.flipY);g=c instanceof THREE.CompressedTexture;k=[];for(m=0;6>m;m++)n=k,r=m,M.autoScaleCubemaps&&!g?(v=c.image[m],w=kd,v.width<=w&&v.height<=w||(A=Math.max(v.width,v.height),x=Math.floor(v.width*w/A),w=Math.floor(v.height*w/A),A=document.createElement("canvas"),A.width=x,A.height=w,A.getContext("2d").drawImage(v,0,0,v.width,v.height,0,0,x,w),v=A)):v=c.image[m],n[r]=v;m=k[0];n=0===(m.width&m.width-1)&&0===(m.height&m.height-1);r=S(c.format);v=S(c.type);B(f.TEXTURE_CUBE_MAP,
c,n);for(m=0;6>m;m++)if(g){w=k[m].mipmaps;A=0;for(C=w.length;A<C;A++)x=w[A],f.compressedTexImage2D(f.TEXTURE_CUBE_MAP_POSITIVE_X+m,A,r,x.width,x.height,0,x.data)}else f.texImage2D(f.TEXTURE_CUBE_MAP_POSITIVE_X+m,0,r,r,v,k[m]);c.generateMipmaps&&n&&f.generateMipmap(f.TEXTURE_CUBE_MAP);c.needsUpdate=!1;if(c.onUpdate)c.onUpdate()}else f.activeTexture(f.TEXTURE0+g),f.bindTexture(f.TEXTURE_CUBE_MAP,c.image.__webglTextureCube)}else r instanceof THREE.WebGLRenderTargetCube?(c=r,f.activeTexture(f.TEXTURE0+
k),f.bindTexture(f.TEXTURE_CUBE_MAP,c.__webglTexture)):M.setTexture(r,k)}else if("tv"===m){void 0===c._array&&(c._array=[]);m=0;for(n=c.value.length;m<n;m++)c._array[m]=E();f.uniform1iv(g,c._array);m=0;for(n=c.value.length;m<n;m++)r=c.value[m],k=c._array[m],r&&M.setTexture(r,k)}if((d instanceof THREE.ShaderMaterial||d instanceof THREE.MeshPhongMaterial||d.envMap)&&null!==j.cameraPosition)b=a.matrixWorld.getPosition(),f.uniform3f(j.cameraPosition,b.x,b.y,b.z);(d instanceof THREE.MeshPhongMaterial||
d instanceof THREE.MeshLambertMaterial||d instanceof THREE.ShaderMaterial||d.skinning)&&null!==j.viewMatrix&&f.uniformMatrix4fv(j.viewMatrix,!1,a.matrixWorldInverse.elements)}f.uniformMatrix4fv(j.modelViewMatrix,!1,e._modelViewMatrix.elements);j.normalMatrix&&f.uniformMatrix3fv(j.normalMatrix,!1,e._normalMatrix.elements);null!==j.modelMatrix&&f.uniformMatrix4fv(j.modelMatrix,!1,e.matrixWorld.elements);return h}function E(){var a=oa;a>=xc&&console.warn("WebGLRenderer: trying to use "+a+" texture units while this GPU supports only "+
xc);oa+=1;return a}function C(a,b){a._modelViewMatrix.multiplyMatrices(b.matrixWorldInverse,a.matrixWorld);a._normalMatrix.getInverse(a._modelViewMatrix);a._normalMatrix.transpose()}function y(a,b,c,d){a[b]=c.r*c.r*d;a[b+1]=c.g*c.g*d;a[b+2]=c.b*c.b*d}function R(a,b,c,d){a[b]=c.r*d;a[b+1]=c.g*d;a[b+2]=c.b*d}function I(a,b,c){vb!==a&&(a?f.enable(f.POLYGON_OFFSET_FILL):f.disable(f.POLYGON_OFFSET_FILL),vb=a);if(a&&(mb!==b||nb!==c))f.polygonOffset(b,c),mb=b,nb=c}function F(a){for(var a=a.split("\n"),b=
0,c=a.length;b<c;b++)a[b]=b+1+": "+a[b];return a.join("\n")}function X(a,b){var c;"fragment"===a?c=f.createShader(f.FRAGMENT_SHADER):"vertex"===a&&(c=f.createShader(f.VERTEX_SHADER));f.shaderSource(c,b);f.compileShader(c);return!f.getShaderParameter(c,f.COMPILE_STATUS)?(console.error(f.getShaderInfoLog(c)),console.error(F(b)),null):c}function B(a,b,c){c?(f.texParameteri(a,f.TEXTURE_WRAP_S,S(b.wrapS)),f.texParameteri(a,f.TEXTURE_WRAP_T,S(b.wrapT)),f.texParameteri(a,f.TEXTURE_MAG_FILTER,S(b.magFilter)),
f.texParameteri(a,f.TEXTURE_MIN_FILTER,S(b.minFilter))):(f.texParameteri(a,f.TEXTURE_WRAP_S,f.CLAMP_TO_EDGE),f.texParameteri(a,f.TEXTURE_WRAP_T,f.CLAMP_TO_EDGE),f.texParameteri(a,f.TEXTURE_MAG_FILTER,D(b.magFilter)),f.texParameteri(a,f.TEXTURE_MIN_FILTER,D(b.minFilter)));if(db&&b.type!==THREE.FloatType&&(1<b.anisotropy||b.__oldAnisotropy))f.texParameterf(a,db.TEXTURE_MAX_ANISOTROPY_EXT,Math.min(b.anisotropy,yc)),b.__oldAnisotropy=b.anisotropy}function P(a,b){f.bindRenderbuffer(f.RENDERBUFFER,a);b.depthBuffer&&
!b.stencilBuffer?(f.renderbufferStorage(f.RENDERBUFFER,f.DEPTH_COMPONENT16,b.width,b.height),f.framebufferRenderbuffer(f.FRAMEBUFFER,f.DEPTH_ATTACHMENT,f.RENDERBUFFER,a)):b.depthBuffer&&b.stencilBuffer?(f.renderbufferStorage(f.RENDERBUFFER,f.DEPTH_STENCIL,b.width,b.height),f.framebufferRenderbuffer(f.FRAMEBUFFER,f.DEPTH_STENCIL_ATTACHMENT,f.RENDERBUFFER,a)):f.renderbufferStorage(f.RENDERBUFFER,f.RGBA4,b.width,b.height)}function D(a){return a===THREE.NearestFilter||a===THREE.NearestMipMapNearestFilter||
a===THREE.NearestMipMapLinearFilter?f.NEAREST:f.LINEAR}function S(a){if(a===THREE.RepeatWrapping)return f.REPEAT;if(a===THREE.ClampToEdgeWrapping)return f.CLAMP_TO_EDGE;if(a===THREE.MirroredRepeatWrapping)return f.MIRRORED_REPEAT;if(a===THREE.NearestFilter)return f.NEAREST;if(a===THREE.NearestMipMapNearestFilter)return f.NEAREST_MIPMAP_NEAREST;if(a===THREE.NearestMipMapLinearFilter)return f.NEAREST_MIPMAP_LINEAR;if(a===THREE.LinearFilter)return f.LINEAR;if(a===THREE.LinearMipMapNearestFilter)return f.LINEAR_MIPMAP_NEAREST;
if(a===THREE.LinearMipMapLinearFilter)return f.LINEAR_MIPMAP_LINEAR;if(a===THREE.UnsignedByteType)return f.UNSIGNED_BYTE;if(a===THREE.UnsignedShort4444Type)return f.UNSIGNED_SHORT_4_4_4_4;if(a===THREE.UnsignedShort5551Type)return f.UNSIGNED_SHORT_5_5_5_1;if(a===THREE.UnsignedShort565Type)return f.UNSIGNED_SHORT_5_6_5;if(a===THREE.ByteType)return f.BYTE;if(a===THREE.ShortType)return f.SHORT;if(a===THREE.UnsignedShortType)return f.UNSIGNED_SHORT;if(a===THREE.IntType)return f.INT;if(a===THREE.UnsignedIntType)return f.UNSIGNED_INT;
if(a===THREE.FloatType)return f.FLOAT;if(a===THREE.AlphaFormat)return f.ALPHA;if(a===THREE.RGBFormat)return f.RGB;if(a===THREE.RGBAFormat)return f.RGBA;if(a===THREE.LuminanceFormat)return f.LUMINANCE;if(a===THREE.LuminanceAlphaFormat)return f.LUMINANCE_ALPHA;if(a===THREE.AddEquation)return f.FUNC_ADD;if(a===THREE.SubtractEquation)return f.FUNC_SUBTRACT;if(a===THREE.ReverseSubtractEquation)return f.FUNC_REVERSE_SUBTRACT;if(a===THREE.ZeroFactor)return f.ZERO;if(a===THREE.OneFactor)return f.ONE;if(a===
THREE.SrcColorFactor)return f.SRC_COLOR;if(a===THREE.OneMinusSrcColorFactor)return f.ONE_MINUS_SRC_COLOR;if(a===THREE.SrcAlphaFactor)return f.SRC_ALPHA;if(a===THREE.OneMinusSrcAlphaFactor)return f.ONE_MINUS_SRC_ALPHA;if(a===THREE.DstAlphaFactor)return f.DST_ALPHA;if(a===THREE.OneMinusDstAlphaFactor)return f.ONE_MINUS_DST_ALPHA;if(a===THREE.DstColorFactor)return f.DST_COLOR;if(a===THREE.OneMinusDstColorFactor)return f.ONE_MINUS_DST_COLOR;if(a===THREE.SrcAlphaSaturateFactor)return f.SRC_ALPHA_SATURATE;
if(void 0!==rb){if(a===THREE.RGB_S3TC_DXT1_Format)return rb.COMPRESSED_RGB_S3TC_DXT1_EXT;if(a===THREE.RGBA_S3TC_DXT1_Format)return rb.COMPRESSED_RGBA_S3TC_DXT1_EXT;if(a===THREE.RGBA_S3TC_DXT3_Format)return rb.COMPRESSED_RGBA_S3TC_DXT3_EXT;if(a===THREE.RGBA_S3TC_DXT5_Format)return rb.COMPRESSED_RGBA_S3TC_DXT5_EXT}return 0}console.log("THREE.WebGLRenderer",THREE.REVISION);var a=a||{},Q=void 0!==a.canvas?a.canvas:document.createElement("canvas"),la=void 0!==a.precision?a.precision:"highp",sa=void 0!==
a.alpha?a.alpha:!0,Ca=void 0!==a.premultipliedAlpha?a.premultipliedAlpha:!0,Va=void 0!==a.antialias?a.antialias:!1,ab=void 0!==a.stencil?a.stencil:!0,bb=void 0!==a.preserveDrawingBuffer?a.preserveDrawingBuffer:!1,Pa=void 0!==a.clearColor?new THREE.Color(a.clearColor):new THREE.Color(0),lb=void 0!==a.clearAlpha?a.clearAlpha:0;this.domElement=Q;this.context=null;this.devicePixelRatio=void 0!==a.devicePixelRatio?a.devicePixelRatio:void 0!==window.devicePixelRatio?window.devicePixelRatio:1;this.autoUpdateScene=
this.autoUpdateObjects=this.sortObjects=this.autoClearStencil=this.autoClearDepth=this.autoClearColor=this.autoClear=!0;this.shadowMapEnabled=this.physicallyBasedShading=this.gammaOutput=this.gammaInput=!1;this.shadowMapAutoUpdate=!0;this.shadowMapType=THREE.PCFShadowMap;this.shadowMapCullFace=THREE.CullFaceFront;this.shadowMapCascade=this.shadowMapDebug=!1;this.maxMorphTargets=8;this.maxMorphNormals=4;this.autoScaleCubemaps=!0;this.renderPluginsPre=[];this.renderPluginsPost=[];this.info={memory:{programs:0,
geometries:0,textures:0},render:{calls:0,vertices:0,faces:0,points:0}};var M=this,La=[],jd=0,tb=null,Mc=null,ub=-1,Ba=null,Ka=null,xa=0,oa=0,Z=-1,ca=-1,pa=-1,ga=-1,fa=-1,Ta=-1,Qa=-1,ha=-1,vb=null,mb=null,nb=null,ob=null,Qb=0,lc=0,dc=0,ec=0,Nc=0,Oc=0,pb={},zc=new THREE.Frustum,Pc=new THREE.Matrix4,ld=new THREE.Matrix4,mc=new THREE.Vector3,ya=new THREE.Vector3,qb=!0,wc={ambient:[0,0,0],directional:{length:0,colors:[],positions:[]},point:{length:0,colors:[],positions:[],distances:[]},spot:{length:0,
colors:[],positions:[],distances:[],directions:[],anglesCos:[],exponents:[]},hemi:{length:0,skyColors:[],groundColors:[],positions:[]}},f,gc,nc,db,rb;try{if(!(f=Q.getContext("experimental-webgl",{alpha:sa,premultipliedAlpha:Ca,antialias:Va,stencil:ab,preserveDrawingBuffer:bb})))throw"Error creating WebGL context.";}catch(md){console.error(md)}gc=f.getExtension("OES_texture_float");nc=f.getExtension("OES_standard_derivatives");db=f.getExtension("EXT_texture_filter_anisotropic")||f.getExtension("MOZ_EXT_texture_filter_anisotropic")||
f.getExtension("WEBKIT_EXT_texture_filter_anisotropic");rb=f.getExtension("WEBGL_compressed_texture_s3tc")||f.getExtension("MOZ_WEBGL_compressed_texture_s3tc")||f.getExtension("WEBKIT_WEBGL_compressed_texture_s3tc");gc||console.log("THREE.WebGLRenderer: Float textures not supported.");nc||console.log("THREE.WebGLRenderer: Standard derivatives not supported.");db||console.log("THREE.WebGLRenderer: Anisotropic texture filtering not supported.");rb||console.log("THREE.WebGLRenderer: S3TC compressed textures not supported.");
void 0===f.getShaderPrecisionFormat&&(f.getShaderPrecisionFormat=function(){return{rangeMin:1,rangeMax:1,precision:1}});f.clearColor(0,0,0,1);f.clearDepth(1);f.clearStencil(0);f.enable(f.DEPTH_TEST);f.depthFunc(f.LEQUAL);f.frontFace(f.CCW);f.cullFace(f.BACK);f.enable(f.CULL_FACE);f.enable(f.BLEND);f.blendEquation(f.FUNC_ADD);f.blendFunc(f.SRC_ALPHA,f.ONE_MINUS_SRC_ALPHA);f.clearColor(Pa.r,Pa.g,Pa.b,lb);this.context=f;var xc=f.getParameter(f.MAX_TEXTURE_IMAGE_UNITS),nd=f.getParameter(f.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
f.getParameter(f.MAX_TEXTURE_SIZE);var kd=f.getParameter(f.MAX_CUBE_MAP_TEXTURE_SIZE),yc=db?f.getParameter(db.MAX_TEXTURE_MAX_ANISOTROPY_EXT):0,Ac=0<nd,fc=Ac&&gc;rb&&f.getParameter(f.COMPRESSED_TEXTURE_FORMATS);var od=f.getShaderPrecisionFormat(f.VERTEX_SHADER,f.HIGH_FLOAT),pd=f.getShaderPrecisionFormat(f.VERTEX_SHADER,f.MEDIUM_FLOAT);f.getShaderPrecisionFormat(f.VERTEX_SHADER,f.LOW_FLOAT);var Gd=f.getShaderPrecisionFormat(f.FRAGMENT_SHADER,f.HIGH_FLOAT),Hd=f.getShaderPrecisionFormat(f.FRAGMENT_SHADER,
f.MEDIUM_FLOAT);f.getShaderPrecisionFormat(f.FRAGMENT_SHADER,f.LOW_FLOAT);f.getShaderPrecisionFormat(f.VERTEX_SHADER,f.HIGH_INT);f.getShaderPrecisionFormat(f.VERTEX_SHADER,f.MEDIUM_INT);f.getShaderPrecisionFormat(f.VERTEX_SHADER,f.LOW_INT);f.getShaderPrecisionFormat(f.FRAGMENT_SHADER,f.HIGH_INT);f.getShaderPrecisionFormat(f.FRAGMENT_SHADER,f.MEDIUM_INT);f.getShaderPrecisionFormat(f.FRAGMENT_SHADER,f.LOW_INT);var Id=0<od.precision&&0<Gd.precision,Qc=0<pd.precision&&0<Hd.precision;"highp"===la&&!Id&&
(Qc?(la="mediump",console.warn("WebGLRenderer: highp not supported, using mediump")):(la="lowp",console.warn("WebGLRenderer: highp and mediump not supported, using lowp")));"mediump"===la&&!Qc&&(la="lowp",console.warn("WebGLRenderer: mediump not supported, using lowp"));this.getContext=function(){return f};this.supportsVertexTextures=function(){return Ac};this.supportsFloatTextures=function(){return gc};this.supportsStandardDerivatives=function(){return nc};this.supportsCompressedTextureS3TC=function(){return rb};
this.getMaxAnisotropy=function(){return yc};this.getPrecision=function(){return la};this.setSize=function(a,b){Q.width=a*this.devicePixelRatio;Q.height=b*this.devicePixelRatio;Q.style.width=a+"px";Q.style.height=b+"px";this.setViewport(0,0,Q.width,Q.height)};this.setViewport=function(a,b,c,d){Qb=void 0!==a?a:0;lc=void 0!==b?b:0;dc=void 0!==c?c:Q.width;ec=void 0!==d?d:Q.height;f.viewport(Qb,lc,dc,ec)};this.setScissor=function(a,b,c,d){f.scissor(a,b,c,d)};this.enableScissorTest=function(a){a?f.enable(f.SCISSOR_TEST):
f.disable(f.SCISSOR_TEST)};this.setClearColorHex=function(a,b){Pa.setHex(a);lb=b;f.clearColor(Pa.r,Pa.g,Pa.b,lb)};this.setClearColor=function(a,b){Pa.copy(a);lb=b;f.clearColor(Pa.r,Pa.g,Pa.b,lb)};this.getClearColor=function(){return Pa};this.getClearAlpha=function(){return lb};this.clear=function(a,b,c){var d=0;if(void 0===a||a)d|=f.COLOR_BUFFER_BIT;if(void 0===b||b)d|=f.DEPTH_BUFFER_BIT;if(void 0===c||c)d|=f.STENCIL_BUFFER_BIT;f.clear(d)};this.clearTarget=function(a,b,c,d){this.setRenderTarget(a);
this.clear(b,c,d)};this.addPostPlugin=function(a){a.init(this);this.renderPluginsPost.push(a)};this.addPrePlugin=function(a){a.init(this);this.renderPluginsPre.push(a)};this.updateShadowMap=function(a,b){tb=null;ub=Ba=ha=Qa=pa=-1;qb=!0;ca=Z=-1;this.shadowMapPlugin.update(a,b)};var xd=function(a){a=a.target;a.removeEventListener("dispose",xd);a.__webglInit=void 0;void 0!==a.__webglVertexBuffer&&f.deleteBuffer(a.__webglVertexBuffer);void 0!==a.__webglNormalBuffer&&f.deleteBuffer(a.__webglNormalBuffer);
void 0!==a.__webglTangentBuffer&&f.deleteBuffer(a.__webglTangentBuffer);void 0!==a.__webglColorBuffer&&f.deleteBuffer(a.__webglColorBuffer);void 0!==a.__webglUVBuffer&&f.deleteBuffer(a.__webglUVBuffer);void 0!==a.__webglUV2Buffer&&f.deleteBuffer(a.__webglUV2Buffer);void 0!==a.__webglSkinIndicesBuffer&&f.deleteBuffer(a.__webglSkinIndicesBuffer);void 0!==a.__webglSkinWeightsBuffer&&f.deleteBuffer(a.__webglSkinWeightsBuffer);void 0!==a.__webglFaceBuffer&&f.deleteBuffer(a.__webglFaceBuffer);void 0!==
a.__webglLineBuffer&&f.deleteBuffer(a.__webglLineBuffer);void 0!==a.__webglLineDistanceBuffer&&f.deleteBuffer(a.__webglLineDistanceBuffer);if(void 0!==a.geometryGroups)for(var c in a.geometryGroups){var d=a.geometryGroups[c];if(void 0!==d.numMorphTargets)for(var e=0,g=d.numMorphTargets;e<g;e++)f.deleteBuffer(d.__webglMorphTargetsBuffers[e]);if(void 0!==d.numMorphNormals){e=0;for(g=d.numMorphNormals;e<g;e++)f.deleteBuffer(d.__webglMorphNormalsBuffers[e])}b(d)}b(a);M.info.memory.geometries--},Rc=function(a){a=
a.target;a.removeEventListener("dispose",Rc);a.image&&a.image.__webglTextureCube?f.deleteTexture(a.image.__webglTextureCube):a.__webglInit&&(a.__webglInit=!1,f.deleteTexture(a.__webglTexture));M.info.memory.textures--},Sc=function(a){a=a.target;a.removeEventListener("dispose",Sc);if(a&&a.__webglTexture)if(f.deleteTexture(a.__webglTexture),a instanceof THREE.WebGLRenderTargetCube)for(var b=0;6>b;b++)f.deleteFramebuffer(a.__webglFramebuffer[b]),f.deleteRenderbuffer(a.__webglRenderbuffer[b]);else f.deleteFramebuffer(a.__webglFramebuffer),
f.deleteRenderbuffer(a.__webglRenderbuffer);M.info.memory.textures--},Tc=function(a){a=a.target;a.removeEventListener("dispose",Tc);vc(a)},vc=function(a){var b=a.program;if(void 0!==b){a.program=void 0;var c,d,e=!1,a=0;for(c=La.length;a<c;a++)if(d=La[a],d.program===b){d.usedTimes--;0===d.usedTimes&&(e=!0);break}if(!0===e){e=[];a=0;for(c=La.length;a<c;a++)d=La[a],d.program!==b&&e.push(d);La=e;f.deleteProgram(b);M.info.memory.programs--}}};this.renderBufferImmediate=function(a,b,c){a.hasPositions&&
!a.__webglVertexBuffer&&(a.__webglVertexBuffer=f.createBuffer());a.hasNormals&&!a.__webglNormalBuffer&&(a.__webglNormalBuffer=f.createBuffer());a.hasUvs&&!a.__webglUvBuffer&&(a.__webglUvBuffer=f.createBuffer());a.hasColors&&!a.__webglColorBuffer&&(a.__webglColorBuffer=f.createBuffer());a.hasPositions&&(f.bindBuffer(f.ARRAY_BUFFER,a.__webglVertexBuffer),f.bufferData(f.ARRAY_BUFFER,a.positionArray,f.DYNAMIC_DRAW),f.enableVertexAttribArray(b.attributes.position),f.vertexAttribPointer(b.attributes.position,
3,f.FLOAT,!1,0,0));if(a.hasNormals){f.bindBuffer(f.ARRAY_BUFFER,a.__webglNormalBuffer);if(c.shading===THREE.FlatShading){var d,e,g,h,j,i,k,m,l,n,p,u=3*a.count;for(p=0;p<u;p+=9)n=a.normalArray,d=n[p],e=n[p+1],g=n[p+2],h=n[p+3],i=n[p+4],m=n[p+5],j=n[p+6],k=n[p+7],l=n[p+8],d=(d+h+j)/3,e=(e+i+k)/3,g=(g+m+l)/3,n[p]=d,n[p+1]=e,n[p+2]=g,n[p+3]=d,n[p+4]=e,n[p+5]=g,n[p+6]=d,n[p+7]=e,n[p+8]=g}f.bufferData(f.ARRAY_BUFFER,a.normalArray,f.DYNAMIC_DRAW);f.enableVertexAttribArray(b.attributes.normal);f.vertexAttribPointer(b.attributes.normal,
3,f.FLOAT,!1,0,0)}a.hasUvs&&c.map&&(f.bindBuffer(f.ARRAY_BUFFER,a.__webglUvBuffer),f.bufferData(f.ARRAY_BUFFER,a.uvArray,f.DYNAMIC_DRAW),f.enableVertexAttribArray(b.attributes.uv),f.vertexAttribPointer(b.attributes.uv,2,f.FLOAT,!1,0,0));a.hasColors&&c.vertexColors!==THREE.NoColors&&(f.bindBuffer(f.ARRAY_BUFFER,a.__webglColorBuffer),f.bufferData(f.ARRAY_BUFFER,a.colorArray,f.DYNAMIC_DRAW),f.enableVertexAttribArray(b.attributes.color),f.vertexAttribPointer(b.attributes.color,3,f.FLOAT,!1,0,0));f.drawArrays(f.TRIANGLES,
0,a.count);a.count=0};this.renderBufferDirect=function(a,b,c,d,e,g){if(!1!==d.visible)if(c=N(a,b,c,d,g),a=c.attributes,b=!1,d=16777215*e.id+2*c.id+(d.wireframe?1:0),d!==Ba&&(Ba=d,b=!0),b&&n(),g instanceof THREE.Mesh)if(g=e.attributes.index){d=e.offsets;1<d.length&&(b=!0);for(var c=0,h=d.length;c<h;c++){var j=d[c].index;if(b){var i=e.attributes.position,m=i.itemSize;f.bindBuffer(f.ARRAY_BUFFER,i.buffer);k(a.position);f.vertexAttribPointer(a.position,m,f.FLOAT,!1,0,4*j*m);m=e.attributes.normal;if(0<=
a.normal&&m){var l=m.itemSize;f.bindBuffer(f.ARRAY_BUFFER,m.buffer);k(a.normal);f.vertexAttribPointer(a.normal,l,f.FLOAT,!1,0,4*j*l)}m=e.attributes.uv;0<=a.uv&&m&&(l=m.itemSize,f.bindBuffer(f.ARRAY_BUFFER,m.buffer),k(a.uv),f.vertexAttribPointer(a.uv,l,f.FLOAT,!1,0,4*j*l));m=e.attributes.color;0<=a.color&&m&&(l=m.itemSize,f.bindBuffer(f.ARRAY_BUFFER,m.buffer),k(a.color),f.vertexAttribPointer(a.color,l,f.FLOAT,!1,0,4*j*l));m=e.attributes.tangent;0<=a.tangent&&m&&(l=m.itemSize,f.bindBuffer(f.ARRAY_BUFFER,
m.buffer),k(a.tangent),f.vertexAttribPointer(a.tangent,l,f.FLOAT,!1,0,4*j*l));f.bindBuffer(f.ELEMENT_ARRAY_BUFFER,g.buffer)}f.drawElements(f.TRIANGLES,d[c].count,f.UNSIGNED_SHORT,2*d[c].start);M.info.render.calls++;M.info.render.vertices+=d[c].count;M.info.render.faces+=d[c].count/3}}else b&&(i=e.attributes.position,m=i.itemSize,f.bindBuffer(f.ARRAY_BUFFER,i.buffer),k(a.position),f.vertexAttribPointer(a.position,m,f.FLOAT,!1,0,0),m=e.attributes.normal,0<=a.normal&&m&&(l=m.itemSize,f.bindBuffer(f.ARRAY_BUFFER,
m.buffer),k(a.normal),f.vertexAttribPointer(a.normal,l,f.FLOAT,!1,0,0)),m=e.attributes.uv,0<=a.uv&&m&&(l=m.itemSize,f.bindBuffer(f.ARRAY_BUFFER,m.buffer),k(a.uv),f.vertexAttribPointer(a.uv,l,f.FLOAT,!1,0,0)),m=e.attributes.color,0<=a.color&&m&&(l=m.itemSize,f.bindBuffer(f.ARRAY_BUFFER,m.buffer),k(a.color),f.vertexAttribPointer(a.color,l,f.FLOAT,!1,0,0)),m=e.attributes.tangent,0<=a.tangent&&m&&(l=m.itemSize,f.bindBuffer(f.ARRAY_BUFFER,m.buffer),k(a.tangent),f.vertexAttribPointer(a.tangent,l,f.FLOAT,
!1,0,0))),f.drawArrays(f.TRIANGLES,0,i.numItems/3),M.info.render.calls++,M.info.render.vertices+=i.numItems/3,M.info.render.faces+=i.numItems/3/3;else g instanceof THREE.ParticleSystem?b&&(i=e.attributes.position,m=i.itemSize,f.bindBuffer(f.ARRAY_BUFFER,i.buffer),k(a.position),f.vertexAttribPointer(a.position,m,f.FLOAT,!1,0,0),m=e.attributes.color,0<=a.color&&m&&(l=m.itemSize,f.bindBuffer(f.ARRAY_BUFFER,m.buffer),k(a.color),f.vertexAttribPointer(a.color,l,f.FLOAT,!1,0,0)),f.drawArrays(f.POINTS,0,
i.numItems/3),M.info.render.calls++,M.info.render.points+=i.numItems/3):g instanceof THREE.Line&&b&&(i=e.attributes.position,m=i.itemSize,f.bindBuffer(f.ARRAY_BUFFER,i.buffer),k(a.position),f.vertexAttribPointer(a.position,m,f.FLOAT,!1,0,0),m=e.attributes.color,0<=a.color&&m&&(l=m.itemSize,f.bindBuffer(f.ARRAY_BUFFER,m.buffer),k(a.color),f.vertexAttribPointer(a.color,l,f.FLOAT,!1,0,0)),f.drawArrays(f.LINE_STRIP,0,i.numItems/3),M.info.render.calls++,M.info.render.points+=i.numItems)};this.renderBuffer=
function(a,b,c,d,e,g){if(!1!==d.visible){var h,j,c=N(a,b,c,d,g),b=c.attributes,a=!1,c=16777215*e.id+2*c.id+(d.wireframe?1:0);c!==Ba&&(Ba=c,a=!0);a&&n();if(!d.morphTargets&&0<=b.position)a&&(f.bindBuffer(f.ARRAY_BUFFER,e.__webglVertexBuffer),k(b.position),f.vertexAttribPointer(b.position,3,f.FLOAT,!1,0,0));else if(g.morphTargetBase){c=d.program.attributes;-1!==g.morphTargetBase&&0<=c.position?(f.bindBuffer(f.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[g.morphTargetBase]),k(c.position),f.vertexAttribPointer(c.position,
3,f.FLOAT,!1,0,0)):0<=c.position&&(f.bindBuffer(f.ARRAY_BUFFER,e.__webglVertexBuffer),k(c.position),f.vertexAttribPointer(c.position,3,f.FLOAT,!1,0,0));if(g.morphTargetForcedOrder.length){var i=0;j=g.morphTargetForcedOrder;for(h=g.morphTargetInfluences;i<d.numSupportedMorphTargets&&i<j.length;)0<=c["morphTarget"+i]&&(f.bindBuffer(f.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[j[i]]),k(c["morphTarget"+i]),f.vertexAttribPointer(c["morphTarget"+i],3,f.FLOAT,!1,0,0)),0<=c["morphNormal"+i]&&d.morphNormals&&
(f.bindBuffer(f.ARRAY_BUFFER,e.__webglMorphNormalsBuffers[j[i]]),k(c["morphNormal"+i]),f.vertexAttribPointer(c["morphNormal"+i],3,f.FLOAT,!1,0,0)),g.__webglMorphTargetInfluences[i]=h[j[i]],i++}else{j=[];h=g.morphTargetInfluences;var m,l=h.length;for(m=0;m<l;m++)i=h[m],0<i&&j.push([i,m]);j.length>d.numSupportedMorphTargets?(j.sort(u),j.length=d.numSupportedMorphTargets):j.length>d.numSupportedMorphNormals?j.sort(u):0===j.length&&j.push([0,0]);for(i=0;i<d.numSupportedMorphTargets;)j[i]?(m=j[i][1],0<=
c["morphTarget"+i]&&(f.bindBuffer(f.ARRAY_BUFFER,e.__webglMorphTargetsBuffers[m]),k(c["morphTarget"+i]),f.vertexAttribPointer(c["morphTarget"+i],3,f.FLOAT,!1,0,0)),0<=c["morphNormal"+i]&&d.morphNormals&&(f.bindBuffer(f.ARRAY_BUFFER,e.__webglMorphNormalsBuffers[m]),k(c["morphNormal"+i]),f.vertexAttribPointer(c["morphNormal"+i],3,f.FLOAT,!1,0,0)),g.__webglMorphTargetInfluences[i]=h[m]):g.__webglMorphTargetInfluences[i]=0,i++}null!==d.program.uniforms.morphTargetInfluences&&f.uniform1fv(d.program.uniforms.morphTargetInfluences,
g.__webglMorphTargetInfluences)}if(a){if(e.__webglCustomAttributesList){h=0;for(j=e.__webglCustomAttributesList.length;h<j;h++)c=e.__webglCustomAttributesList[h],0<=b[c.buffer.belongsToAttribute]&&(f.bindBuffer(f.ARRAY_BUFFER,c.buffer),k(b[c.buffer.belongsToAttribute]),f.vertexAttribPointer(b[c.buffer.belongsToAttribute],c.size,f.FLOAT,!1,0,0))}0<=b.color&&(f.bindBuffer(f.ARRAY_BUFFER,e.__webglColorBuffer),k(b.color),f.vertexAttribPointer(b.color,3,f.FLOAT,!1,0,0));0<=b.normal&&(f.bindBuffer(f.ARRAY_BUFFER,
e.__webglNormalBuffer),k(b.normal),f.vertexAttribPointer(b.normal,3,f.FLOAT,!1,0,0));0<=b.tangent&&(f.bindBuffer(f.ARRAY_BUFFER,e.__webglTangentBuffer),k(b.tangent),f.vertexAttribPointer(b.tangent,4,f.FLOAT,!1,0,0));0<=b.uv&&(f.bindBuffer(f.ARRAY_BUFFER,e.__webglUVBuffer),k(b.uv),f.vertexAttribPointer(b.uv,2,f.FLOAT,!1,0,0));0<=b.uv2&&(f.bindBuffer(f.ARRAY_BUFFER,e.__webglUV2Buffer),k(b.uv2),f.vertexAttribPointer(b.uv2,2,f.FLOAT,!1,0,0));d.skinning&&(0<=b.skinIndex&&0<=b.skinWeight)&&(f.bindBuffer(f.ARRAY_BUFFER,
e.__webglSkinIndicesBuffer),k(b.skinIndex),f.vertexAttribPointer(b.skinIndex,4,f.FLOAT,!1,0,0),f.bindBuffer(f.ARRAY_BUFFER,e.__webglSkinWeightsBuffer),k(b.skinWeight),f.vertexAttribPointer(b.skinWeight,4,f.FLOAT,!1,0,0));0<=b.lineDistance&&(f.bindBuffer(f.ARRAY_BUFFER,e.__webglLineDistanceBuffer),k(b.lineDistance),f.vertexAttribPointer(b.lineDistance,1,f.FLOAT,!1,0,0))}g instanceof THREE.Mesh?(d.wireframe?(d=d.wireframeLinewidth,d!==ob&&(f.lineWidth(d),ob=d),a&&f.bindBuffer(f.ELEMENT_ARRAY_BUFFER,
e.__webglLineBuffer),f.drawElements(f.LINES,e.__webglLineCount,f.UNSIGNED_SHORT,0)):(a&&f.bindBuffer(f.ELEMENT_ARRAY_BUFFER,e.__webglFaceBuffer),f.drawElements(f.TRIANGLES,e.__webglFaceCount,f.UNSIGNED_SHORT,0)),M.info.render.calls++,M.info.render.vertices+=e.__webglFaceCount,M.info.render.faces+=e.__webglFaceCount/3):g instanceof THREE.Line?(g=g.type===THREE.LineStrip?f.LINE_STRIP:f.LINES,d=d.linewidth,d!==ob&&(f.lineWidth(d),ob=d),f.drawArrays(g,0,e.__webglLineCount),M.info.render.calls++):g instanceof
THREE.ParticleSystem?(f.drawArrays(f.POINTS,0,e.__webglParticleCount),M.info.render.calls++,M.info.render.points+=e.__webglParticleCount):g instanceof THREE.Ribbon&&(f.drawArrays(f.TRIANGLE_STRIP,0,e.__webglVertexCount),M.info.render.calls++)}};this.render=function(a,b,c,d){if(!1===b instanceof THREE.Camera)console.error("THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.");else{var e,g,h,i,j=a.__lights,k=a.fog;ub=-1;qb=!0;this.autoUpdateScene&&a.updateMatrixWorld();void 0===b.parent&&
b.updateMatrixWorld();b.matrixWorldInverse.getInverse(b.matrixWorld);Pc.multiplyMatrices(b.projectionMatrix,b.matrixWorldInverse);zc.setFromMatrix(Pc);this.autoUpdateObjects&&this.initWebGLObjects(a);v(this.renderPluginsPre,a,b);M.info.render.calls=0;M.info.render.vertices=0;M.info.render.faces=0;M.info.render.points=0;this.setRenderTarget(c);(this.autoClear||d)&&this.clear(this.autoClearColor,this.autoClearDepth,this.autoClearStencil);i=a.__webglObjects;d=0;for(e=i.length;d<e;d++)if(g=i[d],h=g.object,
g.render=!1,h.visible&&(!(h instanceof THREE.Mesh||h instanceof THREE.ParticleSystem)||!h.frustumCulled||zc.intersectsObject(h))){C(h,b);var n=g,u=n.buffer,r=void 0,t=r=void 0,t=n.object.material;if(t instanceof THREE.MeshFaceMaterial)r=u.materialIndex,r=t.materials[r],r.transparent?(n.transparent=r,n.opaque=null):(n.opaque=r,n.transparent=null);else if(r=t)r.transparent?(n.transparent=r,n.opaque=null):(n.opaque=r,n.transparent=null);g.render=!0;!0===this.sortObjects&&(null!==h.renderDepth?g.z=h.renderDepth:
(mc.copy(h.matrixWorld.getPosition()),mc.applyProjection(Pc),g.z=mc.z),g.id=h.id)}this.sortObjects&&i.sort(m);i=a.__webglObjectsImmediate;d=0;for(e=i.length;d<e;d++)g=i[d],h=g.object,h.visible&&(C(h,b),h=g.object.material,h.transparent?(g.transparent=h,g.opaque=null):(g.opaque=h,g.transparent=null));a.overrideMaterial?(d=a.overrideMaterial,this.setBlending(d.blending,d.blendEquation,d.blendSrc,d.blendDst),this.setDepthTest(d.depthTest),this.setDepthWrite(d.depthWrite),I(d.polygonOffset,d.polygonOffsetFactor,
d.polygonOffsetUnits),p(a.__webglObjects,!1,"",b,j,k,!0,d),l(a.__webglObjectsImmediate,"",b,j,k,!1,d)):(d=null,this.setBlending(THREE.NoBlending),p(a.__webglObjects,!0,"opaque",b,j,k,!1,d),l(a.__webglObjectsImmediate,"opaque",b,j,k,!1,d),p(a.__webglObjects,!1,"transparent",b,j,k,!0,d),l(a.__webglObjectsImmediate,"transparent",b,j,k,!0,d));v(this.renderPluginsPost,a,b);c&&(c.generateMipmaps&&c.minFilter!==THREE.NearestFilter&&c.minFilter!==THREE.LinearFilter)&&(c instanceof THREE.WebGLRenderTargetCube?
(f.bindTexture(f.TEXTURE_CUBE_MAP,c.__webglTexture),f.generateMipmap(f.TEXTURE_CUBE_MAP),f.bindTexture(f.TEXTURE_CUBE_MAP,null)):(f.bindTexture(f.TEXTURE_2D,c.__webglTexture),f.generateMipmap(f.TEXTURE_2D),f.bindTexture(f.TEXTURE_2D,null)));this.setDepthTest(!0);this.setDepthWrite(!0)}};this.renderImmediateObject=function(a,b,c,d,e){var g=N(a,b,c,d,e);Ba=-1;M.setMaterialFaces(d);e.immediateRenderCallback?e.immediateRenderCallback(g,f,zc):e.render(function(a){M.renderBufferImmediate(a,g,d)})};this.initWebGLObjects=
function(a){a.__webglObjects||(a.__webglObjects=[],a.__webglObjectsImmediate=[],a.__webglSprites=[],a.__webglFlares=[]);for(;a.__objectsAdded.length;){var b=a.__objectsAdded[0],k=a,m=void 0,l=void 0,n=void 0,p=void 0;if(!b.__webglInit)if(b.__webglInit=!0,b._modelViewMatrix=new THREE.Matrix4,b._normalMatrix=new THREE.Matrix3,void 0!==b.geometry&&void 0===b.geometry.__webglInit&&(b.geometry.__webglInit=!0,b.geometry.addEventListener("dispose",xd)),b instanceof THREE.Mesh)if(l=b.geometry,n=b.material,
l instanceof THREE.Geometry){if(void 0===l.geometryGroups){var v=l,y=void 0,B=void 0,C=void 0,D=void 0,E=void 0,F=void 0,I={},N=v.morphTargets.length,Q=v.morphNormals.length,R=n instanceof THREE.MeshFaceMaterial;v.geometryGroups={};y=0;for(B=v.faces.length;y<B;y++)C=v.faces[y],D=R?C.materialIndex:0,void 0===I[D]&&(I[D]={hash:D,counter:0}),F=I[D].hash+"_"+I[D].counter,void 0===v.geometryGroups[F]&&(v.geometryGroups[F]={faces3:[],faces4:[],materialIndex:D,vertices:0,numMorphTargets:N,numMorphNormals:Q}),
E=C instanceof THREE.Face3?3:4,65535<v.geometryGroups[F].vertices+E&&(I[D].counter+=1,F=I[D].hash+"_"+I[D].counter,void 0===v.geometryGroups[F]&&(v.geometryGroups[F]={faces3:[],faces4:[],materialIndex:D,vertices:0,numMorphTargets:N,numMorphNormals:Q})),C instanceof THREE.Face3?v.geometryGroups[F].faces3.push(y):v.geometryGroups[F].faces4.push(y),v.geometryGroups[F].vertices+=E;v.geometryGroupsList=[];var S=void 0;for(S in v.geometryGroups)v.geometryGroups[S].id=xa++,v.geometryGroupsList.push(v.geometryGroups[S])}for(m in l.geometryGroups)if(p=
l.geometryGroups[m],!p.__webglVertexBuffer){var P=p;P.__webglVertexBuffer=f.createBuffer();P.__webglNormalBuffer=f.createBuffer();P.__webglTangentBuffer=f.createBuffer();P.__webglColorBuffer=f.createBuffer();P.__webglUVBuffer=f.createBuffer();P.__webglUV2Buffer=f.createBuffer();P.__webglSkinIndicesBuffer=f.createBuffer();P.__webglSkinWeightsBuffer=f.createBuffer();P.__webglFaceBuffer=f.createBuffer();P.__webglLineBuffer=f.createBuffer();var X=void 0,Z=void 0;if(P.numMorphTargets){P.__webglMorphTargetsBuffers=
[];X=0;for(Z=P.numMorphTargets;X<Z;X++)P.__webglMorphTargetsBuffers.push(f.createBuffer())}if(P.numMorphNormals){P.__webglMorphNormalsBuffers=[];X=0;for(Z=P.numMorphNormals;X<Z;X++)P.__webglMorphNormalsBuffers.push(f.createBuffer())}M.info.memory.geometries++;d(p,b);l.verticesNeedUpdate=!0;l.morphTargetsNeedUpdate=!0;l.elementsNeedUpdate=!0;l.uvsNeedUpdate=!0;l.normalsNeedUpdate=!0;l.tangentsNeedUpdate=!0;l.colorsNeedUpdate=!0}}else l instanceof THREE.BufferGeometry&&i(l);else if(b instanceof THREE.Ribbon){if(l=
b.geometry,!l.__webglVertexBuffer){var fa=l;fa.__webglVertexBuffer=f.createBuffer();fa.__webglColorBuffer=f.createBuffer();fa.__webglNormalBuffer=f.createBuffer();M.info.memory.geometries++;var ca=l,la=b,ga=ca.vertices.length;ca.__vertexArray=new Float32Array(3*ga);ca.__colorArray=new Float32Array(3*ga);ca.__normalArray=new Float32Array(3*ga);ca.__webglVertexCount=ga;c(ca,la);l.verticesNeedUpdate=!0;l.colorsNeedUpdate=!0;l.normalsNeedUpdate=!0}}else if(b instanceof THREE.Line){if(l=b.geometry,!l.__webglVertexBuffer)if(l instanceof
THREE.Geometry){var ha=l;ha.__webglVertexBuffer=f.createBuffer();ha.__webglColorBuffer=f.createBuffer();ha.__webglLineDistanceBuffer=f.createBuffer();M.info.memory.geometries++;var pa=l,Ca=b,ya=pa.vertices.length;pa.__vertexArray=new Float32Array(3*ya);pa.__colorArray=new Float32Array(3*ya);pa.__lineDistanceArray=new Float32Array(1*ya);pa.__webglLineCount=ya;c(pa,Ca);l.verticesNeedUpdate=!0;l.colorsNeedUpdate=!0;l.lineDistancesNeedUpdate=!0}else l instanceof THREE.BufferGeometry&&i(l)}else if(b instanceof
THREE.ParticleSystem&&(l=b.geometry,!l.__webglVertexBuffer))if(l instanceof THREE.Geometry){var Ba=l;Ba.__webglVertexBuffer=f.createBuffer();Ba.__webglColorBuffer=f.createBuffer();M.info.memory.geometries++;var sa=l,Pa=b,Ka=sa.vertices.length;sa.__vertexArray=new Float32Array(3*Ka);sa.__colorArray=new Float32Array(3*Ka);sa.__sortArray=[];sa.__webglParticleCount=Ka;c(sa,Pa);l.verticesNeedUpdate=!0;l.colorsNeedUpdate=!0}else l instanceof THREE.BufferGeometry&&i(l);if(!b.__webglActive){if(b instanceof
THREE.Mesh)if(l=b.geometry,l instanceof THREE.BufferGeometry)t(k.__webglObjects,l,b);else{if(l instanceof THREE.Geometry)for(m in l.geometryGroups)p=l.geometryGroups[m],t(k.__webglObjects,p,b)}else b instanceof THREE.Ribbon||b instanceof THREE.Line||b instanceof THREE.ParticleSystem?(l=b.geometry,t(k.__webglObjects,l,b)):b instanceof THREE.ImmediateRenderObject||b.immediateRenderCallback?k.__webglObjectsImmediate.push({object:b,opaque:null,transparent:null}):b instanceof THREE.Sprite?k.__webglSprites.push(b):
b instanceof THREE.LensFlare&&k.__webglFlares.push(b);b.__webglActive=!0}a.__objectsAdded.splice(0,1)}for(;a.__objectsRemoved.length;){var oa=a.__objectsRemoved[0],La=a;oa instanceof THREE.Mesh||oa instanceof THREE.ParticleSystem||oa instanceof THREE.Ribbon||oa instanceof THREE.Line?A(La.__webglObjects,oa):oa instanceof THREE.Sprite?r(La.__webglSprites,oa):oa instanceof THREE.LensFlare?r(La.__webglFlares,oa):(oa instanceof THREE.ImmediateRenderObject||oa.immediateRenderCallback)&&A(La.__webglObjectsImmediate,
oa);oa.__webglActive=!1;a.__objectsRemoved.splice(0,1)}for(var Ta=0,bb=a.__webglObjects.length;Ta<bb;Ta++){var cb=a.__webglObjects[Ta].object,G=cb.geometry,Ea=void 0,Qa=void 0,Ma=void 0;if(cb instanceof THREE.Mesh)if(G instanceof THREE.BufferGeometry)(G.verticesNeedUpdate||G.elementsNeedUpdate||G.uvsNeedUpdate||G.normalsNeedUpdate||G.colorsNeedUpdate||G.tangentsNeedUpdate)&&j(G,f.DYNAMIC_DRAW,!G.dynamic),G.verticesNeedUpdate=!1,G.elementsNeedUpdate=!1,G.uvsNeedUpdate=!1,G.normalsNeedUpdate=!1,G.colorsNeedUpdate=
!1,G.tangentsNeedUpdate=!1;else{for(var ab=0,lb=G.geometryGroupsList.length;ab<lb;ab++)if(Ea=G.geometryGroupsList[ab],Ma=e(cb,Ea),G.buffersNeedUpdate&&d(Ea,cb),Qa=Ma.attributes&&x(Ma),G.verticesNeedUpdate||G.morphTargetsNeedUpdate||G.elementsNeedUpdate||G.uvsNeedUpdate||G.normalsNeedUpdate||G.colorsNeedUpdate||G.tangentsNeedUpdate||Qa){var ba=Ea,rb=cb,eb=f.DYNAMIC_DRAW,ub=!G.dynamic,Va=Ma;if(ba.__inittedArrays){var ob=g(Va),vb=Va.vertexColors?Va.vertexColors:!1,Qb=h(Va),qb=ob===THREE.SmoothShading,
z=void 0,O=void 0,Xb=void 0,H=void 0,db=void 0,Yb=void 0,sb=void 0,tb=void 0,Rb=void 0,oc=void 0,pc=void 0,J=void 0,K=void 0,L=void 0,aa=void 0,wb=void 0,xb=void 0,yb=void 0,mb=void 0,zb=void 0,Ab=void 0,Bb=void 0,nb=void 0,Cb=void 0,Db=void 0,Eb=void 0,pb=void 0,Fb=void 0,Gb=void 0,Hb=void 0,Bc=void 0,Ib=void 0,Jb=void 0,Kb=void 0,Cc=void 0,ia=void 0,gc=void 0,Zb=void 0,qc=void 0,rc=void 0,Ha=void 0,lc=void 0,Fa=void 0,Ga=void 0,$b=void 0,Sb=void 0,za=0,Da=0,Tb=0,Ub=0,fb=0,Ra=0,ma=0,Ua=0,Aa=0,U=
0,Y=0,s=0,ja=void 0,Ia=ba.__vertexArray,Dc=ba.__uvArray,Ec=ba.__uv2Array,gb=ba.__normalArray,ta=ba.__tangentArray,Ja=ba.__colorArray,ua=ba.__skinIndexArray,va=ba.__skinWeightArray,dc=ba.__morphTargetsArrays,ec=ba.__morphNormalsArrays,fc=ba.__webglCustomAttributesList,q=void 0,Lb=ba.__faceArray,$a=ba.__lineArray,Wa=rb.geometry,zc=Wa.elementsNeedUpdate,nc=Wa.uvsNeedUpdate,Ac=Wa.normalsNeedUpdate,Mc=Wa.tangentsNeedUpdate,Nc=Wa.colorsNeedUpdate,Oc=Wa.morphTargetsNeedUpdate,hc=Wa.vertices,da=ba.faces3,
ea=ba.faces4,Sa=Wa.faces,qd=Wa.faceVertexUvs[0],rd=Wa.faceVertexUvs[1],ic=Wa.skinIndices,ac=Wa.skinWeights,bc=Wa.morphTargets,Uc=Wa.morphNormals;if(Wa.verticesNeedUpdate){z=0;for(O=da.length;z<O;z++)H=Sa[da[z]],J=hc[H.a],K=hc[H.b],L=hc[H.c],Ia[Da]=J.x,Ia[Da+1]=J.y,Ia[Da+2]=J.z,Ia[Da+3]=K.x,Ia[Da+4]=K.y,Ia[Da+5]=K.z,Ia[Da+6]=L.x,Ia[Da+7]=L.y,Ia[Da+8]=L.z,Da+=9;z=0;for(O=ea.length;z<O;z++)H=Sa[ea[z]],J=hc[H.a],K=hc[H.b],L=hc[H.c],aa=hc[H.d],Ia[Da]=J.x,Ia[Da+1]=J.y,Ia[Da+2]=J.z,Ia[Da+3]=K.x,Ia[Da+4]=
K.y,Ia[Da+5]=K.z,Ia[Da+6]=L.x,Ia[Da+7]=L.y,Ia[Da+8]=L.z,Ia[Da+9]=aa.x,Ia[Da+10]=aa.y,Ia[Da+11]=aa.z,Da+=12;f.bindBuffer(f.ARRAY_BUFFER,ba.__webglVertexBuffer);f.bufferData(f.ARRAY_BUFFER,Ia,eb)}if(Oc){Ha=0;for(lc=bc.length;Ha<lc;Ha++){z=Y=0;for(O=da.length;z<O;z++)$b=da[z],H=Sa[$b],J=bc[Ha].vertices[H.a],K=bc[Ha].vertices[H.b],L=bc[Ha].vertices[H.c],Fa=dc[Ha],Fa[Y]=J.x,Fa[Y+1]=J.y,Fa[Y+2]=J.z,Fa[Y+3]=K.x,Fa[Y+4]=K.y,Fa[Y+5]=K.z,Fa[Y+6]=L.x,Fa[Y+7]=L.y,Fa[Y+8]=L.z,Va.morphNormals&&(qb?(Sb=Uc[Ha].vertexNormals[$b],
zb=Sb.a,Ab=Sb.b,Bb=Sb.c):Bb=Ab=zb=Uc[Ha].faceNormals[$b],Ga=ec[Ha],Ga[Y]=zb.x,Ga[Y+1]=zb.y,Ga[Y+2]=zb.z,Ga[Y+3]=Ab.x,Ga[Y+4]=Ab.y,Ga[Y+5]=Ab.z,Ga[Y+6]=Bb.x,Ga[Y+7]=Bb.y,Ga[Y+8]=Bb.z),Y+=9;z=0;for(O=ea.length;z<O;z++)$b=ea[z],H=Sa[$b],J=bc[Ha].vertices[H.a],K=bc[Ha].vertices[H.b],L=bc[Ha].vertices[H.c],aa=bc[Ha].vertices[H.d],Fa=dc[Ha],Fa[Y]=J.x,Fa[Y+1]=J.y,Fa[Y+2]=J.z,Fa[Y+3]=K.x,Fa[Y+4]=K.y,Fa[Y+5]=K.z,Fa[Y+6]=L.x,Fa[Y+7]=L.y,Fa[Y+8]=L.z,Fa[Y+9]=aa.x,Fa[Y+10]=aa.y,Fa[Y+11]=aa.z,Va.morphNormals&&
(qb?(Sb=Uc[Ha].vertexNormals[$b],zb=Sb.a,Ab=Sb.b,Bb=Sb.c,nb=Sb.d):nb=Bb=Ab=zb=Uc[Ha].faceNormals[$b],Ga=ec[Ha],Ga[Y]=zb.x,Ga[Y+1]=zb.y,Ga[Y+2]=zb.z,Ga[Y+3]=Ab.x,Ga[Y+4]=Ab.y,Ga[Y+5]=Ab.z,Ga[Y+6]=Bb.x,Ga[Y+7]=Bb.y,Ga[Y+8]=Bb.z,Ga[Y+9]=nb.x,Ga[Y+10]=nb.y,Ga[Y+11]=nb.z),Y+=12;f.bindBuffer(f.ARRAY_BUFFER,ba.__webglMorphTargetsBuffers[Ha]);f.bufferData(f.ARRAY_BUFFER,dc[Ha],eb);Va.morphNormals&&(f.bindBuffer(f.ARRAY_BUFFER,ba.__webglMorphNormalsBuffers[Ha]),f.bufferData(f.ARRAY_BUFFER,ec[Ha],eb))}}if(ac.length){z=
0;for(O=da.length;z<O;z++)H=Sa[da[z]],Fb=ac[H.a],Gb=ac[H.b],Hb=ac[H.c],va[U]=Fb.x,va[U+1]=Fb.y,va[U+2]=Fb.z,va[U+3]=Fb.w,va[U+4]=Gb.x,va[U+5]=Gb.y,va[U+6]=Gb.z,va[U+7]=Gb.w,va[U+8]=Hb.x,va[U+9]=Hb.y,va[U+10]=Hb.z,va[U+11]=Hb.w,Ib=ic[H.a],Jb=ic[H.b],Kb=ic[H.c],ua[U]=Ib.x,ua[U+1]=Ib.y,ua[U+2]=Ib.z,ua[U+3]=Ib.w,ua[U+4]=Jb.x,ua[U+5]=Jb.y,ua[U+6]=Jb.z,ua[U+7]=Jb.w,ua[U+8]=Kb.x,ua[U+9]=Kb.y,ua[U+10]=Kb.z,ua[U+11]=Kb.w,U+=12;z=0;for(O=ea.length;z<O;z++)H=Sa[ea[z]],Fb=ac[H.a],Gb=ac[H.b],Hb=ac[H.c],Bc=ac[H.d],
va[U]=Fb.x,va[U+1]=Fb.y,va[U+2]=Fb.z,va[U+3]=Fb.w,va[U+4]=Gb.x,va[U+5]=Gb.y,va[U+6]=Gb.z,va[U+7]=Gb.w,va[U+8]=Hb.x,va[U+9]=Hb.y,va[U+10]=Hb.z,va[U+11]=Hb.w,va[U+12]=Bc.x,va[U+13]=Bc.y,va[U+14]=Bc.z,va[U+15]=Bc.w,Ib=ic[H.a],Jb=ic[H.b],Kb=ic[H.c],Cc=ic[H.d],ua[U]=Ib.x,ua[U+1]=Ib.y,ua[U+2]=Ib.z,ua[U+3]=Ib.w,ua[U+4]=Jb.x,ua[U+5]=Jb.y,ua[U+6]=Jb.z,ua[U+7]=Jb.w,ua[U+8]=Kb.x,ua[U+9]=Kb.y,ua[U+10]=Kb.z,ua[U+11]=Kb.w,ua[U+12]=Cc.x,ua[U+13]=Cc.y,ua[U+14]=Cc.z,ua[U+15]=Cc.w,U+=16;0<U&&(f.bindBuffer(f.ARRAY_BUFFER,
ba.__webglSkinIndicesBuffer),f.bufferData(f.ARRAY_BUFFER,ua,eb),f.bindBuffer(f.ARRAY_BUFFER,ba.__webglSkinWeightsBuffer),f.bufferData(f.ARRAY_BUFFER,va,eb))}if(Nc&&vb){z=0;for(O=da.length;z<O;z++)H=Sa[da[z]],sb=H.vertexColors,tb=H.color,3===sb.length&&vb===THREE.VertexColors?(Cb=sb[0],Db=sb[1],Eb=sb[2]):Eb=Db=Cb=tb,Ja[Aa]=Cb.r,Ja[Aa+1]=Cb.g,Ja[Aa+2]=Cb.b,Ja[Aa+3]=Db.r,Ja[Aa+4]=Db.g,Ja[Aa+5]=Db.b,Ja[Aa+6]=Eb.r,Ja[Aa+7]=Eb.g,Ja[Aa+8]=Eb.b,Aa+=9;z=0;for(O=ea.length;z<O;z++)H=Sa[ea[z]],sb=H.vertexColors,
tb=H.color,4===sb.length&&vb===THREE.VertexColors?(Cb=sb[0],Db=sb[1],Eb=sb[2],pb=sb[3]):pb=Eb=Db=Cb=tb,Ja[Aa]=Cb.r,Ja[Aa+1]=Cb.g,Ja[Aa+2]=Cb.b,Ja[Aa+3]=Db.r,Ja[Aa+4]=Db.g,Ja[Aa+5]=Db.b,Ja[Aa+6]=Eb.r,Ja[Aa+7]=Eb.g,Ja[Aa+8]=Eb.b,Ja[Aa+9]=pb.r,Ja[Aa+10]=pb.g,Ja[Aa+11]=pb.b,Aa+=12;0<Aa&&(f.bindBuffer(f.ARRAY_BUFFER,ba.__webglColorBuffer),f.bufferData(f.ARRAY_BUFFER,Ja,eb))}if(Mc&&Wa.hasTangents){z=0;for(O=da.length;z<O;z++)H=Sa[da[z]],Rb=H.vertexTangents,wb=Rb[0],xb=Rb[1],yb=Rb[2],ta[ma]=wb.x,ta[ma+1]=
wb.y,ta[ma+2]=wb.z,ta[ma+3]=wb.w,ta[ma+4]=xb.x,ta[ma+5]=xb.y,ta[ma+6]=xb.z,ta[ma+7]=xb.w,ta[ma+8]=yb.x,ta[ma+9]=yb.y,ta[ma+10]=yb.z,ta[ma+11]=yb.w,ma+=12;z=0;for(O=ea.length;z<O;z++)H=Sa[ea[z]],Rb=H.vertexTangents,wb=Rb[0],xb=Rb[1],yb=Rb[2],mb=Rb[3],ta[ma]=wb.x,ta[ma+1]=wb.y,ta[ma+2]=wb.z,ta[ma+3]=wb.w,ta[ma+4]=xb.x,ta[ma+5]=xb.y,ta[ma+6]=xb.z,ta[ma+7]=xb.w,ta[ma+8]=yb.x,ta[ma+9]=yb.y,ta[ma+10]=yb.z,ta[ma+11]=yb.w,ta[ma+12]=mb.x,ta[ma+13]=mb.y,ta[ma+14]=mb.z,ta[ma+15]=mb.w,ma+=16;f.bindBuffer(f.ARRAY_BUFFER,
ba.__webglTangentBuffer);f.bufferData(f.ARRAY_BUFFER,ta,eb)}if(Ac&&ob){z=0;for(O=da.length;z<O;z++)if(H=Sa[da[z]],db=H.vertexNormals,Yb=H.normal,3===db.length&&qb)for(ia=0;3>ia;ia++)Zb=db[ia],gb[Ra]=Zb.x,gb[Ra+1]=Zb.y,gb[Ra+2]=Zb.z,Ra+=3;else for(ia=0;3>ia;ia++)gb[Ra]=Yb.x,gb[Ra+1]=Yb.y,gb[Ra+2]=Yb.z,Ra+=3;z=0;for(O=ea.length;z<O;z++)if(H=Sa[ea[z]],db=H.vertexNormals,Yb=H.normal,4===db.length&&qb)for(ia=0;4>ia;ia++)Zb=db[ia],gb[Ra]=Zb.x,gb[Ra+1]=Zb.y,gb[Ra+2]=Zb.z,Ra+=3;else for(ia=0;4>ia;ia++)gb[Ra]=
Yb.x,gb[Ra+1]=Yb.y,gb[Ra+2]=Yb.z,Ra+=3;f.bindBuffer(f.ARRAY_BUFFER,ba.__webglNormalBuffer);f.bufferData(f.ARRAY_BUFFER,gb,eb)}if(nc&&qd&&Qb){z=0;for(O=da.length;z<O;z++)if(Xb=da[z],oc=qd[Xb],void 0!==oc)for(ia=0;3>ia;ia++)qc=oc[ia],Dc[Tb]=qc.x,Dc[Tb+1]=qc.y,Tb+=2;z=0;for(O=ea.length;z<O;z++)if(Xb=ea[z],oc=qd[Xb],void 0!==oc)for(ia=0;4>ia;ia++)qc=oc[ia],Dc[Tb]=qc.x,Dc[Tb+1]=qc.y,Tb+=2;0<Tb&&(f.bindBuffer(f.ARRAY_BUFFER,ba.__webglUVBuffer),f.bufferData(f.ARRAY_BUFFER,Dc,eb))}if(nc&&rd&&Qb){z=0;for(O=
da.length;z<O;z++)if(Xb=da[z],pc=rd[Xb],void 0!==pc)for(ia=0;3>ia;ia++)rc=pc[ia],Ec[Ub]=rc.x,Ec[Ub+1]=rc.y,Ub+=2;z=0;for(O=ea.length;z<O;z++)if(Xb=ea[z],pc=rd[Xb],void 0!==pc)for(ia=0;4>ia;ia++)rc=pc[ia],Ec[Ub]=rc.x,Ec[Ub+1]=rc.y,Ub+=2;0<Ub&&(f.bindBuffer(f.ARRAY_BUFFER,ba.__webglUV2Buffer),f.bufferData(f.ARRAY_BUFFER,Ec,eb))}if(zc){z=0;for(O=da.length;z<O;z++)Lb[fb]=za,Lb[fb+1]=za+1,Lb[fb+2]=za+2,fb+=3,$a[Ua]=za,$a[Ua+1]=za+1,$a[Ua+2]=za,$a[Ua+3]=za+2,$a[Ua+4]=za+1,$a[Ua+5]=za+2,Ua+=6,za+=3;z=0;
for(O=ea.length;z<O;z++)Lb[fb]=za,Lb[fb+1]=za+1,Lb[fb+2]=za+3,Lb[fb+3]=za+1,Lb[fb+4]=za+2,Lb[fb+5]=za+3,fb+=6,$a[Ua]=za,$a[Ua+1]=za+1,$a[Ua+2]=za,$a[Ua+3]=za+3,$a[Ua+4]=za+1,$a[Ua+5]=za+2,$a[Ua+6]=za+2,$a[Ua+7]=za+3,Ua+=8,za+=4;f.bindBuffer(f.ELEMENT_ARRAY_BUFFER,ba.__webglFaceBuffer);f.bufferData(f.ELEMENT_ARRAY_BUFFER,Lb,eb);f.bindBuffer(f.ELEMENT_ARRAY_BUFFER,ba.__webglLineBuffer);f.bufferData(f.ELEMENT_ARRAY_BUFFER,$a,eb)}if(fc){ia=0;for(gc=fc.length;ia<gc;ia++)if(q=fc[ia],q.__original.needsUpdate){s=
0;if(1===q.size)if(void 0===q.boundTo||"vertices"===q.boundTo){z=0;for(O=da.length;z<O;z++)H=Sa[da[z]],q.array[s]=q.value[H.a],q.array[s+1]=q.value[H.b],q.array[s+2]=q.value[H.c],s+=3;z=0;for(O=ea.length;z<O;z++)H=Sa[ea[z]],q.array[s]=q.value[H.a],q.array[s+1]=q.value[H.b],q.array[s+2]=q.value[H.c],q.array[s+3]=q.value[H.d],s+=4}else{if("faces"===q.boundTo){z=0;for(O=da.length;z<O;z++)ja=q.value[da[z]],q.array[s]=ja,q.array[s+1]=ja,q.array[s+2]=ja,s+=3;z=0;for(O=ea.length;z<O;z++)ja=q.value[ea[z]],
q.array[s]=ja,q.array[s+1]=ja,q.array[s+2]=ja,q.array[s+3]=ja,s+=4}}else if(2===q.size)if(void 0===q.boundTo||"vertices"===q.boundTo){z=0;for(O=da.length;z<O;z++)H=Sa[da[z]],J=q.value[H.a],K=q.value[H.b],L=q.value[H.c],q.array[s]=J.x,q.array[s+1]=J.y,q.array[s+2]=K.x,q.array[s+3]=K.y,q.array[s+4]=L.x,q.array[s+5]=L.y,s+=6;z=0;for(O=ea.length;z<O;z++)H=Sa[ea[z]],J=q.value[H.a],K=q.value[H.b],L=q.value[H.c],aa=q.value[H.d],q.array[s]=J.x,q.array[s+1]=J.y,q.array[s+2]=K.x,q.array[s+3]=K.y,q.array[s+
4]=L.x,q.array[s+5]=L.y,q.array[s+6]=aa.x,q.array[s+7]=aa.y,s+=8}else{if("faces"===q.boundTo){z=0;for(O=da.length;z<O;z++)L=K=J=ja=q.value[da[z]],q.array[s]=J.x,q.array[s+1]=J.y,q.array[s+2]=K.x,q.array[s+3]=K.y,q.array[s+4]=L.x,q.array[s+5]=L.y,s+=6;z=0;for(O=ea.length;z<O;z++)aa=L=K=J=ja=q.value[ea[z]],q.array[s]=J.x,q.array[s+1]=J.y,q.array[s+2]=K.x,q.array[s+3]=K.y,q.array[s+4]=L.x,q.array[s+5]=L.y,q.array[s+6]=aa.x,q.array[s+7]=aa.y,s+=8}}else if(3===q.size){var T;T="c"===q.type?["r","g","b"]:
["x","y","z"];if(void 0===q.boundTo||"vertices"===q.boundTo){z=0;for(O=da.length;z<O;z++)H=Sa[da[z]],J=q.value[H.a],K=q.value[H.b],L=q.value[H.c],q.array[s]=J[T[0]],q.array[s+1]=J[T[1]],q.array[s+2]=J[T[2]],q.array[s+3]=K[T[0]],q.array[s+4]=K[T[1]],q.array[s+5]=K[T[2]],q.array[s+6]=L[T[0]],q.array[s+7]=L[T[1]],q.array[s+8]=L[T[2]],s+=9;z=0;for(O=ea.length;z<O;z++)H=Sa[ea[z]],J=q.value[H.a],K=q.value[H.b],L=q.value[H.c],aa=q.value[H.d],q.array[s]=J[T[0]],q.array[s+1]=J[T[1]],q.array[s+2]=J[T[2]],q.array[s+
3]=K[T[0]],q.array[s+4]=K[T[1]],q.array[s+5]=K[T[2]],q.array[s+6]=L[T[0]],q.array[s+7]=L[T[1]],q.array[s+8]=L[T[2]],q.array[s+9]=aa[T[0]],q.array[s+10]=aa[T[1]],q.array[s+11]=aa[T[2]],s+=12}else if("faces"===q.boundTo){z=0;for(O=da.length;z<O;z++)L=K=J=ja=q.value[da[z]],q.array[s]=J[T[0]],q.array[s+1]=J[T[1]],q.array[s+2]=J[T[2]],q.array[s+3]=K[T[0]],q.array[s+4]=K[T[1]],q.array[s+5]=K[T[2]],q.array[s+6]=L[T[0]],q.array[s+7]=L[T[1]],q.array[s+8]=L[T[2]],s+=9;z=0;for(O=ea.length;z<O;z++)aa=L=K=J=ja=
q.value[ea[z]],q.array[s]=J[T[0]],q.array[s+1]=J[T[1]],q.array[s+2]=J[T[2]],q.array[s+3]=K[T[0]],q.array[s+4]=K[T[1]],q.array[s+5]=K[T[2]],q.array[s+6]=L[T[0]],q.array[s+7]=L[T[1]],q.array[s+8]=L[T[2]],q.array[s+9]=aa[T[0]],q.array[s+10]=aa[T[1]],q.array[s+11]=aa[T[2]],s+=12}else if("faceVertices"===q.boundTo){z=0;for(O=da.length;z<O;z++)ja=q.value[da[z]],J=ja[0],K=ja[1],L=ja[2],q.array[s]=J[T[0]],q.array[s+1]=J[T[1]],q.array[s+2]=J[T[2]],q.array[s+3]=K[T[0]],q.array[s+4]=K[T[1]],q.array[s+5]=K[T[2]],
q.array[s+6]=L[T[0]],q.array[s+7]=L[T[1]],q.array[s+8]=L[T[2]],s+=9;z=0;for(O=ea.length;z<O;z++)ja=q.value[ea[z]],J=ja[0],K=ja[1],L=ja[2],aa=ja[3],q.array[s]=J[T[0]],q.array[s+1]=J[T[1]],q.array[s+2]=J[T[2]],q.array[s+3]=K[T[0]],q.array[s+4]=K[T[1]],q.array[s+5]=K[T[2]],q.array[s+6]=L[T[0]],q.array[s+7]=L[T[1]],q.array[s+8]=L[T[2]],q.array[s+9]=aa[T[0]],q.array[s+10]=aa[T[1]],q.array[s+11]=aa[T[2]],s+=12}}else if(4===q.size)if(void 0===q.boundTo||"vertices"===q.boundTo){z=0;for(O=da.length;z<O;z++)H=
Sa[da[z]],J=q.value[H.a],K=q.value[H.b],L=q.value[H.c],q.array[s]=J.x,q.array[s+1]=J.y,q.array[s+2]=J.z,q.array[s+3]=J.w,q.array[s+4]=K.x,q.array[s+5]=K.y,q.array[s+6]=K.z,q.array[s+7]=K.w,q.array[s+8]=L.x,q.array[s+9]=L.y,q.array[s+10]=L.z,q.array[s+11]=L.w,s+=12;z=0;for(O=ea.length;z<O;z++)H=Sa[ea[z]],J=q.value[H.a],K=q.value[H.b],L=q.value[H.c],aa=q.value[H.d],q.array[s]=J.x,q.array[s+1]=J.y,q.array[s+2]=J.z,q.array[s+3]=J.w,q.array[s+4]=K.x,q.array[s+5]=K.y,q.array[s+6]=K.z,q.array[s+7]=K.w,q.array[s+
8]=L.x,q.array[s+9]=L.y,q.array[s+10]=L.z,q.array[s+11]=L.w,q.array[s+12]=aa.x,q.array[s+13]=aa.y,q.array[s+14]=aa.z,q.array[s+15]=aa.w,s+=16}else if("faces"===q.boundTo){z=0;for(O=da.length;z<O;z++)L=K=J=ja=q.value[da[z]],q.array[s]=J.x,q.array[s+1]=J.y,q.array[s+2]=J.z,q.array[s+3]=J.w,q.array[s+4]=K.x,q.array[s+5]=K.y,q.array[s+6]=K.z,q.array[s+7]=K.w,q.array[s+8]=L.x,q.array[s+9]=L.y,q.array[s+10]=L.z,q.array[s+11]=L.w,s+=12;z=0;for(O=ea.length;z<O;z++)aa=L=K=J=ja=q.value[ea[z]],q.array[s]=J.x,
q.array[s+1]=J.y,q.array[s+2]=J.z,q.array[s+3]=J.w,q.array[s+4]=K.x,q.array[s+5]=K.y,q.array[s+6]=K.z,q.array[s+7]=K.w,q.array[s+8]=L.x,q.array[s+9]=L.y,q.array[s+10]=L.z,q.array[s+11]=L.w,q.array[s+12]=aa.x,q.array[s+13]=aa.y,q.array[s+14]=aa.z,q.array[s+15]=aa.w,s+=16}else if("faceVertices"===q.boundTo){z=0;for(O=da.length;z<O;z++)ja=q.value[da[z]],J=ja[0],K=ja[1],L=ja[2],q.array[s]=J.x,q.array[s+1]=J.y,q.array[s+2]=J.z,q.array[s+3]=J.w,q.array[s+4]=K.x,q.array[s+5]=K.y,q.array[s+6]=K.z,q.array[s+
7]=K.w,q.array[s+8]=L.x,q.array[s+9]=L.y,q.array[s+10]=L.z,q.array[s+11]=L.w,s+=12;z=0;for(O=ea.length;z<O;z++)ja=q.value[ea[z]],J=ja[0],K=ja[1],L=ja[2],aa=ja[3],q.array[s]=J.x,q.array[s+1]=J.y,q.array[s+2]=J.z,q.array[s+3]=J.w,q.array[s+4]=K.x,q.array[s+5]=K.y,q.array[s+6]=K.z,q.array[s+7]=K.w,q.array[s+8]=L.x,q.array[s+9]=L.y,q.array[s+10]=L.z,q.array[s+11]=L.w,q.array[s+12]=aa.x,q.array[s+13]=aa.y,q.array[s+14]=aa.z,q.array[s+15]=aa.w,s+=16}f.bindBuffer(f.ARRAY_BUFFER,q.buffer);f.bufferData(f.ARRAY_BUFFER,
q.array,eb)}}ub&&(delete ba.__inittedArrays,delete ba.__colorArray,delete ba.__normalArray,delete ba.__tangentArray,delete ba.__uvArray,delete ba.__uv2Array,delete ba.__faceArray,delete ba.__vertexArray,delete ba.__lineArray,delete ba.__skinIndexArray,delete ba.__skinWeightArray)}}G.verticesNeedUpdate=!1;G.morphTargetsNeedUpdate=!1;G.elementsNeedUpdate=!1;G.uvsNeedUpdate=!1;G.normalsNeedUpdate=!1;G.colorsNeedUpdate=!1;G.tangentsNeedUpdate=!1;G.buffersNeedUpdate=!1;Ma.attributes&&w(Ma)}else if(cb instanceof
THREE.Ribbon){Ma=e(cb,G);Qa=Ma.attributes&&x(Ma);if(G.verticesNeedUpdate||G.colorsNeedUpdate||G.normalsNeedUpdate||Qa){var hb=G,Vc=f.DYNAMIC_DRAW,Fc=void 0,Gc=void 0,Hc=void 0,Wc=void 0,ka=void 0,Xc=void 0,Yc=void 0,Zc=void 0,vc=void 0,Na=void 0,sc=void 0,qa=void 0,Xa=void 0,wc=hb.vertices,xc=hb.colors,yc=hb.normals,Qc=wc.length,Rc=xc.length,Sc=yc.length,$c=hb.__vertexArray,ad=hb.__colorArray,bd=hb.__normalArray,Tc=hb.colorsNeedUpdate,jd=hb.normalsNeedUpdate,sd=hb.__webglCustomAttributesList;if(hb.verticesNeedUpdate){for(Fc=
0;Fc<Qc;Fc++)Wc=wc[Fc],ka=3*Fc,$c[ka]=Wc.x,$c[ka+1]=Wc.y,$c[ka+2]=Wc.z;f.bindBuffer(f.ARRAY_BUFFER,hb.__webglVertexBuffer);f.bufferData(f.ARRAY_BUFFER,$c,Vc)}if(Tc){for(Gc=0;Gc<Rc;Gc++)Xc=xc[Gc],ka=3*Gc,ad[ka]=Xc.r,ad[ka+1]=Xc.g,ad[ka+2]=Xc.b;f.bindBuffer(f.ARRAY_BUFFER,hb.__webglColorBuffer);f.bufferData(f.ARRAY_BUFFER,ad,Vc)}if(jd){for(Hc=0;Hc<Sc;Hc++)Yc=yc[Hc],ka=3*Hc,bd[ka]=Yc.x,bd[ka+1]=Yc.y,bd[ka+2]=Yc.z;f.bindBuffer(f.ARRAY_BUFFER,hb.__webglNormalBuffer);f.bufferData(f.ARRAY_BUFFER,bd,Vc)}if(sd){Zc=
0;for(vc=sd.length;Zc<vc;Zc++)if(qa=sd[Zc],qa.needsUpdate&&(void 0===qa.boundTo||"vertices"===qa.boundTo)){ka=0;sc=qa.value.length;if(1===qa.size)for(Na=0;Na<sc;Na++)qa.array[Na]=qa.value[Na];else if(2===qa.size)for(Na=0;Na<sc;Na++)Xa=qa.value[Na],qa.array[ka]=Xa.x,qa.array[ka+1]=Xa.y,ka+=2;else if(3===qa.size)if("c"===qa.type)for(Na=0;Na<sc;Na++)Xa=qa.value[Na],qa.array[ka]=Xa.r,qa.array[ka+1]=Xa.g,qa.array[ka+2]=Xa.b,ka+=3;else for(Na=0;Na<sc;Na++)Xa=qa.value[Na],qa.array[ka]=Xa.x,qa.array[ka+1]=
Xa.y,qa.array[ka+2]=Xa.z,ka+=3;else if(4===qa.size)for(Na=0;Na<sc;Na++)Xa=qa.value[Na],qa.array[ka]=Xa.x,qa.array[ka+1]=Xa.y,qa.array[ka+2]=Xa.z,qa.array[ka+3]=Xa.w,ka+=4;f.bindBuffer(f.ARRAY_BUFFER,qa.buffer);f.bufferData(f.ARRAY_BUFFER,qa.array,Vc)}}}G.verticesNeedUpdate=!1;G.colorsNeedUpdate=!1;G.normalsNeedUpdate=!1;Ma.attributes&&w(Ma)}else if(cb instanceof THREE.Line)if(G instanceof THREE.BufferGeometry)(G.verticesNeedUpdate||G.colorsNeedUpdate)&&j(G,f.DYNAMIC_DRAW,!G.dynamic),G.verticesNeedUpdate=
!1,G.colorsNeedUpdate=!1;else{Ma=e(cb,G);Qa=Ma.attributes&&x(Ma);if(G.verticesNeedUpdate||G.colorsNeedUpdate||G.lineDistancesNeedUpdate||Qa){var ib=G,cd=f.DYNAMIC_DRAW,Ic=void 0,Jc=void 0,Kc=void 0,dd=void 0,wa=void 0,ed=void 0,yd=ib.vertices,zd=ib.colors,Ad=ib.lineDistances,kd=yd.length,md=zd.length,nd=Ad.length,fd=ib.__vertexArray,gd=ib.__colorArray,Bd=ib.__lineDistanceArray,od=ib.colorsNeedUpdate,pd=ib.lineDistancesNeedUpdate,td=ib.__webglCustomAttributesList,hd=void 0,Cd=void 0,Oa=void 0,tc=void 0,
Ya=void 0,ra=void 0;if(ib.verticesNeedUpdate){for(Ic=0;Ic<kd;Ic++)dd=yd[Ic],wa=3*Ic,fd[wa]=dd.x,fd[wa+1]=dd.y,fd[wa+2]=dd.z;f.bindBuffer(f.ARRAY_BUFFER,ib.__webglVertexBuffer);f.bufferData(f.ARRAY_BUFFER,fd,cd)}if(od){for(Jc=0;Jc<md;Jc++)ed=zd[Jc],wa=3*Jc,gd[wa]=ed.r,gd[wa+1]=ed.g,gd[wa+2]=ed.b;f.bindBuffer(f.ARRAY_BUFFER,ib.__webglColorBuffer);f.bufferData(f.ARRAY_BUFFER,gd,cd)}if(pd){for(Kc=0;Kc<nd;Kc++)Bd[Kc]=Ad[Kc];f.bindBuffer(f.ARRAY_BUFFER,ib.__webglLineDistanceBuffer);f.bufferData(f.ARRAY_BUFFER,
Bd,cd)}if(td){hd=0;for(Cd=td.length;hd<Cd;hd++)if(ra=td[hd],ra.needsUpdate&&(void 0===ra.boundTo||"vertices"===ra.boundTo)){wa=0;tc=ra.value.length;if(1===ra.size)for(Oa=0;Oa<tc;Oa++)ra.array[Oa]=ra.value[Oa];else if(2===ra.size)for(Oa=0;Oa<tc;Oa++)Ya=ra.value[Oa],ra.array[wa]=Ya.x,ra.array[wa+1]=Ya.y,wa+=2;else if(3===ra.size)if("c"===ra.type)for(Oa=0;Oa<tc;Oa++)Ya=ra.value[Oa],ra.array[wa]=Ya.r,ra.array[wa+1]=Ya.g,ra.array[wa+2]=Ya.b,wa+=3;else for(Oa=0;Oa<tc;Oa++)Ya=ra.value[Oa],ra.array[wa]=Ya.x,
ra.array[wa+1]=Ya.y,ra.array[wa+2]=Ya.z,wa+=3;else if(4===ra.size)for(Oa=0;Oa<tc;Oa++)Ya=ra.value[Oa],ra.array[wa]=Ya.x,ra.array[wa+1]=Ya.y,ra.array[wa+2]=Ya.z,ra.array[wa+3]=Ya.w,wa+=4;f.bindBuffer(f.ARRAY_BUFFER,ra.buffer);f.bufferData(f.ARRAY_BUFFER,ra.array,cd)}}}G.verticesNeedUpdate=!1;G.colorsNeedUpdate=!1;G.lineDistancesNeedUpdate=!1;Ma.attributes&&w(Ma)}else if(cb instanceof THREE.ParticleSystem)if(G instanceof THREE.BufferGeometry)(G.verticesNeedUpdate||G.colorsNeedUpdate)&&j(G,f.DYNAMIC_DRAW,
!G.dynamic),G.verticesNeedUpdate=!1,G.colorsNeedUpdate=!1;else{Ma=e(cb,G);Qa=Ma.attributes&&x(Ma);if(G.verticesNeedUpdate||G.colorsNeedUpdate||cb.sortParticles||Qa){var Mb=G,ud=f.DYNAMIC_DRAW,Lc=cb,Za=void 0,Nb=void 0,Ob=void 0,W=void 0,Pb=void 0,cc=void 0,id=Mb.vertices,vd=id.length,wd=Mb.colors,Dd=wd.length,jc=Mb.__vertexArray,kc=Mb.__colorArray,Vb=Mb.__sortArray,Ed=Mb.verticesNeedUpdate,Fd=Mb.colorsNeedUpdate,Wb=Mb.__webglCustomAttributesList,jb=void 0,uc=void 0,$=void 0,kb=void 0,na=void 0,V=
void 0;if(Lc.sortParticles){ld.copy(Pc);ld.multiply(Lc.matrixWorld);for(Za=0;Za<vd;Za++)Ob=id[Za],mc.copy(Ob),mc.applyProjection(ld),Vb[Za]=[mc.z,Za];Vb.sort(u);for(Za=0;Za<vd;Za++)Ob=id[Vb[Za][1]],W=3*Za,jc[W]=Ob.x,jc[W+1]=Ob.y,jc[W+2]=Ob.z;for(Nb=0;Nb<Dd;Nb++)W=3*Nb,cc=wd[Vb[Nb][1]],kc[W]=cc.r,kc[W+1]=cc.g,kc[W+2]=cc.b;if(Wb){jb=0;for(uc=Wb.length;jb<uc;jb++)if(V=Wb[jb],void 0===V.boundTo||"vertices"===V.boundTo)if(W=0,kb=V.value.length,1===V.size)for($=0;$<kb;$++)Pb=Vb[$][1],V.array[$]=V.value[Pb];
else if(2===V.size)for($=0;$<kb;$++)Pb=Vb[$][1],na=V.value[Pb],V.array[W]=na.x,V.array[W+1]=na.y,W+=2;else if(3===V.size)if("c"===V.type)for($=0;$<kb;$++)Pb=Vb[$][1],na=V.value[Pb],V.array[W]=na.r,V.array[W+1]=na.g,V.array[W+2]=na.b,W+=3;else for($=0;$<kb;$++)Pb=Vb[$][1],na=V.value[Pb],V.array[W]=na.x,V.array[W+1]=na.y,V.array[W+2]=na.z,W+=3;else if(4===V.size)for($=0;$<kb;$++)Pb=Vb[$][1],na=V.value[Pb],V.array[W]=na.x,V.array[W+1]=na.y,V.array[W+2]=na.z,V.array[W+3]=na.w,W+=4}}else{if(Ed)for(Za=
0;Za<vd;Za++)Ob=id[Za],W=3*Za,jc[W]=Ob.x,jc[W+1]=Ob.y,jc[W+2]=Ob.z;if(Fd)for(Nb=0;Nb<Dd;Nb++)cc=wd[Nb],W=3*Nb,kc[W]=cc.r,kc[W+1]=cc.g,kc[W+2]=cc.b;if(Wb){jb=0;for(uc=Wb.length;jb<uc;jb++)if(V=Wb[jb],V.needsUpdate&&(void 0===V.boundTo||"vertices"===V.boundTo))if(kb=V.value.length,W=0,1===V.size)for($=0;$<kb;$++)V.array[$]=V.value[$];else if(2===V.size)for($=0;$<kb;$++)na=V.value[$],V.array[W]=na.x,V.array[W+1]=na.y,W+=2;else if(3===V.size)if("c"===V.type)for($=0;$<kb;$++)na=V.value[$],V.array[W]=na.r,
V.array[W+1]=na.g,V.array[W+2]=na.b,W+=3;else for($=0;$<kb;$++)na=V.value[$],V.array[W]=na.x,V.array[W+1]=na.y,V.array[W+2]=na.z,W+=3;else if(4===V.size)for($=0;$<kb;$++)na=V.value[$],V.array[W]=na.x,V.array[W+1]=na.y,V.array[W+2]=na.z,V.array[W+3]=na.w,W+=4}}if(Ed||Lc.sortParticles)f.bindBuffer(f.ARRAY_BUFFER,Mb.__webglVertexBuffer),f.bufferData(f.ARRAY_BUFFER,jc,ud);if(Fd||Lc.sortParticles)f.bindBuffer(f.ARRAY_BUFFER,Mb.__webglColorBuffer),f.bufferData(f.ARRAY_BUFFER,kc,ud);if(Wb){jb=0;for(uc=Wb.length;jb<
uc;jb++)if(V=Wb[jb],V.needsUpdate||Lc.sortParticles)f.bindBuffer(f.ARRAY_BUFFER,V.buffer),f.bufferData(f.ARRAY_BUFFER,V.array,ud)}}G.verticesNeedUpdate=!1;G.colorsNeedUpdate=!1;Ma.attributes&&w(Ma)}}};this.initMaterial=function(a,b,c,d){var e,g,h,i;a.addEventListener("dispose",Tc);var j,k,m,l,n;a instanceof THREE.MeshDepthMaterial?n="depth":a instanceof THREE.MeshNormalMaterial?n="normal":a instanceof THREE.MeshBasicMaterial?n="basic":a instanceof THREE.MeshLambertMaterial?n="lambert":a instanceof
THREE.MeshPhongMaterial?n="phong":a instanceof THREE.LineBasicMaterial?n="basic":a instanceof THREE.LineDashedMaterial?n="dashed":a instanceof THREE.ParticleBasicMaterial&&(n="particle_basic");if(n){var p=THREE.ShaderLib[n];a.uniforms=THREE.UniformsUtils.clone(p.uniforms);a.vertexShader=p.vertexShader;a.fragmentShader=p.fragmentShader}var u,r,t;e=h=r=t=p=0;for(g=b.length;e<g;e++)u=b[e],u.onlyShadow||(u instanceof THREE.DirectionalLight&&h++,u instanceof THREE.PointLight&&r++,u instanceof THREE.SpotLight&&
t++,u instanceof THREE.HemisphereLight&&p++);e=h;g=r;h=t;i=p;p=u=0;for(t=b.length;p<t;p++)r=b[p],r.castShadow&&(r instanceof THREE.SpotLight&&u++,r instanceof THREE.DirectionalLight&&!r.shadowCascade&&u++);l=u;fc&&d&&d.useVertexTexture?m=1024:(b=f.getParameter(f.MAX_VERTEX_UNIFORM_VECTORS),b=Math.floor((b-20)/4),void 0!==d&&d instanceof THREE.SkinnedMesh&&(b=Math.min(d.bones.length,b),b<d.bones.length&&console.warn("WebGLRenderer: too many bones - "+d.bones.length+", this GPU supports just "+b+" (try OpenGL instead of ANGLE)")),
m=b);a:{r=a.fragmentShader;t=a.vertexShader;p=a.uniforms;b=a.attributes;u=a.defines;var c={map:!!a.map,envMap:!!a.envMap,lightMap:!!a.lightMap,bumpMap:!!a.bumpMap,normalMap:!!a.normalMap,specularMap:!!a.specularMap,vertexColors:a.vertexColors,fog:c,useFog:a.fog,fogExp:c instanceof THREE.FogExp2,sizeAttenuation:a.sizeAttenuation,skinning:a.skinning,maxBones:m,useVertexTexture:fc&&d&&d.useVertexTexture,boneTextureWidth:d&&d.boneTextureWidth,boneTextureHeight:d&&d.boneTextureHeight,morphTargets:a.morphTargets,
morphNormals:a.morphNormals,maxMorphTargets:this.maxMorphTargets,maxMorphNormals:this.maxMorphNormals,maxDirLights:e,maxPointLights:g,maxSpotLights:h,maxHemiLights:i,maxShadows:l,shadowMapEnabled:this.shadowMapEnabled&&d.receiveShadow,shadowMapType:this.shadowMapType,shadowMapDebug:this.shadowMapDebug,shadowMapCascade:this.shadowMapCascade,alphaTest:a.alphaTest,metal:a.metal,perPixel:a.perPixel,wrapAround:a.wrapAround,doubleSided:a.side===THREE.DoubleSide,flipSided:a.side===THREE.BackSide},v,x,w,
d=[];n?d.push(n):(d.push(r),d.push(t));for(x in u)d.push(x),d.push(u[x]);for(v in c)d.push(v),d.push(c[v]);n=d.join();v=0;for(x=La.length;v<x;v++)if(d=La[v],d.code===n){d.usedTimes++;k=d.program;break a}v="SHADOWMAP_TYPE_BASIC";c.shadowMapType===THREE.PCFShadowMap?v="SHADOWMAP_TYPE_PCF":c.shadowMapType===THREE.PCFSoftShadowMap&&(v="SHADOWMAP_TYPE_PCF_SOFT");x=[];for(w in u)d=u[w],!1!==d&&(d="#define "+w+" "+d,x.push(d));d=x.join("\n");w=f.createProgram();x=["precision "+la+" float;",d,Ac?"#define VERTEX_TEXTURES":
"",M.gammaInput?"#define GAMMA_INPUT":"",M.gammaOutput?"#define GAMMA_OUTPUT":"",M.physicallyBasedShading?"#define PHYSICALLY_BASED_SHADING":"","#define MAX_DIR_LIGHTS "+c.maxDirLights,"#define MAX_POINT_LIGHTS "+c.maxPointLights,"#define MAX_SPOT_LIGHTS "+c.maxSpotLights,"#define MAX_HEMI_LIGHTS "+c.maxHemiLights,"#define MAX_SHADOWS "+c.maxShadows,"#define MAX_BONES "+c.maxBones,c.map?"#define USE_MAP":"",c.envMap?"#define USE_ENVMAP":"",c.lightMap?"#define USE_LIGHTMAP":"",c.bumpMap?"#define USE_BUMPMAP":
"",c.normalMap?"#define USE_NORMALMAP":"",c.specularMap?"#define USE_SPECULARMAP":"",c.vertexColors?"#define USE_COLOR":"",c.skinning?"#define USE_SKINNING":"",c.useVertexTexture?"#define BONE_TEXTURE":"",c.boneTextureWidth?"#define N_BONE_PIXEL_X "+c.boneTextureWidth.toFixed(1):"",c.boneTextureHeight?"#define N_BONE_PIXEL_Y "+c.boneTextureHeight.toFixed(1):"",c.morphTargets?"#define USE_MORPHTARGETS":"",c.morphNormals?"#define USE_MORPHNORMALS":"",c.perPixel?"#define PHONG_PER_PIXEL":"",c.wrapAround?
"#define WRAP_AROUND":"",c.doubleSided?"#define DOUBLE_SIDED":"",c.flipSided?"#define FLIP_SIDED":"",c.shadowMapEnabled?"#define USE_SHADOWMAP":"",c.shadowMapEnabled?"#define "+v:"",c.shadowMapDebug?"#define SHADOWMAP_DEBUG":"",c.shadowMapCascade?"#define SHADOWMAP_CASCADE":"",c.sizeAttenuation?"#define USE_SIZEATTENUATION":"","uniform mat4 modelMatrix;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform mat4 viewMatrix;\nuniform mat3 normalMatrix;\nuniform vec3 cameraPosition;\nattribute vec3 position;\nattribute vec3 normal;\nattribute vec2 uv;\nattribute vec2 uv2;\n#ifdef USE_COLOR\nattribute vec3 color;\n#endif\n#ifdef USE_MORPHTARGETS\nattribute vec3 morphTarget0;\nattribute vec3 morphTarget1;\nattribute vec3 morphTarget2;\nattribute vec3 morphTarget3;\n#ifdef USE_MORPHNORMALS\nattribute vec3 morphNormal0;\nattribute vec3 morphNormal1;\nattribute vec3 morphNormal2;\nattribute vec3 morphNormal3;\n#else\nattribute vec3 morphTarget4;\nattribute vec3 morphTarget5;\nattribute vec3 morphTarget6;\nattribute vec3 morphTarget7;\n#endif\n#endif\n#ifdef USE_SKINNING\nattribute vec4 skinIndex;\nattribute vec4 skinWeight;\n#endif\n"].join("\n");
v=["precision "+la+" float;",c.bumpMap||c.normalMap?"#extension GL_OES_standard_derivatives : enable":"",d,"#define MAX_DIR_LIGHTS "+c.maxDirLights,"#define MAX_POINT_LIGHTS "+c.maxPointLights,"#define MAX_SPOT_LIGHTS "+c.maxSpotLights,"#define MAX_HEMI_LIGHTS "+c.maxHemiLights,"#define MAX_SHADOWS "+c.maxShadows,c.alphaTest?"#define ALPHATEST "+c.alphaTest:"",M.gammaInput?"#define GAMMA_INPUT":"",M.gammaOutput?"#define GAMMA_OUTPUT":"",M.physicallyBasedShading?"#define PHYSICALLY_BASED_SHADING":
"",c.useFog&&c.fog?"#define USE_FOG":"",c.useFog&&c.fogExp?"#define FOG_EXP2":"",c.map?"#define USE_MAP":"",c.envMap?"#define USE_ENVMAP":"",c.lightMap?"#define USE_LIGHTMAP":"",c.bumpMap?"#define USE_BUMPMAP":"",c.normalMap?"#define USE_NORMALMAP":"",c.specularMap?"#define USE_SPECULARMAP":"",c.vertexColors?"#define USE_COLOR":"",c.metal?"#define METAL":"",c.perPixel?"#define PHONG_PER_PIXEL":"",c.wrapAround?"#define WRAP_AROUND":"",c.doubleSided?"#define DOUBLE_SIDED":"",c.flipSided?"#define FLIP_SIDED":
"",c.shadowMapEnabled?"#define USE_SHADOWMAP":"",c.shadowMapEnabled?"#define "+v:"",c.shadowMapDebug?"#define SHADOWMAP_DEBUG":"",c.shadowMapCascade?"#define SHADOWMAP_CASCADE":"","uniform mat4 viewMatrix;\nuniform vec3 cameraPosition;\n"].join("\n");v=X("fragment",v+r);x=X("vertex",x+t);f.attachShader(w,x);f.attachShader(w,v);f.linkProgram(w);f.getProgramParameter(w,f.LINK_STATUS)||console.error("Could not initialise shader\nVALIDATE_STATUS: "+f.getProgramParameter(w,f.VALIDATE_STATUS)+", gl error ["+
f.getError()+"]");f.deleteShader(v);f.deleteShader(x);w.uniforms={};w.attributes={};var y;v="viewMatrix modelViewMatrix projectionMatrix normalMatrix modelMatrix cameraPosition morphTargetInfluences".split(" ");c.useVertexTexture?v.push("boneTexture"):v.push("boneGlobalMatrices");for(y in p)v.push(y);y=v;v=0;for(x=y.length;v<x;v++)p=y[v],w.uniforms[p]=f.getUniformLocation(w,p);v="position normal uv uv2 tangent color skinIndex skinWeight lineDistance".split(" ");for(y=0;y<c.maxMorphTargets;y++)v.push("morphTarget"+
y);for(y=0;y<c.maxMorphNormals;y++)v.push("morphNormal"+y);for(k in b)v.push(k);k=v;y=0;for(b=k.length;y<b;y++)v=k[y],w.attributes[v]=f.getAttribLocation(w,v);w.id=jd++;La.push({program:w,code:n,usedTimes:1});M.info.memory.programs=La.length;k=w}a.program=k;y=a.program.attributes;if(a.morphTargets){a.numSupportedMorphTargets=0;b="morphTarget";for(k=0;k<this.maxMorphTargets;k++)w=b+k,0<=y[w]&&a.numSupportedMorphTargets++}if(a.morphNormals){a.numSupportedMorphNormals=0;b="morphNormal";for(k=0;k<this.maxMorphNormals;k++)w=
b+k,0<=y[w]&&a.numSupportedMorphNormals++}a.uniformsList=[];for(j in a.uniforms)a.uniformsList.push([a.uniforms[j],j])};this.setFaceCulling=function(a,b){a===THREE.CullFaceNone?f.disable(f.CULL_FACE):(b===THREE.FrontFaceDirectionCW?f.frontFace(f.CW):f.frontFace(f.CCW),a===THREE.CullFaceBack?f.cullFace(f.BACK):a===THREE.CullFaceFront?f.cullFace(f.FRONT):f.cullFace(f.FRONT_AND_BACK),f.enable(f.CULL_FACE))};this.setMaterialFaces=function(a){var b=a.side===THREE.DoubleSide,a=a.side===THREE.BackSide;Z!==
b&&(b?f.disable(f.CULL_FACE):f.enable(f.CULL_FACE),Z=b);ca!==a&&(a?f.frontFace(f.CW):f.frontFace(f.CCW),ca=a)};this.setDepthTest=function(a){Qa!==a&&(a?f.enable(f.DEPTH_TEST):f.disable(f.DEPTH_TEST),Qa=a)};this.setDepthWrite=function(a){ha!==a&&(f.depthMask(a),ha=a)};this.setBlending=function(a,b,c,d){a!==pa&&(a===THREE.NoBlending?f.disable(f.BLEND):a===THREE.AdditiveBlending?(f.enable(f.BLEND),f.blendEquation(f.FUNC_ADD),f.blendFunc(f.SRC_ALPHA,f.ONE)):a===THREE.SubtractiveBlending?(f.enable(f.BLEND),
f.blendEquation(f.FUNC_ADD),f.blendFunc(f.ZERO,f.ONE_MINUS_SRC_COLOR)):a===THREE.MultiplyBlending?(f.enable(f.BLEND),f.blendEquation(f.FUNC_ADD),f.blendFunc(f.ZERO,f.SRC_COLOR)):a===THREE.CustomBlending?f.enable(f.BLEND):(f.enable(f.BLEND),f.blendEquationSeparate(f.FUNC_ADD,f.FUNC_ADD),f.blendFuncSeparate(f.SRC_ALPHA,f.ONE_MINUS_SRC_ALPHA,f.ONE,f.ONE_MINUS_SRC_ALPHA)),pa=a);if(a===THREE.CustomBlending){if(b!==ga&&(f.blendEquation(S(b)),ga=b),c!==fa||d!==Ta)f.blendFunc(S(c),S(d)),fa=c,Ta=d}else Ta=
fa=ga=null};this.setTexture=function(a,b){if(a.needsUpdate){a.__webglInit||(a.__webglInit=!0,a.addEventListener("dispose",Rc),a.__webglTexture=f.createTexture(),M.info.memory.textures++);f.activeTexture(f.TEXTURE0+b);f.bindTexture(f.TEXTURE_2D,a.__webglTexture);f.pixelStorei(f.UNPACK_FLIP_Y_WEBGL,a.flipY);f.pixelStorei(f.UNPACK_PREMULTIPLY_ALPHA_WEBGL,a.premultiplyAlpha);f.pixelStorei(f.UNPACK_ALIGNMENT,a.unpackAlignment);var c=a.image,d=0===(c.width&c.width-1)&&0===(c.height&c.height-1),e=S(a.format),
g=S(a.type);B(f.TEXTURE_2D,a,d);var h=a.mipmaps;if(a instanceof THREE.DataTexture)if(0<h.length&&d){for(var i=0,j=h.length;i<j;i++)c=h[i],f.texImage2D(f.TEXTURE_2D,i,e,c.width,c.height,0,e,g,c.data);a.generateMipmaps=!1}else f.texImage2D(f.TEXTURE_2D,0,e,c.width,c.height,0,e,g,c.data);else if(a instanceof THREE.CompressedTexture){i=0;for(j=h.length;i<j;i++)c=h[i],f.compressedTexImage2D(f.TEXTURE_2D,i,e,c.width,c.height,0,c.data)}else if(0<h.length&&d){i=0;for(j=h.length;i<j;i++)c=h[i],f.texImage2D(f.TEXTURE_2D,
i,e,e,g,c);a.generateMipmaps=!1}else f.texImage2D(f.TEXTURE_2D,0,e,e,g,a.image);a.generateMipmaps&&d&&f.generateMipmap(f.TEXTURE_2D);a.needsUpdate=!1;if(a.onUpdate)a.onUpdate()}else f.activeTexture(f.TEXTURE0+b),f.bindTexture(f.TEXTURE_2D,a.__webglTexture)};this.setRenderTarget=function(a){var b=a instanceof THREE.WebGLRenderTargetCube;if(a&&!a.__webglFramebuffer){void 0===a.depthBuffer&&(a.depthBuffer=!0);void 0===a.stencilBuffer&&(a.stencilBuffer=!0);a.addEventListener("dispose",Sc);a.__webglTexture=
f.createTexture();M.info.memory.textures++;var c=0===(a.width&a.width-1)&&0===(a.height&a.height-1),d=S(a.format),e=S(a.type);if(b){a.__webglFramebuffer=[];a.__webglRenderbuffer=[];f.bindTexture(f.TEXTURE_CUBE_MAP,a.__webglTexture);B(f.TEXTURE_CUBE_MAP,a,c);for(var g=0;6>g;g++){a.__webglFramebuffer[g]=f.createFramebuffer();a.__webglRenderbuffer[g]=f.createRenderbuffer();f.texImage2D(f.TEXTURE_CUBE_MAP_POSITIVE_X+g,0,d,a.width,a.height,0,d,e,null);var h=a,i=f.TEXTURE_CUBE_MAP_POSITIVE_X+g;f.bindFramebuffer(f.FRAMEBUFFER,
a.__webglFramebuffer[g]);f.framebufferTexture2D(f.FRAMEBUFFER,f.COLOR_ATTACHMENT0,i,h.__webglTexture,0);P(a.__webglRenderbuffer[g],a)}c&&f.generateMipmap(f.TEXTURE_CUBE_MAP)}else a.__webglFramebuffer=f.createFramebuffer(),a.__webglRenderbuffer=a.shareDepthFrom?a.shareDepthFrom.__webglRenderbuffer:f.createRenderbuffer(),f.bindTexture(f.TEXTURE_2D,a.__webglTexture),B(f.TEXTURE_2D,a,c),f.texImage2D(f.TEXTURE_2D,0,d,a.width,a.height,0,d,e,null),d=f.TEXTURE_2D,f.bindFramebuffer(f.FRAMEBUFFER,a.__webglFramebuffer),
f.framebufferTexture2D(f.FRAMEBUFFER,f.COLOR_ATTACHMENT0,d,a.__webglTexture,0),a.shareDepthFrom?a.depthBuffer&&!a.stencilBuffer?f.framebufferRenderbuffer(f.FRAMEBUFFER,f.DEPTH_ATTACHMENT,f.RENDERBUFFER,a.__webglRenderbuffer):a.depthBuffer&&a.stencilBuffer&&f.framebufferRenderbuffer(f.FRAMEBUFFER,f.DEPTH_STENCIL_ATTACHMENT,f.RENDERBUFFER,a.__webglRenderbuffer):P(a.__webglRenderbuffer,a),c&&f.generateMipmap(f.TEXTURE_2D);b?f.bindTexture(f.TEXTURE_CUBE_MAP,null):f.bindTexture(f.TEXTURE_2D,null);f.bindRenderbuffer(f.RENDERBUFFER,
null);f.bindFramebuffer(f.FRAMEBUFFER,null)}a?(b=b?a.__webglFramebuffer[a.activeCubeFace]:a.__webglFramebuffer,c=a.width,a=a.height,e=d=0):(b=null,c=dc,a=ec,d=Qb,e=lc);b!==Mc&&(f.bindFramebuffer(f.FRAMEBUFFER,b),f.viewport(d,e,c,a),Mc=b);Nc=c;Oc=a};this.shadowMapPlugin=new THREE.ShadowMapPlugin;this.addPrePlugin(this.shadowMapPlugin);this.addPostPlugin(new THREE.SpritePlugin);this.addPostPlugin(new THREE.LensFlarePlugin)};THREE.WebGLRenderTarget=function(a,b,c){THREE.EventDispatcher.call(this);this.width=a;this.height=b;c=c||{};this.wrapS=void 0!==c.wrapS?c.wrapS:THREE.ClampToEdgeWrapping;this.wrapT=void 0!==c.wrapT?c.wrapT:THREE.ClampToEdgeWrapping;this.magFilter=void 0!==c.magFilter?c.magFilter:THREE.LinearFilter;this.minFilter=void 0!==c.minFilter?c.minFilter:THREE.LinearMipMapLinearFilter;this.anisotropy=void 0!==c.anisotropy?c.anisotropy:1;this.offset=new THREE.Vector2(0,0);this.repeat=new THREE.Vector2(1,1);
this.format=void 0!==c.format?c.format:THREE.RGBAFormat;this.type=void 0!==c.type?c.type:THREE.UnsignedByteType;this.depthBuffer=void 0!==c.depthBuffer?c.depthBuffer:!0;this.stencilBuffer=void 0!==c.stencilBuffer?c.stencilBuffer:!0;this.generateMipmaps=!0;this.shareDepthFrom=null};
THREE.WebGLRenderTarget.prototype.clone=function(){var a=new THREE.WebGLRenderTarget(this.width,this.height);a.wrapS=this.wrapS;a.wrapT=this.wrapT;a.magFilter=this.magFilter;a.minFilter=this.minFilter;a.anisotropy=this.anisotropy;a.offset.copy(this.offset);a.repeat.copy(this.repeat);a.format=this.format;a.type=this.type;a.depthBuffer=this.depthBuffer;a.stencilBuffer=this.stencilBuffer;a.generateMipmaps=this.generateMipmaps;a.shareDepthFrom=this.shareDepthFrom;return a};
THREE.WebGLRenderTarget.prototype.dispose=function(){this.dispatchEvent({type:"dispose"})};THREE.WebGLRenderTargetCube=function(a,b,c){THREE.WebGLRenderTarget.call(this,a,b,c);this.activeCubeFace=0};THREE.WebGLRenderTargetCube.prototype=Object.create(THREE.WebGLRenderTarget.prototype);THREE.RenderableVertex=function(){this.positionWorld=new THREE.Vector3;this.positionScreen=new THREE.Vector4;this.visible=!0};THREE.RenderableVertex.prototype.copy=function(a){this.positionWorld.copy(a.positionWorld);this.positionScreen.copy(a.positionScreen)};THREE.RenderableFace3=function(){this.v1=new THREE.RenderableVertex;this.v2=new THREE.RenderableVertex;this.v3=new THREE.RenderableVertex;this.centroidModel=new THREE.Vector3;this.normalModel=new THREE.Vector3;this.normalModelView=new THREE.Vector3;this.vertexNormalsLength=0;this.vertexNormalsModel=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];this.vertexNormalsModelView=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];this.material=this.color=null;this.uvs=[[]];this.z=null};THREE.RenderableFace4=function(){this.v1=new THREE.RenderableVertex;this.v2=new THREE.RenderableVertex;this.v3=new THREE.RenderableVertex;this.v4=new THREE.RenderableVertex;this.centroidModel=new THREE.Vector3;this.normalModel=new THREE.Vector3;this.normalModelView=new THREE.Vector3;this.vertexNormalsLength=0;this.vertexNormalsModel=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];this.vertexNormalsModelView=[new THREE.Vector3,new THREE.Vector3,new THREE.Vector3,new THREE.Vector3];
this.material=this.color=null;this.uvs=[[]];this.z=null};THREE.RenderableObject=function(){this.z=this.object=null};THREE.RenderableParticle=function(){this.rotation=this.z=this.y=this.x=this.object=null;this.scale=new THREE.Vector2;this.material=null};THREE.RenderableLine=function(){this.z=null;this.v1=new THREE.RenderableVertex;this.v2=new THREE.RenderableVertex;this.material=null};THREE.Gyroscope=function(){THREE.Object3D.call(this)};THREE.Gyroscope.prototype=Object.create(THREE.Object3D.prototype);
THREE.Gyroscope.prototype.updateMatrixWorld=function(a){this.matrixAutoUpdate&&this.updateMatrix();if(this.matrixWorldNeedsUpdate||a)this.parent?(this.matrixWorld.multiplyMatrices(this.parent.matrixWorld,this.matrix),this.matrixWorld.decompose(this.translationWorld,this.rotationWorld,this.scaleWorld),this.matrix.decompose(this.translationObject,this.rotationObject,this.scaleObject),this.matrixWorld.compose(this.translationWorld,this.rotationObject,this.scaleWorld)):this.matrixWorld.copy(this.matrix),
this.matrixWorldNeedsUpdate=!1,a=!0;for(var b=0,c=this.children.length;b<c;b++)this.children[b].updateMatrixWorld(a)};THREE.Gyroscope.prototype.translationWorld=new THREE.Vector3;THREE.Gyroscope.prototype.translationObject=new THREE.Vector3;THREE.Gyroscope.prototype.rotationWorld=new THREE.Quaternion;THREE.Gyroscope.prototype.rotationObject=new THREE.Quaternion;THREE.Gyroscope.prototype.scaleWorld=new THREE.Vector3;THREE.Gyroscope.prototype.scaleObject=new THREE.Vector3;THREE.CameraHelper=function(a){function b(a,b,d){c(a,d);c(b,d)}function c(a,b){d.geometry.vertices.push(new THREE.Vector3);d.geometry.colors.push(new THREE.Color(b));void 0===d.pointMap[a]&&(d.pointMap[a]=[]);d.pointMap[a].push(d.geometry.vertices.length-1)}THREE.Line.call(this);var d=this;this.geometry=new THREE.Geometry;this.material=new THREE.LineBasicMaterial({color:16777215,vertexColors:THREE.FaceColors});this.type=THREE.LinePieces;this.matrixWorld=a.matrixWorld;this.matrixAutoUpdate=!1;this.pointMap=
{};b("n1","n2",16755200);b("n2","n4",16755200);b("n4","n3",16755200);b("n3","n1",16755200);b("f1","f2",16755200);b("f2","f4",16755200);b("f4","f3",16755200);b("f3","f1",16755200);b("n1","f1",16755200);b("n2","f2",16755200);b("n3","f3",16755200);b("n4","f4",16755200);b("p","n1",16711680);b("p","n2",16711680);b("p","n3",16711680);b("p","n4",16711680);b("u1","u2",43775);b("u2","u3",43775);b("u3","u1",43775);b("c","t",16777215);b("p","c",3355443);b("cn1","cn2",3355443);b("cn3","cn4",3355443);b("cf1",
"cf2",3355443);b("cf3","cf4",3355443);this.camera=a;this.update(a)};THREE.CameraHelper.prototype=Object.create(THREE.Line.prototype);
THREE.CameraHelper.prototype.update=function(){function a(a,d,e,g){THREE.CameraHelper.__v.set(d,e,g);THREE.CameraHelper.__projector.unprojectVector(THREE.CameraHelper.__v,THREE.CameraHelper.__c);a=b.pointMap[a];if(void 0!==a){d=0;for(e=a.length;d<e;d++)b.geometry.vertices[a[d]].copy(THREE.CameraHelper.__v)}}var b=this;THREE.CameraHelper.__c.projectionMatrix.copy(this.camera.projectionMatrix);a("c",0,0,-1);a("t",0,0,1);a("n1",-1,-1,-1);a("n2",1,-1,-1);a("n3",-1,1,-1);a("n4",1,1,-1);a("f1",-1,-1,1);
a("f2",1,-1,1);a("f3",-1,1,1);a("f4",1,1,1);a("u1",0.7,1.1,-1);a("u2",-0.7,1.1,-1);a("u3",0,2,-1);a("cf1",-1,0,1);a("cf2",1,0,1);a("cf3",0,-1,1);a("cf4",0,1,1);a("cn1",-1,0,-1);a("cn2",1,0,-1);a("cn3",0,-1,-1);a("cn4",0,1,-1);this.geometry.verticesNeedUpdate=!0};THREE.CameraHelper.__projector=new THREE.Projector;THREE.CameraHelper.__v=new THREE.Vector3;THREE.CameraHelper.__c=new THREE.Camera;THREE.DirectionalLightHelper=function(a,b){THREE.Object3D.call(this);this.light=a;this.position=a.position;this.direction=new THREE.Vector3;this.direction.subVectors(a.target.position,a.position);var c=THREE.Math.clamp(a.intensity,0,1);this.color=a.color.clone();this.color.multiplyScalar(c);var c=this.color.getHex(),d=new THREE.SphereGeometry(b,16,8),e=new THREE.AsteriskGeometry(1.25*b,2.25*b),g=new THREE.MeshBasicMaterial({color:c,fog:!1}),h=new THREE.LineBasicMaterial({color:c,fog:!1});this.lightSphere=
new THREE.Mesh(d,g);this.lightRays=new THREE.Line(e,h,THREE.LinePieces);this.add(this.lightSphere);this.add(this.lightRays);this.lightSphere.properties.isGizmo=!0;this.lightSphere.properties.gizmoSubject=a;this.lightSphere.properties.gizmoRoot=this;this.targetSphere=null;void 0!==a.target.properties.targetInverse&&(d=new THREE.SphereGeometry(b,8,4),e=new THREE.MeshBasicMaterial({color:c,wireframe:!0,fog:!1}),this.targetSphere=new THREE.Mesh(d,e),this.targetSphere.position=a.target.position,this.targetSphere.properties.isGizmo=
!0,this.targetSphere.properties.gizmoSubject=a.target,this.targetSphere.properties.gizmoRoot=this.targetSphere,c=new THREE.LineDashedMaterial({color:c,dashSize:4,gapSize:4,opacity:0.75,transparent:!0,fog:!1}),d=new THREE.Geometry,d.vertices.push(this.position.clone()),d.vertices.push(this.targetSphere.position.clone()),d.computeLineDistances(),this.targetLine=new THREE.Line(d,c),this.targetLine.properties.isGizmo=!0);this.properties.isGizmo=!0};THREE.DirectionalLightHelper.prototype=Object.create(THREE.Object3D.prototype);
THREE.DirectionalLightHelper.prototype.update=function(){this.direction.subVectors(this.light.target.position,this.light.position);var a=THREE.Math.clamp(this.light.intensity,0,1);this.color.copy(this.light.color);this.color.multiplyScalar(a);this.lightSphere.material.color.copy(this.color);this.lightRays.material.color.copy(this.color);null!==this.targetSphere&&(this.targetSphere.material.color.copy(this.color),this.targetLine.material.color.copy(this.color),this.targetLine.geometry.vertices[0].copy(this.light.position),
this.targetLine.geometry.vertices[1].copy(this.light.target.position),this.targetLine.geometry.computeLineDistances(),this.targetLine.geometry.verticesNeedUpdate=!0)};THREE.HemisphereLightHelper=function(a,b,c){THREE.Object3D.call(this);this.light=a;this.position=a.position;var d=THREE.Math.clamp(a.intensity,0,1);this.color=a.color.clone();this.color.multiplyScalar(d);var e=this.color.getHex();this.groundColor=a.groundColor.clone();this.groundColor.multiplyScalar(d);for(var d=this.groundColor.getHex(),g=new THREE.SphereGeometry(b,16,8,0,2*Math.PI,0,0.5*Math.PI),h=new THREE.SphereGeometry(b,16,8,0,2*Math.PI,0.5*Math.PI,Math.PI),i=new THREE.MeshBasicMaterial({color:e,
fog:!1}),j=new THREE.MeshBasicMaterial({color:d,fog:!1}),k=0,n=g.faces.length;k<n;k++)g.faces[k].materialIndex=0;k=0;for(n=h.faces.length;k<n;k++)h.faces[k].materialIndex=1;THREE.GeometryUtils.merge(g,h);this.lightSphere=new THREE.Mesh(g,new THREE.MeshFaceMaterial([i,j]));this.lightArrow=new THREE.ArrowHelper(new THREE.Vector3(0,1,0),new THREE.Vector3(0,1.1*(b+c),0),c,e);this.lightArrow.rotation.x=Math.PI;this.lightArrowGround=new THREE.ArrowHelper(new THREE.Vector3(0,1,0),new THREE.Vector3(0,-1.1*
(b+c),0),c,d);b=new THREE.Object3D;b.rotation.x=0.5*-Math.PI;b.add(this.lightSphere);b.add(this.lightArrow);b.add(this.lightArrowGround);this.add(b);this.lightSphere.properties.isGizmo=!0;this.lightSphere.properties.gizmoSubject=a;this.lightSphere.properties.gizmoRoot=this;this.properties.isGizmo=!0;this.target=new THREE.Vector3;this.lookAt(this.target)};THREE.HemisphereLightHelper.prototype=Object.create(THREE.Object3D.prototype);
THREE.HemisphereLightHelper.prototype.update=function(){var a=THREE.Math.clamp(this.light.intensity,0,1);this.color.copy(this.light.color);this.color.multiplyScalar(a);this.groundColor.copy(this.light.groundColor);this.groundColor.multiplyScalar(a);this.lightSphere.material.materials[0].color.copy(this.color);this.lightSphere.material.materials[1].color.copy(this.groundColor);this.lightArrow.setColor(this.color.getHex());this.lightArrowGround.setColor(this.groundColor.getHex());this.lookAt(this.target)};THREE.PointLightHelper=function(a,b){THREE.Object3D.call(this);this.light=a;this.position=a.position;var c=THREE.Math.clamp(a.intensity,0,1);this.color=a.color.clone();this.color.multiplyScalar(c);var d=this.color.getHex(),c=new THREE.SphereGeometry(b,16,8),e=new THREE.AsteriskGeometry(1.25*b,2.25*b),g=new THREE.IcosahedronGeometry(1,2),h=new THREE.MeshBasicMaterial({color:d,fog:!1}),i=new THREE.LineBasicMaterial({color:d,fog:!1}),d=new THREE.MeshBasicMaterial({color:d,fog:!1,wireframe:!0,opacity:0.1,
transparent:!0});this.lightSphere=new THREE.Mesh(c,h);this.lightRays=new THREE.Line(e,i,THREE.LinePieces);this.lightDistance=new THREE.Mesh(g,d);c=a.distance;0===c?this.lightDistance.visible=!1:this.lightDistance.scale.set(c,c,c);this.add(this.lightSphere);this.add(this.lightRays);this.add(this.lightDistance);this.lightSphere.properties.isGizmo=!0;this.lightSphere.properties.gizmoSubject=a;this.lightSphere.properties.gizmoRoot=this;this.properties.isGizmo=!0};THREE.PointLightHelper.prototype=Object.create(THREE.Object3D.prototype);
THREE.PointLightHelper.prototype.update=function(){var a=THREE.Math.clamp(this.light.intensity,0,1);this.color.copy(this.light.color);this.color.multiplyScalar(a);this.lightSphere.material.color.copy(this.color);this.lightRays.material.color.copy(this.color);this.lightDistance.material.color.copy(this.color);a=this.light.distance;0===a?this.lightDistance.visible=!1:(this.lightDistance.visible=!0,this.lightDistance.scale.set(a,a,a))};THREE.SpotLightHelper=function(a,b){THREE.Object3D.call(this);this.light=a;this.position=a.position;this.direction=new THREE.Vector3;this.direction.subVectors(a.target.position,a.position);var c=THREE.Math.clamp(a.intensity,0,1);this.color=a.color.clone();this.color.multiplyScalar(c);var c=this.color.getHex(),d=new THREE.SphereGeometry(b,16,8),e=new THREE.AsteriskGeometry(1.25*b,2.25*b),g=new THREE.CylinderGeometry(1E-4,1,1,8,1,!0),h=new THREE.Matrix4;h.rotateX(-Math.PI/2);h.translate(new THREE.Vector3(0,
-0.5,0));g.applyMatrix(h);var i=new THREE.MeshBasicMaterial({color:c,fog:!1}),h=new THREE.LineBasicMaterial({color:c,fog:!1}),j=new THREE.MeshBasicMaterial({color:c,fog:!1,wireframe:!0,opacity:0.3,transparent:!0});this.lightSphere=new THREE.Mesh(d,i);this.lightCone=new THREE.Mesh(g,j);d=a.distance?a.distance:1E4;g=2*d*Math.tan(0.5*a.angle);this.lightCone.scale.set(g,g,d);this.lightRays=new THREE.Line(e,h,THREE.LinePieces);this.gyroscope=new THREE.Gyroscope;this.gyroscope.add(this.lightSphere);this.gyroscope.add(this.lightRays);
this.add(this.gyroscope);this.add(this.lightCone);this.lookAt(a.target.position);this.lightSphere.properties.isGizmo=!0;this.lightSphere.properties.gizmoSubject=a;this.lightSphere.properties.gizmoRoot=this;this.targetSphere=null;void 0!==a.target.properties.targetInverse&&(e=new THREE.SphereGeometry(b,8,4),h=new THREE.MeshBasicMaterial({color:c,wireframe:!0,fog:!1}),this.targetSphere=new THREE.Mesh(e,h),this.targetSphere.position=a.target.position,this.targetSphere.properties.isGizmo=!0,this.targetSphere.properties.gizmoSubject=
a.target,this.targetSphere.properties.gizmoRoot=this.targetSphere,c=new THREE.LineDashedMaterial({color:c,dashSize:4,gapSize:4,opacity:0.75,transparent:!0,fog:!1}),e=new THREE.Geometry,e.vertices.push(this.position.clone()),e.vertices.push(this.targetSphere.position.clone()),e.computeLineDistances(),this.targetLine=new THREE.Line(e,c),this.targetLine.properties.isGizmo=!0);this.properties.isGizmo=!0};THREE.SpotLightHelper.prototype=Object.create(THREE.Object3D.prototype);
THREE.SpotLightHelper.prototype.update=function(){this.direction.subVectors(this.light.target.position,this.light.position);this.lookAt(this.light.target.position);var a=this.light.distance?this.light.distance:1E4,b=2*a*Math.tan(0.5*this.light.angle);this.lightCone.scale.set(b,b,a);a=THREE.Math.clamp(this.light.intensity,0,1);this.color.copy(this.light.color);this.color.multiplyScalar(a);this.lightSphere.material.color.copy(this.color);this.lightRays.material.color.copy(this.color);this.lightCone.material.color.copy(this.color);
null!==this.targetSphere&&(this.targetSphere.material.color.copy(this.color),this.targetLine.material.color.copy(this.color),this.targetLine.geometry.vertices[0].copy(this.light.position),this.targetLine.geometry.vertices[1].copy(this.light.target.position),this.targetLine.geometry.computeLineDistances(),this.targetLine.geometry.verticesNeedUpdate=!0)};THREE.LensFlare=function(a,b,c,d,e){THREE.Object3D.call(this);this.lensFlares=[];this.positionScreen=new THREE.Vector3;this.customUpdateCallback=void 0;void 0!==a&&this.add(a,b,c,d,e)};THREE.LensFlare.prototype=Object.create(THREE.Object3D.prototype);
THREE.LensFlare.prototype.add=function(a,b,c,d,e,g){void 0===b&&(b=-1);void 0===c&&(c=0);void 0===g&&(g=1);void 0===e&&(e=new THREE.Color(16777215));void 0===d&&(d=THREE.NormalBlending);c=Math.min(c,Math.max(0,c));this.lensFlares.push({texture:a,size:b,distance:c,x:0,y:0,z:0,scale:1,rotation:1,opacity:g,color:e,blending:d})};
THREE.LensFlare.prototype.updateLensFlares=function(){var a,b=this.lensFlares.length,c,d=2*-this.positionScreen.x,e=2*-this.positionScreen.y;for(a=0;a<b;a++)c=this.lensFlares[a],c.x=this.positionScreen.x+d*c.distance,c.y=this.positionScreen.y+e*c.distance,c.wantedRotation=0.25*c.x*Math.PI,c.rotation+=0.25*(c.wantedRotation-c.rotation)};THREE.ImmediateRenderObject=function(){THREE.Object3D.call(this);this.render=function(){}};THREE.ImmediateRenderObject.prototype=Object.create(THREE.Object3D.prototype);THREE.LensFlarePlugin=function(){function a(a,c){var d=b.createProgram(),e=b.createShader(b.FRAGMENT_SHADER),g=b.createShader(b.VERTEX_SHADER),h="precision "+c+" float;\n";b.shaderSource(e,h+a.fragmentShader);b.shaderSource(g,h+a.vertexShader);b.compileShader(e);b.compileShader(g);b.attachShader(d,e);b.attachShader(d,g);b.linkProgram(d);return d}var b,c,d,e,g,h,i,j,k,n,m,u,v;this.init=function(p){b=p.context;c=p;d=p.getPrecision();e=new Float32Array(16);g=new Uint16Array(6);p=0;e[p++]=-1;e[p++]=-1;
e[p++]=0;e[p++]=0;e[p++]=1;e[p++]=-1;e[p++]=1;e[p++]=0;e[p++]=1;e[p++]=1;e[p++]=1;e[p++]=1;e[p++]=-1;e[p++]=1;e[p++]=0;e[p++]=1;p=0;g[p++]=0;g[p++]=1;g[p++]=2;g[p++]=0;g[p++]=2;g[p++]=3;h=b.createBuffer();i=b.createBuffer();b.bindBuffer(b.ARRAY_BUFFER,h);b.bufferData(b.ARRAY_BUFFER,e,b.STATIC_DRAW);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,i);b.bufferData(b.ELEMENT_ARRAY_BUFFER,g,b.STATIC_DRAW);j=b.createTexture();k=b.createTexture();b.bindTexture(b.TEXTURE_2D,j);b.texImage2D(b.TEXTURE_2D,0,b.RGB,16,16,
0,b.RGB,b.UNSIGNED_BYTE,null);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.NEAREST);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.NEAREST);b.bindTexture(b.TEXTURE_2D,k);b.texImage2D(b.TEXTURE_2D,0,b.RGBA,16,16,0,b.RGBA,b.UNSIGNED_BYTE,null);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_S,b.CLAMP_TO_EDGE);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_WRAP_T,b.CLAMP_TO_EDGE);
b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MAG_FILTER,b.NEAREST);b.texParameteri(b.TEXTURE_2D,b.TEXTURE_MIN_FILTER,b.NEAREST);0>=b.getParameter(b.MAX_VERTEX_TEXTURE_IMAGE_UNITS)?(n=!1,m=a(THREE.ShaderFlares.lensFlare,d)):(n=!0,m=a(THREE.ShaderFlares.lensFlareVertexTexture,d));u={};v={};u.vertex=b.getAttribLocation(m,"position");u.uv=b.getAttribLocation(m,"uv");v.renderType=b.getUniformLocation(m,"renderType");v.map=b.getUniformLocation(m,"map");v.occlusionMap=b.getUniformLocation(m,"occlusionMap");v.opacity=
b.getUniformLocation(m,"opacity");v.color=b.getUniformLocation(m,"color");v.scale=b.getUniformLocation(m,"scale");v.rotation=b.getUniformLocation(m,"rotation");v.screenPosition=b.getUniformLocation(m,"screenPosition")};this.render=function(a,d,e,g){var a=a.__webglFlares,w=a.length;if(w){var A=new THREE.Vector3,r=g/e,N=0.5*e,E=0.5*g,C=16/g,y=new THREE.Vector2(C*r,C),R=new THREE.Vector3(1,1,0),I=new THREE.Vector2(1,1),F=v,C=u;b.useProgram(m);b.enableVertexAttribArray(u.vertex);b.enableVertexAttribArray(u.uv);
b.uniform1i(F.occlusionMap,0);b.uniform1i(F.map,1);b.bindBuffer(b.ARRAY_BUFFER,h);b.vertexAttribPointer(C.vertex,2,b.FLOAT,!1,16,0);b.vertexAttribPointer(C.uv,2,b.FLOAT,!1,16,8);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,i);b.disable(b.CULL_FACE);b.depthMask(!1);var X,B,P,D,S;for(X=0;X<w;X++)if(C=16/g,y.set(C*r,C),D=a[X],A.set(D.matrixWorld.elements[12],D.matrixWorld.elements[13],D.matrixWorld.elements[14]),A.applyMatrix4(d.matrixWorldInverse),A.applyProjection(d.projectionMatrix),R.copy(A),I.x=R.x*N+N,
I.y=R.y*E+E,n||0<I.x&&I.x<e&&0<I.y&&I.y<g){b.activeTexture(b.TEXTURE1);b.bindTexture(b.TEXTURE_2D,j);b.copyTexImage2D(b.TEXTURE_2D,0,b.RGB,I.x-8,I.y-8,16,16,0);b.uniform1i(F.renderType,0);b.uniform2f(F.scale,y.x,y.y);b.uniform3f(F.screenPosition,R.x,R.y,R.z);b.disable(b.BLEND);b.enable(b.DEPTH_TEST);b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0);b.activeTexture(b.TEXTURE0);b.bindTexture(b.TEXTURE_2D,k);b.copyTexImage2D(b.TEXTURE_2D,0,b.RGBA,I.x-8,I.y-8,16,16,0);b.uniform1i(F.renderType,1);b.disable(b.DEPTH_TEST);
b.activeTexture(b.TEXTURE1);b.bindTexture(b.TEXTURE_2D,j);b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0);D.positionScreen.copy(R);D.customUpdateCallback?D.customUpdateCallback(D):D.updateLensFlares();b.uniform1i(F.renderType,2);b.enable(b.BLEND);B=0;for(P=D.lensFlares.length;B<P;B++)S=D.lensFlares[B],0.001<S.opacity&&0.001<S.scale&&(R.x=S.x,R.y=S.y,R.z=S.z,C=S.size*S.scale/g,y.x=C*r,y.y=C,b.uniform3f(F.screenPosition,R.x,R.y,R.z),b.uniform2f(F.scale,y.x,y.y),b.uniform1f(F.rotation,S.rotation),b.uniform1f(F.opacity,
S.opacity),b.uniform3f(F.color,S.color.r,S.color.g,S.color.b),c.setBlending(S.blending,S.blendEquation,S.blendSrc,S.blendDst),c.setTexture(S.texture,1),b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0))}b.enable(b.CULL_FACE);b.enable(b.DEPTH_TEST);b.depthMask(!0)}}};THREE.ShadowMapPlugin=function(){var a,b,c,d,e,g,h=new THREE.Frustum,i=new THREE.Matrix4,j=new THREE.Vector3,k=new THREE.Vector3;this.init=function(h){a=h.context;b=h;var h=THREE.ShaderLib.depthRGBA,i=THREE.UniformsUtils.clone(h.uniforms);c=new THREE.ShaderMaterial({fragmentShader:h.fragmentShader,vertexShader:h.vertexShader,uniforms:i});d=new THREE.ShaderMaterial({fragmentShader:h.fragmentShader,vertexShader:h.vertexShader,uniforms:i,morphTargets:!0});e=new THREE.ShaderMaterial({fragmentShader:h.fragmentShader,
vertexShader:h.vertexShader,uniforms:i,skinning:!0});g=new THREE.ShaderMaterial({fragmentShader:h.fragmentShader,vertexShader:h.vertexShader,uniforms:i,morphTargets:!0,skinning:!0});c._shadowPass=!0;d._shadowPass=!0;e._shadowPass=!0;g._shadowPass=!0};this.render=function(a,c){b.shadowMapEnabled&&b.shadowMapAutoUpdate&&this.update(a,c)};this.update=function(n,m){var u,v,p,l,t,x,w,A,r,N=[];l=0;a.clearColor(1,1,1,1);a.disable(a.BLEND);a.enable(a.CULL_FACE);a.frontFace(a.CCW);b.shadowMapCullFace===THREE.CullFaceFront?
a.cullFace(a.FRONT):a.cullFace(a.BACK);b.setDepthTest(!0);u=0;for(v=n.__lights.length;u<v;u++)if(p=n.__lights[u],p.castShadow)if(p instanceof THREE.DirectionalLight&&p.shadowCascade)for(t=0;t<p.shadowCascadeCount;t++){var E;if(p.shadowCascadeArray[t])E=p.shadowCascadeArray[t];else{r=p;w=t;E=new THREE.DirectionalLight;E.isVirtual=!0;E.onlyShadow=!0;E.castShadow=!0;E.shadowCameraNear=r.shadowCameraNear;E.shadowCameraFar=r.shadowCameraFar;E.shadowCameraLeft=r.shadowCameraLeft;E.shadowCameraRight=r.shadowCameraRight;
E.shadowCameraBottom=r.shadowCameraBottom;E.shadowCameraTop=r.shadowCameraTop;E.shadowCameraVisible=r.shadowCameraVisible;E.shadowDarkness=r.shadowDarkness;E.shadowBias=r.shadowCascadeBias[w];E.shadowMapWidth=r.shadowCascadeWidth[w];E.shadowMapHeight=r.shadowCascadeHeight[w];E.pointsWorld=[];E.pointsFrustum=[];A=E.pointsWorld;x=E.pointsFrustum;for(var C=0;8>C;C++)A[C]=new THREE.Vector3,x[C]=new THREE.Vector3;A=r.shadowCascadeNearZ[w];r=r.shadowCascadeFarZ[w];x[0].set(-1,-1,A);x[1].set(1,-1,A);x[2].set(-1,
1,A);x[3].set(1,1,A);x[4].set(-1,-1,r);x[5].set(1,-1,r);x[6].set(-1,1,r);x[7].set(1,1,r);E.originalCamera=m;x=new THREE.Gyroscope;x.position=p.shadowCascadeOffset;x.add(E);x.add(E.target);m.add(x);p.shadowCascadeArray[t]=E;console.log("Created virtualLight",E)}w=p;A=t;r=w.shadowCascadeArray[A];r.position.copy(w.position);r.target.position.copy(w.target.position);r.lookAt(r.target);r.shadowCameraVisible=w.shadowCameraVisible;r.shadowDarkness=w.shadowDarkness;r.shadowBias=w.shadowCascadeBias[A];x=w.shadowCascadeNearZ[A];
w=w.shadowCascadeFarZ[A];r=r.pointsFrustum;r[0].z=x;r[1].z=x;r[2].z=x;r[3].z=x;r[4].z=w;r[5].z=w;r[6].z=w;r[7].z=w;N[l]=E;l++}else N[l]=p,l++;u=0;for(v=N.length;u<v;u++){p=N[u];p.shadowMap||(t=THREE.LinearFilter,b.shadowMapType===THREE.PCFSoftShadowMap&&(t=THREE.NearestFilter),p.shadowMap=new THREE.WebGLRenderTarget(p.shadowMapWidth,p.shadowMapHeight,{minFilter:t,magFilter:t,format:THREE.RGBAFormat}),p.shadowMapSize=new THREE.Vector2(p.shadowMapWidth,p.shadowMapHeight),p.shadowMatrix=new THREE.Matrix4);
if(!p.shadowCamera){if(p instanceof THREE.SpotLight)p.shadowCamera=new THREE.PerspectiveCamera(p.shadowCameraFov,p.shadowMapWidth/p.shadowMapHeight,p.shadowCameraNear,p.shadowCameraFar);else if(p instanceof THREE.DirectionalLight)p.shadowCamera=new THREE.OrthographicCamera(p.shadowCameraLeft,p.shadowCameraRight,p.shadowCameraTop,p.shadowCameraBottom,p.shadowCameraNear,p.shadowCameraFar);else{console.error("Unsupported light type for shadow");continue}n.add(p.shadowCamera);b.autoUpdateScene&&n.updateMatrixWorld()}p.shadowCameraVisible&&
!p.cameraHelper&&(p.cameraHelper=new THREE.CameraHelper(p.shadowCamera),p.shadowCamera.add(p.cameraHelper));if(p.isVirtual&&E.originalCamera==m){t=m;l=p.shadowCamera;x=p.pointsFrustum;r=p.pointsWorld;j.set(Infinity,Infinity,Infinity);k.set(-Infinity,-Infinity,-Infinity);for(w=0;8>w;w++)A=r[w],A.copy(x[w]),THREE.ShadowMapPlugin.__projector.unprojectVector(A,t),A.applyMatrix4(l.matrixWorldInverse),A.x<j.x&&(j.x=A.x),A.x>k.x&&(k.x=A.x),A.y<j.y&&(j.y=A.y),A.y>k.y&&(k.y=A.y),A.z<j.z&&(j.z=A.z),A.z>k.z&&
(k.z=A.z);l.left=j.x;l.right=k.x;l.top=k.y;l.bottom=j.y;l.updateProjectionMatrix()}l=p.shadowMap;x=p.shadowMatrix;t=p.shadowCamera;t.position.getPositionFromMatrix(p.matrixWorld);t.lookAt(p.target.matrixWorld.getPosition());t.updateMatrixWorld();t.matrixWorldInverse.getInverse(t.matrixWorld);p.cameraHelper&&(p.cameraHelper.visible=p.shadowCameraVisible);p.shadowCameraVisible&&p.cameraHelper.update();x.set(0.5,0,0,0.5,0,0.5,0,0.5,0,0,0.5,0.5,0,0,0,1);x.multiply(t.projectionMatrix);x.multiply(t.matrixWorldInverse);
i.multiplyMatrices(t.projectionMatrix,t.matrixWorldInverse);h.setFromMatrix(i);b.setRenderTarget(l);b.clear();r=n.__webglObjects;p=0;for(l=r.length;p<l;p++)if(w=r[p],x=w.object,w.render=!1,x.visible&&x.castShadow&&(!(x instanceof THREE.Mesh||x instanceof THREE.ParticleSystem)||!x.frustumCulled||h.intersectsObject(x)))x._modelViewMatrix.multiplyMatrices(t.matrixWorldInverse,x.matrixWorld),w.render=!0;p=0;for(l=r.length;p<l;p++)w=r[p],w.render&&(x=w.object,w=w.buffer,C=x.material instanceof THREE.MeshFaceMaterial?
x.material.materials[0]:x.material,A=0<x.geometry.morphTargets.length&&C.morphTargets,C=x instanceof THREE.SkinnedMesh&&C.skinning,A=x.customDepthMaterial?x.customDepthMaterial:C?A?g:e:A?d:c,w instanceof THREE.BufferGeometry?b.renderBufferDirect(t,n.__lights,null,A,w,x):b.renderBuffer(t,n.__lights,null,A,w,x));r=n.__webglObjectsImmediate;p=0;for(l=r.length;p<l;p++)w=r[p],x=w.object,x.visible&&x.castShadow&&(x._modelViewMatrix.multiplyMatrices(t.matrixWorldInverse,x.matrixWorld),b.renderImmediateObject(t,
n.__lights,null,c,x))}u=b.getClearColor();v=b.getClearAlpha();a.clearColor(u.r,u.g,u.b,v);a.enable(a.BLEND);b.shadowMapCullFace===THREE.CullFaceFront&&a.cullFace(a.BACK)}};THREE.ShadowMapPlugin.__projector=new THREE.Projector;THREE.SpritePlugin=function(){function a(a,b){return a.z!==b.z?b.z-a.z:b.id-a.id}var b,c,d,e,g,h,i,j,k,n;this.init=function(a){b=a.context;c=a;d=a.getPrecision();e=new Float32Array(16);g=new Uint16Array(6);a=0;e[a++]=-1;e[a++]=-1;e[a++]=0;e[a++]=0;e[a++]=1;e[a++]=-1;e[a++]=1;e[a++]=0;e[a++]=1;e[a++]=1;e[a++]=1;e[a++]=1;e[a++]=-1;e[a++]=1;e[a++]=0;e[a++]=1;a=0;g[a++]=0;g[a++]=1;g[a++]=2;g[a++]=0;g[a++]=2;g[a++]=3;h=b.createBuffer();i=b.createBuffer();b.bindBuffer(b.ARRAY_BUFFER,h);b.bufferData(b.ARRAY_BUFFER,
e,b.STATIC_DRAW);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,i);b.bufferData(b.ELEMENT_ARRAY_BUFFER,g,b.STATIC_DRAW);var a=THREE.ShaderSprite.sprite,u=b.createProgram(),v=b.createShader(b.FRAGMENT_SHADER),p=b.createShader(b.VERTEX_SHADER),l="precision "+d+" float;\n";b.shaderSource(v,l+a.fragmentShader);b.shaderSource(p,l+a.vertexShader);b.compileShader(v);b.compileShader(p);b.attachShader(u,v);b.attachShader(u,p);b.linkProgram(u);j=u;k={};n={};k.position=b.getAttribLocation(j,"position");k.uv=b.getAttribLocation(j,
"uv");n.uvOffset=b.getUniformLocation(j,"uvOffset");n.uvScale=b.getUniformLocation(j,"uvScale");n.rotation=b.getUniformLocation(j,"rotation");n.scale=b.getUniformLocation(j,"scale");n.alignment=b.getUniformLocation(j,"alignment");n.color=b.getUniformLocation(j,"color");n.map=b.getUniformLocation(j,"map");n.opacity=b.getUniformLocation(j,"opacity");n.useScreenCoordinates=b.getUniformLocation(j,"useScreenCoordinates");n.sizeAttenuation=b.getUniformLocation(j,"sizeAttenuation");n.screenPosition=b.getUniformLocation(j,
"screenPosition");n.modelViewMatrix=b.getUniformLocation(j,"modelViewMatrix");n.projectionMatrix=b.getUniformLocation(j,"projectionMatrix");n.fogType=b.getUniformLocation(j,"fogType");n.fogDensity=b.getUniformLocation(j,"fogDensity");n.fogNear=b.getUniformLocation(j,"fogNear");n.fogFar=b.getUniformLocation(j,"fogFar");n.fogColor=b.getUniformLocation(j,"fogColor");n.alphaTest=b.getUniformLocation(j,"alphaTest")};this.render=function(d,e,g,p){var l=d.__webglSprites,t=l.length;if(t){var x=k,w=n,A=p/
g,g=0.5*g,r=0.5*p;b.useProgram(j);b.enableVertexAttribArray(x.position);b.enableVertexAttribArray(x.uv);b.disable(b.CULL_FACE);b.enable(b.BLEND);b.bindBuffer(b.ARRAY_BUFFER,h);b.vertexAttribPointer(x.position,2,b.FLOAT,!1,16,0);b.vertexAttribPointer(x.uv,2,b.FLOAT,!1,16,8);b.bindBuffer(b.ELEMENT_ARRAY_BUFFER,i);b.uniformMatrix4fv(w.projectionMatrix,!1,e.projectionMatrix.elements);b.activeTexture(b.TEXTURE0);b.uniform1i(w.map,0);var N=x=0,E=d.fog;E?(b.uniform3f(w.fogColor,E.color.r,E.color.g,E.color.b),
E instanceof THREE.Fog?(b.uniform1f(w.fogNear,E.near),b.uniform1f(w.fogFar,E.far),b.uniform1i(w.fogType,1),N=x=1):E instanceof THREE.FogExp2&&(b.uniform1f(w.fogDensity,E.density),b.uniform1i(w.fogType,2),N=x=2)):(b.uniform1i(w.fogType,0),N=x=0);for(var C,y,R=[],E=0;E<t;E++)C=l[E],y=C.material,C.visible&&0!==y.opacity&&(y.useScreenCoordinates?C.z=-C.position.z:(C._modelViewMatrix.multiplyMatrices(e.matrixWorldInverse,C.matrixWorld),C.z=-C._modelViewMatrix.elements[14]));l.sort(a);for(E=0;E<t;E++)C=
l[E],y=C.material,C.visible&&0!==y.opacity&&(y.map&&y.map.image&&y.map.image.width)&&(b.uniform1f(w.alphaTest,y.alphaTest),!0===y.useScreenCoordinates?(b.uniform1i(w.useScreenCoordinates,1),b.uniform3f(w.screenPosition,(C.position.x*c.devicePixelRatio-g)/g,(r-C.position.y*c.devicePixelRatio)/r,Math.max(0,Math.min(1,C.position.z))),R[0]=c.devicePixelRatio,R[1]=c.devicePixelRatio):(b.uniform1i(w.useScreenCoordinates,0),b.uniform1i(w.sizeAttenuation,y.sizeAttenuation?1:0),b.uniformMatrix4fv(w.modelViewMatrix,
!1,C._modelViewMatrix.elements),R[0]=1,R[1]=1),e=d.fog&&y.fog?N:0,x!==e&&(b.uniform1i(w.fogType,e),x=e),e=1/(y.scaleByViewport?p:1),R[0]*=e*A*C.scale.x,R[1]*=e*C.scale.y,b.uniform2f(w.uvScale,y.uvScale.x,y.uvScale.y),b.uniform2f(w.uvOffset,y.uvOffset.x,y.uvOffset.y),b.uniform2f(w.alignment,y.alignment.x,y.alignment.y),b.uniform1f(w.opacity,y.opacity),b.uniform3f(w.color,y.color.r,y.color.g,y.color.b),b.uniform1f(w.rotation,C.rotation),b.uniform2fv(w.scale,R),c.setBlending(y.blending,y.blendEquation,
y.blendSrc,y.blendDst),c.setDepthTest(y.depthTest),c.setDepthWrite(y.depthWrite),c.setTexture(y.map,0),b.drawElements(b.TRIANGLES,6,b.UNSIGNED_SHORT,0));b.enable(b.CULL_FACE)}}};THREE.SkySpherePlugin=function(a){function b(){e.bindBuffer(e.ARRAY_BUFFER,h.vertexPositionBuffer);e.vertexAttribPointer(h.vertexPositionAttribute,h.vertexPositionBuffer.itemSize,e.FLOAT,!1,0,0);e.bindBuffer(e.ARRAY_BUFFER,h.vertexUVBuffer);e.vertexAttribPointer(h.textureUVAttribute,h.vertexUVBuffer.itemSize,e.FLOAT,!1,0,0)}function c(a,b){for(var d in b)try{a[d]=b[d].constructor==Object?c(a[d],b[d]):b[d]}catch(e){a[d]=b[d]}return a}function d(a,b){var c=e.createShader(b);e.shaderSource(c,a);e.compileShader(c);
if(!e.getShaderParameter(c,e.COMPILE_STATUS))throw e.getShaderInfoLog(c);return c}var a=a||{},a=c(a,{mode:"sphereImage",staticImage:{imageSrc:"textures/skymap/sky00.jpg"},sphereImage:{imageSrc:"textures/skymap/apocalyptic_room.jpg",detail:3,radiusIfCameraHasNoFar:1E3,materialOptions:{}},onLoad:function(){}}),e,g,h,i,j=!1;this.init=function(b){if(!b instanceof THREE.WebGLRenderer)throw Error("SkySphere only works with WebGL");e=b.context;g=b;b.getPrecision();switch(a.mode){case "test":g.autoClear=
!1;break;case "staticImage":this.createProgramForMode(a.mode);g.autoClear=!1;i=e.createTexture();i.image=new Image;i.image.onload=function(){var b=i;e.bindTexture(e.TEXTURE_2D,b);e.texImage2D(e.TEXTURE_2D,0,e.RGBA,e.RGBA,e.UNSIGNED_BYTE,b.image);e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MAG_FILTER,e.NEAREST);e.texParameteri(e.TEXTURE_2D,e.TEXTURE_MIN_FILTER,e.NEAREST);e.bindTexture(e.TEXTURE_2D,null);j=!0;a.onLoad()};i.image.src=a.staticImage.imageSrc;this.initStaticImage();break;case "sphereImage":this.initSphereImage(b);
break;default:throw Error("SkySphere has no '"+a.mode+"' mode");}};this.createProgramForMode=function(b){if(void 0!==this.shaders[b]){var c=this.shaders[a.mode].vertex,g=this.shaders[a.mode].fragment,b=e.createProgram(),c=d(c,e.VERTEX_SHADER),g=d(g,e.FRAGMENT_SHADER);e.attachShader(b,c);e.attachShader(b,g);e.linkProgram(b);if(!e.getProgramParameter(b,e.LINK_STATUS))throw e.getProgramInfoLog(b);h=b;e.useProgram(h)}else throw Error("No GLSL shaders for mode '"+b+"'");};this.render=function(b,c,d,g){e.useProgram(h);
switch(a.mode){case "test":this.renderTest(b,c,d,g);break;case "staticImage":j&&this.renderStaticImage(b,c,d,g);break;case "sphereImage":this.renderSphereImage(b,c,d,g);break;default:throw Error("SkySphere has no '"+a.mode+"' mode");}};this.initStaticImage=function(){h.vertexPositionBuffer=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,h.vertexPositionBuffer);var a=[-1,-1,1,1,-1,1,-1,-1,1,-1,1,1];e.bufferData(e.ARRAY_BUFFER,new Float32Array(a),e.STATIC_DRAW);h.vertexPositionBuffer.itemSize=2;h.vertexPositionBuffer.numItems=
a.length/h.vertexPositionBuffer.itemSize;h.vertexUVBuffer=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,h.vertexUVBuffer);a=[0,1,1,0,0,0,0,1,1,1,1,0];e.bufferData(e.ARRAY_BUFFER,new Float32Array(a),e.STATIC_DRAW);h.vertexUVBuffer.itemSize=2;h.vertexUVBuffer.numItems=a.length/h.vertexUVBuffer.itemSize;h.vertexPositionAttribute=e.getAttribLocation(h,"aPosition");e.enableVertexAttribArray(h.vertexPositionAttribute);h.textureUVAttribute=e.getAttribLocation(h,"aTextureUV");e.enableVertexAttribArray(h.textureUVAttribute);
h.samplerUniform=e.getUniformLocation(h,"uSampler");b()};this.renderStaticImage=function(){b();e.activeTexture(e.TEXTURE0);e.bindTexture(e.TEXTURE_2D,i);e.uniform1i(h.samplerUniform,0);e.bindBuffer(e.ARRAY_BUFFER,h.vertexPositionBuffer);e.drawArrays(e.TRIANGLES,0,h.vertexPositionBuffer.numItems)};var k,n=!1;this.initSphereImage=function(){};this.renderSphereImage=function(b,c){if(!n){n=!0;var d=c.far||a.sphereImage.radiusIfCameraHasNoFar,e=a.sphereImage.detail,g=a.sphereImage.materialOptions||{};
g.map||(g.map=THREE.ImageUtils.loadTexture(a.sphereImage.imageSrc,new THREE.UVMapping,a.onLoad));k=new THREE.Mesh(new THREE.SphereGeometry(d,8*e,6*e),new THREE.MeshBasicMaterial(g));k.scale.x=-1;k.frustumCulled=!1;b.add(k)}k.position=c.matrixWorld.getPosition();k.updateMatrixWorld()};this.renderTest=function(){var a=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,a);e.bufferData(e.ARRAY_BUFFER,new Float32Array([-0.5,-0.5,0.5,-0.5,0,0.5]),e.STATIC_DRAW);var b=e.createBuffer();e.bindBuffer(e.ARRAY_BUFFER,
b);e.bufferData(e.ARRAY_BUFFER,new Float32Array([1,0,0,1,0,1,0,1,0,0,1,1]),e.STATIC_DRAW);b.itemSize=4;b.numItems=3;h.vertexPosAttrib=e.getAttribLocation(h,"aPosition");e.enableVertexAttribArray(h.vertexPosAttrib);h.vertexColorAttrib=e.getAttribLocation(h,"aColor");e.enableVertexAttribArray(h.vertexColorAttrib);e.bindBuffer(e.ARRAY_BUFFER,a);e.vertexAttribPointer(h.vertexPosAttrib,2,e.FLOAT,!1,0,0);e.bindBuffer(e.ARRAY_BUFFER,b);e.vertexAttribPointer(h.vertexColorAttrib,b.itemSize,e.FLOAT,!1,0,0);
e.drawArrays(e.TRIANGLES,0,3)};this.shaders={test:{vertex:"attribute vec2 aPosition;\nattribute vec4 aColor;\nvarying   vec4 vColor;\nvoid main(){\n  gl_Position = vec4(aPosition, 1.0, 1.0);\n  vColor = aColor;\n}",fragment:"precision mediump float;\nvarying   vec4 vColor;\nvoid main(){\n  gl_FragColor = vColor;\n}"},staticImage:{vertex:"attribute vec2 aPosition;\nattribute vec2 aTextureUV;\nvarying   vec2 vTextureUV;\nvoid main(){\n  gl_Position = vec4(aPosition, 1.0, 1.0);\n  vTextureUV = aTextureUV;\n}",
fragment:"precision mediump   float;\nuniform   sampler2D uSampler;\nvarying   vec2      vTextureUV;\nvoid main(){\n  gl_FragColor = texture2D(uSampler, vTextureUV);\n}"}}};THREE.ShaderFlares={lensFlareVertexTexture:{vertexShader:"uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nuniform sampler2D occlusionMap;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\nvec4 visibility = texture2D( occlusionMap, vec2( 0.1, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.1 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.5 ) ) +\ntexture2D( occlusionMap, vec2( 0.9, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.1, 0.9 ) ) +\ntexture2D( occlusionMap, vec2( 0.1, 0.5 ) ) +\ntexture2D( occlusionMap, vec2( 0.5, 0.5 ) );\nvVisibility = (       visibility.r / 9.0 ) *\n( 1.0 - visibility.g / 9.0 ) *\n(       visibility.b / 9.0 ) *\n( 1.0 - visibility.a / 9.0 );\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
fragmentShader:"uniform lowp int renderType;\nuniform sampler2D map;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvarying float vVisibility;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( 1.0, 0.0, 1.0, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * vVisibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"},lensFlare:{vertexShader:"uniform lowp int renderType;\nuniform vec3 screenPosition;\nuniform vec2 scale;\nuniform float rotation;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uv;\nvec2 pos = position;\nif( renderType == 2 ) {\npos.x = cos( rotation ) * position.x - sin( rotation ) * position.y;\npos.y = sin( rotation ) * position.x + cos( rotation ) * position.y;\n}\ngl_Position = vec4( ( pos * scale + screenPosition.xy ).xy, screenPosition.z, 1.0 );\n}",
fragmentShader:"precision mediump float;\nuniform lowp int renderType;\nuniform sampler2D map;\nuniform sampler2D occlusionMap;\nuniform float opacity;\nuniform vec3 color;\nvarying vec2 vUV;\nvoid main() {\nif( renderType == 0 ) {\ngl_FragColor = vec4( texture2D( map, vUV ).rgb, 0.0 );\n} else if( renderType == 1 ) {\ngl_FragColor = texture2D( map, vUV );\n} else {\nfloat visibility = texture2D( occlusionMap, vec2( 0.5, 0.1 ) ).a +\ntexture2D( occlusionMap, vec2( 0.9, 0.5 ) ).a +\ntexture2D( occlusionMap, vec2( 0.5, 0.9 ) ).a +\ntexture2D( occlusionMap, vec2( 0.1, 0.5 ) ).a;\nvisibility = ( 1.0 - visibility / 4.0 );\nvec4 texture = texture2D( map, vUV );\ntexture.a *= opacity * visibility;\ngl_FragColor = texture;\ngl_FragColor.rgb *= color;\n}\n}"}};THREE.ShaderSprite={sprite:{vertexShader:"uniform int useScreenCoordinates;\nuniform int sizeAttenuation;\nuniform vec3 screenPosition;\nuniform mat4 modelViewMatrix;\nuniform mat4 projectionMatrix;\nuniform float rotation;\nuniform vec2 scale;\nuniform vec2 alignment;\nuniform vec2 uvOffset;\nuniform vec2 uvScale;\nattribute vec2 position;\nattribute vec2 uv;\nvarying vec2 vUV;\nvoid main() {\nvUV = uvOffset + uv * uvScale;\nvec2 alignedPosition = position + alignment;\nvec2 rotatedPosition;\nrotatedPosition.x = ( cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y ) * scale.x;\nrotatedPosition.y = ( sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y ) * scale.y;\nvec4 finalPosition;\nif( useScreenCoordinates != 0 ) {\nfinalPosition = vec4( screenPosition.xy + rotatedPosition, screenPosition.z, 1.0 );\n} else {\nfinalPosition = projectionMatrix * modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\nfinalPosition.xy += rotatedPosition * ( sizeAttenuation == 1 ? 1.0 : finalPosition.z );\n}\ngl_Position = finalPosition;\n}",
fragmentShader:"uniform vec3 color;\nuniform sampler2D map;\nuniform float opacity;\nuniform int fogType;\nuniform vec3 fogColor;\nuniform float fogDensity;\nuniform float fogNear;\nuniform float fogFar;\nuniform float alphaTest;\nvarying vec2 vUV;\nvoid main() {\nvec4 texture = texture2D( map, vUV );\nif ( texture.a < alphaTest ) discard;\ngl_FragColor = vec4( color * texture.xyz, texture.a * opacity );\nif ( fogType > 0 ) {\nfloat depth = gl_FragCoord.z / gl_FragCoord.w;\nfloat fogFactor = 0.0;\nif ( fogType == 1 ) {\nfogFactor = smoothstep( fogNear, fogFar, depth );\n} else {\nconst float LOG2 = 1.442695;\nfloat fogFactor = exp2( - fogDensity * fogDensity * depth * depth * LOG2 );\nfogFactor = 1.0 - clamp( fogFactor, 0.0, 1.0 );\n}\ngl_FragColor = mix( gl_FragColor, vec4( fogColor, gl_FragColor.w ), fogFactor );\n}\n}"}};
